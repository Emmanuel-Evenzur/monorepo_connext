schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum xdai_Aggregation_interval {
  hour
  day
}

type xdai_AssetBalance {
  id: ID!
  amount: BigInt!
  router: xdai_Router!
  assetId: xdai_Bytes!
}

input xdai_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: xdai_Router_filter
  assetId: xdai_Bytes
  assetId_not: xdai_Bytes
  assetId_gt: xdai_Bytes
  assetId_lt: xdai_Bytes
  assetId_gte: xdai_Bytes
  assetId_lte: xdai_Bytes
  assetId_in: [xdai_Bytes!]
  assetId_not_in: [xdai_Bytes!]
  assetId_contains: xdai_Bytes
  assetId_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
  and: [xdai_AssetBalance_filter]
  or: [xdai_AssetBalance_filter]
}

enum xdai_AssetBalance_orderBy {
  id
  amount
  router
  router__id
  assetId
}

scalar xdai_BigDecimal

scalar BigInt

input xdai_BlockChangedFilter {
  number_gte: Int!
}

input xdai_Block_height {
  hash: xdai_Bytes
  number: Int
  number_gte: Int
}

scalar xdai_Bytes

"""
8 bytes signed integer

"""
scalar xdai_Int8

"""Defines the order direction, either ascending or descending"""
enum xdai_OrderDirection {
  asc
  desc
}

type Query {
  xdai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_AssetBalance
  xdai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_AssetBalance_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_AssetBalance!]!
  xdai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Router
  xdai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Router_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Router!]!
  xdai_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Transaction
  xdai_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Transaction_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Transaction!]!
  xdai_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_User
  xdai_users(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_User_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_User!]!
  """Access to subgraph metadata"""
  xdai__meta(block: xdai_Block_height): xdai__Meta_
}

type xdai_Router {
  id: ID!
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: xdai_AssetBalance_orderBy, orderDirection: xdai_OrderDirection, where: xdai_AssetBalance_filter): [xdai_AssetBalance!]!
  transactions(skip: Int = 0, first: Int = 100, orderBy: xdai_Transaction_orderBy, orderDirection: xdai_OrderDirection, where: xdai_Transaction_filter): [xdai_Transaction!]!
}

input xdai_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  assetBalances_: xdai_AssetBalance_filter
  transactions_: xdai_Transaction_filter
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
  and: [xdai_Router_filter]
  or: [xdai_Router_filter]
}

enum xdai_Router_orderBy {
  id
  assetBalances
  transactions
}

type Subscription {
  xdai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_AssetBalance
  xdai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_AssetBalance_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_AssetBalance!]!
  xdai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Router
  xdai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Router_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Router!]!
  xdai_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Transaction
  xdai_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Transaction_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Transaction!]!
  xdai_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_User
  xdai_users(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_User_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_User!]!
  """Access to subgraph metadata"""
  xdai__meta(block: xdai_Block_height): xdai__Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type xdai_Transaction {
  id: ID!
  status: xdai_TransactionStatus!
  chainId: BigInt!
  preparedTimestamp: BigInt!
  receivingChainTxManagerAddress: xdai_Bytes!
  user: xdai_User!
  router: xdai_Router!
  initiator: xdai_Bytes!
  sendingAssetId: xdai_Bytes!
  receivingAssetId: xdai_Bytes!
  sendingChainFallback: xdai_Bytes!
  callTo: xdai_Bytes!
  receivingAddress: xdai_Bytes!
  callDataHash: xdai_Bytes!
  transactionId: xdai_Bytes!
  sendingChainId: BigInt!
  receivingChainId: BigInt!
  amount: BigInt!
  expiry: BigInt!
  preparedBlockNumber: BigInt!
  encryptedCallData: String!
  prepareCaller: xdai_Bytes
  bidSignature: xdai_Bytes!
  encodedBid: String!
  prepareTransactionHash: xdai_Bytes!
  prepareMeta: xdai_Bytes
  relayerFee: BigInt
  signature: xdai_Bytes
  callData: String
  externalCallSuccess: Boolean
  externalCallIsContract: Boolean
  externalCallReturnData: xdai_Bytes
  fulfillCaller: xdai_Bytes
  fulfillTransactionHash: xdai_Bytes
  fulfillMeta: xdai_Bytes
  fulfillTimestamp: BigInt
  cancelCaller: xdai_Bytes
  cancelTransactionHash: xdai_Bytes
  cancelMeta: xdai_Bytes
  cancelTimestamp: BigInt
}

enum xdai_TransactionStatus {
  Prepared
  Fulfilled
  Cancelled
}

input xdai_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: xdai_TransactionStatus
  status_not: xdai_TransactionStatus
  status_in: [xdai_TransactionStatus!]
  status_not_in: [xdai_TransactionStatus!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  preparedTimestamp: BigInt
  preparedTimestamp_not: BigInt
  preparedTimestamp_gt: BigInt
  preparedTimestamp_lt: BigInt
  preparedTimestamp_gte: BigInt
  preparedTimestamp_lte: BigInt
  preparedTimestamp_in: [BigInt!]
  preparedTimestamp_not_in: [BigInt!]
  receivingChainTxManagerAddress: xdai_Bytes
  receivingChainTxManagerAddress_not: xdai_Bytes
  receivingChainTxManagerAddress_gt: xdai_Bytes
  receivingChainTxManagerAddress_lt: xdai_Bytes
  receivingChainTxManagerAddress_gte: xdai_Bytes
  receivingChainTxManagerAddress_lte: xdai_Bytes
  receivingChainTxManagerAddress_in: [xdai_Bytes!]
  receivingChainTxManagerAddress_not_in: [xdai_Bytes!]
  receivingChainTxManagerAddress_contains: xdai_Bytes
  receivingChainTxManagerAddress_not_contains: xdai_Bytes
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: xdai_User_filter
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: xdai_Router_filter
  initiator: xdai_Bytes
  initiator_not: xdai_Bytes
  initiator_gt: xdai_Bytes
  initiator_lt: xdai_Bytes
  initiator_gte: xdai_Bytes
  initiator_lte: xdai_Bytes
  initiator_in: [xdai_Bytes!]
  initiator_not_in: [xdai_Bytes!]
  initiator_contains: xdai_Bytes
  initiator_not_contains: xdai_Bytes
  sendingAssetId: xdai_Bytes
  sendingAssetId_not: xdai_Bytes
  sendingAssetId_gt: xdai_Bytes
  sendingAssetId_lt: xdai_Bytes
  sendingAssetId_gte: xdai_Bytes
  sendingAssetId_lte: xdai_Bytes
  sendingAssetId_in: [xdai_Bytes!]
  sendingAssetId_not_in: [xdai_Bytes!]
  sendingAssetId_contains: xdai_Bytes
  sendingAssetId_not_contains: xdai_Bytes
  receivingAssetId: xdai_Bytes
  receivingAssetId_not: xdai_Bytes
  receivingAssetId_gt: xdai_Bytes
  receivingAssetId_lt: xdai_Bytes
  receivingAssetId_gte: xdai_Bytes
  receivingAssetId_lte: xdai_Bytes
  receivingAssetId_in: [xdai_Bytes!]
  receivingAssetId_not_in: [xdai_Bytes!]
  receivingAssetId_contains: xdai_Bytes
  receivingAssetId_not_contains: xdai_Bytes
  sendingChainFallback: xdai_Bytes
  sendingChainFallback_not: xdai_Bytes
  sendingChainFallback_gt: xdai_Bytes
  sendingChainFallback_lt: xdai_Bytes
  sendingChainFallback_gte: xdai_Bytes
  sendingChainFallback_lte: xdai_Bytes
  sendingChainFallback_in: [xdai_Bytes!]
  sendingChainFallback_not_in: [xdai_Bytes!]
  sendingChainFallback_contains: xdai_Bytes
  sendingChainFallback_not_contains: xdai_Bytes
  callTo: xdai_Bytes
  callTo_not: xdai_Bytes
  callTo_gt: xdai_Bytes
  callTo_lt: xdai_Bytes
  callTo_gte: xdai_Bytes
  callTo_lte: xdai_Bytes
  callTo_in: [xdai_Bytes!]
  callTo_not_in: [xdai_Bytes!]
  callTo_contains: xdai_Bytes
  callTo_not_contains: xdai_Bytes
  receivingAddress: xdai_Bytes
  receivingAddress_not: xdai_Bytes
  receivingAddress_gt: xdai_Bytes
  receivingAddress_lt: xdai_Bytes
  receivingAddress_gte: xdai_Bytes
  receivingAddress_lte: xdai_Bytes
  receivingAddress_in: [xdai_Bytes!]
  receivingAddress_not_in: [xdai_Bytes!]
  receivingAddress_contains: xdai_Bytes
  receivingAddress_not_contains: xdai_Bytes
  callDataHash: xdai_Bytes
  callDataHash_not: xdai_Bytes
  callDataHash_gt: xdai_Bytes
  callDataHash_lt: xdai_Bytes
  callDataHash_gte: xdai_Bytes
  callDataHash_lte: xdai_Bytes
  callDataHash_in: [xdai_Bytes!]
  callDataHash_not_in: [xdai_Bytes!]
  callDataHash_contains: xdai_Bytes
  callDataHash_not_contains: xdai_Bytes
  transactionId: xdai_Bytes
  transactionId_not: xdai_Bytes
  transactionId_gt: xdai_Bytes
  transactionId_lt: xdai_Bytes
  transactionId_gte: xdai_Bytes
  transactionId_lte: xdai_Bytes
  transactionId_in: [xdai_Bytes!]
  transactionId_not_in: [xdai_Bytes!]
  transactionId_contains: xdai_Bytes
  transactionId_not_contains: xdai_Bytes
  sendingChainId: BigInt
  sendingChainId_not: BigInt
  sendingChainId_gt: BigInt
  sendingChainId_lt: BigInt
  sendingChainId_gte: BigInt
  sendingChainId_lte: BigInt
  sendingChainId_in: [BigInt!]
  sendingChainId_not_in: [BigInt!]
  receivingChainId: BigInt
  receivingChainId_not: BigInt
  receivingChainId_gt: BigInt
  receivingChainId_lt: BigInt
  receivingChainId_gte: BigInt
  receivingChainId_lte: BigInt
  receivingChainId_in: [BigInt!]
  receivingChainId_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  expiry: BigInt
  expiry_not: BigInt
  expiry_gt: BigInt
  expiry_lt: BigInt
  expiry_gte: BigInt
  expiry_lte: BigInt
  expiry_in: [BigInt!]
  expiry_not_in: [BigInt!]
  preparedBlockNumber: BigInt
  preparedBlockNumber_not: BigInt
  preparedBlockNumber_gt: BigInt
  preparedBlockNumber_lt: BigInt
  preparedBlockNumber_gte: BigInt
  preparedBlockNumber_lte: BigInt
  preparedBlockNumber_in: [BigInt!]
  preparedBlockNumber_not_in: [BigInt!]
  encryptedCallData: String
  encryptedCallData_not: String
  encryptedCallData_gt: String
  encryptedCallData_lt: String
  encryptedCallData_gte: String
  encryptedCallData_lte: String
  encryptedCallData_in: [String!]
  encryptedCallData_not_in: [String!]
  encryptedCallData_contains: String
  encryptedCallData_contains_nocase: String
  encryptedCallData_not_contains: String
  encryptedCallData_not_contains_nocase: String
  encryptedCallData_starts_with: String
  encryptedCallData_starts_with_nocase: String
  encryptedCallData_not_starts_with: String
  encryptedCallData_not_starts_with_nocase: String
  encryptedCallData_ends_with: String
  encryptedCallData_ends_with_nocase: String
  encryptedCallData_not_ends_with: String
  encryptedCallData_not_ends_with_nocase: String
  prepareCaller: xdai_Bytes
  prepareCaller_not: xdai_Bytes
  prepareCaller_gt: xdai_Bytes
  prepareCaller_lt: xdai_Bytes
  prepareCaller_gte: xdai_Bytes
  prepareCaller_lte: xdai_Bytes
  prepareCaller_in: [xdai_Bytes!]
  prepareCaller_not_in: [xdai_Bytes!]
  prepareCaller_contains: xdai_Bytes
  prepareCaller_not_contains: xdai_Bytes
  bidSignature: xdai_Bytes
  bidSignature_not: xdai_Bytes
  bidSignature_gt: xdai_Bytes
  bidSignature_lt: xdai_Bytes
  bidSignature_gte: xdai_Bytes
  bidSignature_lte: xdai_Bytes
  bidSignature_in: [xdai_Bytes!]
  bidSignature_not_in: [xdai_Bytes!]
  bidSignature_contains: xdai_Bytes
  bidSignature_not_contains: xdai_Bytes
  encodedBid: String
  encodedBid_not: String
  encodedBid_gt: String
  encodedBid_lt: String
  encodedBid_gte: String
  encodedBid_lte: String
  encodedBid_in: [String!]
  encodedBid_not_in: [String!]
  encodedBid_contains: String
  encodedBid_contains_nocase: String
  encodedBid_not_contains: String
  encodedBid_not_contains_nocase: String
  encodedBid_starts_with: String
  encodedBid_starts_with_nocase: String
  encodedBid_not_starts_with: String
  encodedBid_not_starts_with_nocase: String
  encodedBid_ends_with: String
  encodedBid_ends_with_nocase: String
  encodedBid_not_ends_with: String
  encodedBid_not_ends_with_nocase: String
  prepareTransactionHash: xdai_Bytes
  prepareTransactionHash_not: xdai_Bytes
  prepareTransactionHash_gt: xdai_Bytes
  prepareTransactionHash_lt: xdai_Bytes
  prepareTransactionHash_gte: xdai_Bytes
  prepareTransactionHash_lte: xdai_Bytes
  prepareTransactionHash_in: [xdai_Bytes!]
  prepareTransactionHash_not_in: [xdai_Bytes!]
  prepareTransactionHash_contains: xdai_Bytes
  prepareTransactionHash_not_contains: xdai_Bytes
  prepareMeta: xdai_Bytes
  prepareMeta_not: xdai_Bytes
  prepareMeta_gt: xdai_Bytes
  prepareMeta_lt: xdai_Bytes
  prepareMeta_gte: xdai_Bytes
  prepareMeta_lte: xdai_Bytes
  prepareMeta_in: [xdai_Bytes!]
  prepareMeta_not_in: [xdai_Bytes!]
  prepareMeta_contains: xdai_Bytes
  prepareMeta_not_contains: xdai_Bytes
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  signature: xdai_Bytes
  signature_not: xdai_Bytes
  signature_gt: xdai_Bytes
  signature_lt: xdai_Bytes
  signature_gte: xdai_Bytes
  signature_lte: xdai_Bytes
  signature_in: [xdai_Bytes!]
  signature_not_in: [xdai_Bytes!]
  signature_contains: xdai_Bytes
  signature_not_contains: xdai_Bytes
  callData: String
  callData_not: String
  callData_gt: String
  callData_lt: String
  callData_gte: String
  callData_lte: String
  callData_in: [String!]
  callData_not_in: [String!]
  callData_contains: String
  callData_contains_nocase: String
  callData_not_contains: String
  callData_not_contains_nocase: String
  callData_starts_with: String
  callData_starts_with_nocase: String
  callData_not_starts_with: String
  callData_not_starts_with_nocase: String
  callData_ends_with: String
  callData_ends_with_nocase: String
  callData_not_ends_with: String
  callData_not_ends_with_nocase: String
  externalCallSuccess: Boolean
  externalCallSuccess_not: Boolean
  externalCallSuccess_in: [Boolean!]
  externalCallSuccess_not_in: [Boolean!]
  externalCallIsContract: Boolean
  externalCallIsContract_not: Boolean
  externalCallIsContract_in: [Boolean!]
  externalCallIsContract_not_in: [Boolean!]
  externalCallReturnData: xdai_Bytes
  externalCallReturnData_not: xdai_Bytes
  externalCallReturnData_gt: xdai_Bytes
  externalCallReturnData_lt: xdai_Bytes
  externalCallReturnData_gte: xdai_Bytes
  externalCallReturnData_lte: xdai_Bytes
  externalCallReturnData_in: [xdai_Bytes!]
  externalCallReturnData_not_in: [xdai_Bytes!]
  externalCallReturnData_contains: xdai_Bytes
  externalCallReturnData_not_contains: xdai_Bytes
  fulfillCaller: xdai_Bytes
  fulfillCaller_not: xdai_Bytes
  fulfillCaller_gt: xdai_Bytes
  fulfillCaller_lt: xdai_Bytes
  fulfillCaller_gte: xdai_Bytes
  fulfillCaller_lte: xdai_Bytes
  fulfillCaller_in: [xdai_Bytes!]
  fulfillCaller_not_in: [xdai_Bytes!]
  fulfillCaller_contains: xdai_Bytes
  fulfillCaller_not_contains: xdai_Bytes
  fulfillTransactionHash: xdai_Bytes
  fulfillTransactionHash_not: xdai_Bytes
  fulfillTransactionHash_gt: xdai_Bytes
  fulfillTransactionHash_lt: xdai_Bytes
  fulfillTransactionHash_gte: xdai_Bytes
  fulfillTransactionHash_lte: xdai_Bytes
  fulfillTransactionHash_in: [xdai_Bytes!]
  fulfillTransactionHash_not_in: [xdai_Bytes!]
  fulfillTransactionHash_contains: xdai_Bytes
  fulfillTransactionHash_not_contains: xdai_Bytes
  fulfillMeta: xdai_Bytes
  fulfillMeta_not: xdai_Bytes
  fulfillMeta_gt: xdai_Bytes
  fulfillMeta_lt: xdai_Bytes
  fulfillMeta_gte: xdai_Bytes
  fulfillMeta_lte: xdai_Bytes
  fulfillMeta_in: [xdai_Bytes!]
  fulfillMeta_not_in: [xdai_Bytes!]
  fulfillMeta_contains: xdai_Bytes
  fulfillMeta_not_contains: xdai_Bytes
  fulfillTimestamp: BigInt
  fulfillTimestamp_not: BigInt
  fulfillTimestamp_gt: BigInt
  fulfillTimestamp_lt: BigInt
  fulfillTimestamp_gte: BigInt
  fulfillTimestamp_lte: BigInt
  fulfillTimestamp_in: [BigInt!]
  fulfillTimestamp_not_in: [BigInt!]
  cancelCaller: xdai_Bytes
  cancelCaller_not: xdai_Bytes
  cancelCaller_gt: xdai_Bytes
  cancelCaller_lt: xdai_Bytes
  cancelCaller_gte: xdai_Bytes
  cancelCaller_lte: xdai_Bytes
  cancelCaller_in: [xdai_Bytes!]
  cancelCaller_not_in: [xdai_Bytes!]
  cancelCaller_contains: xdai_Bytes
  cancelCaller_not_contains: xdai_Bytes
  cancelTransactionHash: xdai_Bytes
  cancelTransactionHash_not: xdai_Bytes
  cancelTransactionHash_gt: xdai_Bytes
  cancelTransactionHash_lt: xdai_Bytes
  cancelTransactionHash_gte: xdai_Bytes
  cancelTransactionHash_lte: xdai_Bytes
  cancelTransactionHash_in: [xdai_Bytes!]
  cancelTransactionHash_not_in: [xdai_Bytes!]
  cancelTransactionHash_contains: xdai_Bytes
  cancelTransactionHash_not_contains: xdai_Bytes
  cancelMeta: xdai_Bytes
  cancelMeta_not: xdai_Bytes
  cancelMeta_gt: xdai_Bytes
  cancelMeta_lt: xdai_Bytes
  cancelMeta_gte: xdai_Bytes
  cancelMeta_lte: xdai_Bytes
  cancelMeta_in: [xdai_Bytes!]
  cancelMeta_not_in: [xdai_Bytes!]
  cancelMeta_contains: xdai_Bytes
  cancelMeta_not_contains: xdai_Bytes
  cancelTimestamp: BigInt
  cancelTimestamp_not: BigInt
  cancelTimestamp_gt: BigInt
  cancelTimestamp_lt: BigInt
  cancelTimestamp_gte: BigInt
  cancelTimestamp_lte: BigInt
  cancelTimestamp_in: [BigInt!]
  cancelTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
  and: [xdai_Transaction_filter]
  or: [xdai_Transaction_filter]
}

enum xdai_Transaction_orderBy {
  id
  status
  chainId
  preparedTimestamp
  receivingChainTxManagerAddress
  user
  user__id
  router
  router__id
  initiator
  sendingAssetId
  receivingAssetId
  sendingChainFallback
  callTo
  receivingAddress
  callDataHash
  transactionId
  sendingChainId
  receivingChainId
  amount
  expiry
  preparedBlockNumber
  encryptedCallData
  prepareCaller
  bidSignature
  encodedBid
  prepareTransactionHash
  prepareMeta
  relayerFee
  signature
  callData
  externalCallSuccess
  externalCallIsContract
  externalCallReturnData
  fulfillCaller
  fulfillTransactionHash
  fulfillMeta
  fulfillTimestamp
  cancelCaller
  cancelTransactionHash
  cancelMeta
  cancelTimestamp
}

type xdai_User {
  id: ID!
  transactions(skip: Int = 0, first: Int = 100, orderBy: xdai_Transaction_orderBy, orderDirection: xdai_OrderDirection, where: xdai_Transaction_filter): [xdai_Transaction!]!
}

input xdai_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transactions_: xdai_Transaction_filter
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
  and: [xdai_User_filter]
  or: [xdai_User_filter]
}

enum xdai_User_orderBy {
  id
  transactions
}

type xdai__Block_ {
  """The hash of the block"""
  hash: xdai_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: xdai_Bytes
}

"""The type for the top-level _meta field"""
type xdai__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: xdai__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}