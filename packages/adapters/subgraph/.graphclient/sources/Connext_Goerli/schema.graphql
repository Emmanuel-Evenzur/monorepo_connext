schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type goerli_AggregateRoot {
  id: ID!
  root: goerli_Bytes!
  blockNumber: BigInt!
}

input goerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type goerli_Asset {
  id: ID!
  key: goerli_Bytes
  canonicalId: goerli_Bytes
  canonicalDomain: BigInt
  adoptedAsset: goerli_Bytes
  localAsset: goerli_Bytes
  blockNumber: BigInt
}

type goerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: goerli_Router!
  asset: goerli_Asset!
  feesEarned: BigInt!
}

input goerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: goerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: goerli_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input goerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: goerli_Bytes
  key_not: goerli_Bytes
  key_in: [goerli_Bytes!]
  key_not_in: [goerli_Bytes!]
  key_contains: goerli_Bytes
  key_not_contains: goerli_Bytes
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: goerli_Bytes
  adoptedAsset_not: goerli_Bytes
  adoptedAsset_in: [goerli_Bytes!]
  adoptedAsset_not_in: [goerli_Bytes!]
  adoptedAsset_contains: goerli_Bytes
  adoptedAsset_not_contains: goerli_Bytes
  localAsset: goerli_Bytes
  localAsset_not: goerli_Bytes
  localAsset_in: [goerli_Bytes!]
  localAsset_not_in: [goerli_Bytes!]
  localAsset_contains: goerli_Bytes
  localAsset_not_contains: goerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

scalar goerli_BigDecimal

scalar BigInt

input goerli_BlockChangedFilter {
  number_gte: Int!
}

input goerli_Block_height {
  hash: goerli_Bytes
  number: Int
  number_gte: Int
}

scalar goerli_Bytes

type goerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: goerli_Bytes
  rootManager: goerli_Bytes
  mirrorConnector: goerli_Bytes
}

input goerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  status: goerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: goerli_Router_orderBy, orderDirection: goerli_OrderDirection, where: goerli_Router_filter): [goerli_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: goerli_Bytes
  delegate: goerli_Bytes
  receiveLocal: Boolean
  callData: goerli_Bytes
  slippage: BigInt
  originSender: goerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: goerli_Bytes
  asset: goerli_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: goerli_Bytes
  reconciledCaller: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: goerli_Bytes
}

input goerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: goerli_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  delegate: goerli_Bytes
  delegate_not: goerli_Bytes
  delegate_in: [goerli_Bytes!]
  delegate_not_in: [goerli_Bytes!]
  delegate_contains: goerli_Bytes
  delegate_not_contains: goerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: goerli_Bytes
  originSender_not: goerli_Bytes
  originSender_in: [goerli_Bytes!]
  originSender_not_in: [goerli_Bytes!]
  originSender_contains: goerli_Bytes
  originSender_not_contains: goerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: goerli_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: goerli_Bytes
  executedCaller_not: goerli_Bytes
  executedCaller_in: [goerli_Bytes!]
  executedCaller_not_in: [goerli_Bytes!]
  executedCaller_contains: goerli_Bytes
  executedCaller_not_contains: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTransactionHash_not: goerli_Bytes
  executedTransactionHash_in: [goerli_Bytes!]
  executedTransactionHash_not_in: [goerli_Bytes!]
  executedTransactionHash_contains: goerli_Bytes
  executedTransactionHash_not_contains: goerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: goerli_Bytes
  executedTxOrigin_not: goerli_Bytes
  executedTxOrigin_in: [goerli_Bytes!]
  executedTxOrigin_not_in: [goerli_Bytes!]
  executedTxOrigin_contains: goerli_Bytes
  executedTxOrigin_not_contains: goerli_Bytes
  reconciledCaller: goerli_Bytes
  reconciledCaller_not: goerli_Bytes
  reconciledCaller_in: [goerli_Bytes!]
  reconciledCaller_not_in: [goerli_Bytes!]
  reconciledCaller_contains: goerli_Bytes
  reconciledCaller_not_contains: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTransactionHash_not: goerli_Bytes
  reconciledTransactionHash_in: [goerli_Bytes!]
  reconciledTransactionHash_not_in: [goerli_Bytes!]
  reconciledTransactionHash_contains: goerli_Bytes
  reconciledTransactionHash_not_contains: goerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: goerli_Bytes
  reconciledTxOrigin_not: goerli_Bytes
  reconciledTxOrigin_in: [goerli_Bytes!]
  reconciledTxOrigin_not_in: [goerli_Bytes!]
  reconciledTxOrigin_contains: goerli_Bytes
  reconciledTxOrigin_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

"""Defines the order direction, either ascending or descending"""
enum goerli_OrderDirection {
  asc
  desc
}

type goerli_OriginMessage {
  id: ID!
  transferId: goerli_Bytes
  destinationDomain: BigInt
  leaf: goerli_Bytes
  index: BigInt
  message: goerli_Bytes
  root: goerli_Bytes
  transactionHash: goerli_Bytes
  blockNumber: BigInt
  rootCount: goerli_RootCount
}

input goerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: goerli_Bytes
  leaf_not: goerli_Bytes
  leaf_in: [goerli_Bytes!]
  leaf_not_in: [goerli_Bytes!]
  leaf_contains: goerli_Bytes
  leaf_not_contains: goerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: goerli_Bytes
  message_not: goerli_Bytes
  message_in: [goerli_Bytes!]
  message_not_in: [goerli_Bytes!]
  message_contains: goerli_Bytes
  message_not_contains: goerli_Bytes
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: goerli_RootCount_filter
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type goerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  status: goerli_TransferStatus
  messageHash: goerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: goerli_Bytes
  delegate: goerli_Bytes
  receiveLocal: Boolean
  callData: goerli_Bytes
  slippage: BigInt
  originSender: goerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: goerli_Bytes
  asset: goerli_Asset
  transacting: goerli_Bytes
  message: goerli_OriginMessage
  relayerFee: BigInt
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: goerli_Bytes
}

input goerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
  messageHash: goerli_Bytes
  messageHash_not: goerli_Bytes
  messageHash_in: [goerli_Bytes!]
  messageHash_not_in: [goerli_Bytes!]
  messageHash_contains: goerli_Bytes
  messageHash_not_contains: goerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  delegate: goerli_Bytes
  delegate_not: goerli_Bytes
  delegate_in: [goerli_Bytes!]
  delegate_not_in: [goerli_Bytes!]
  delegate_contains: goerli_Bytes
  delegate_not_contains: goerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: goerli_Bytes
  originSender_not: goerli_Bytes
  originSender_in: [goerli_Bytes!]
  originSender_not_in: [goerli_Bytes!]
  originSender_contains: goerli_Bytes
  originSender_not_contains: goerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: goerli_Asset_filter
  transacting: goerli_Bytes
  transacting_not: goerli_Bytes
  transacting_in: [goerli_Bytes!]
  transacting_not_in: [goerli_Bytes!]
  transacting_contains: goerli_Bytes
  transacting_not_contains: goerli_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: goerli_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: goerli_Bytes
  txOrigin_not: goerli_Bytes
  txOrigin_in: [goerli_Bytes!]
  txOrigin_not_in: [goerli_Bytes!]
  txOrigin_contains: goerli_Bytes
  txOrigin_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type goerli_PooledToken {
  id: ID!
  asset: goerli_Bytes!
}

input goerli_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: goerli_Bytes
  asset_not: goerli_Bytes
  asset_in: [goerli_Bytes!]
  asset_not_in: [goerli_Bytes!]
  asset_contains: goerli_Bytes
  asset_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_PooledToken_orderBy {
  id
  asset
}

type Query {
  goerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Asset!]!
  goerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AssetBalance!]!
  goerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Router!]!
  goerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Setting
  goerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Setting_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Setting!]!
  goerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Relayer
  goerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Relayer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Relayer!]!
  goerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_TransferRelayerFee
  goerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_TransferRelayerFee_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_TransferRelayerFee!]!
  goerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Sequencer
  goerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Sequencer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Sequencer!]!
  goerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_DestinationTransfer!]!
  goerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginMessage
  goerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginMessage!]!
  goerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregateRoot
  goerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregateRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregateRoot!]!
  goerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_ConnectorMeta
  goerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_ConnectorMeta!]!
  goerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootCount
  goerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootCount_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootCount!]!
  goerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootMessageSent
  goerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageSent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootMessageSent!]!
  goerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwap
  goerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwap_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwap!]!
  goerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_PooledToken
  goerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_PooledToken_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_PooledToken!]!
  goerli_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapLiquidity
  goerli_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapLiquidity_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapLiquidity!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
}

type goerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: goerli_Bytes
}

input goerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: goerli_Bytes
  relayer_not: goerli_Bytes
  relayer_in: [goerli_Bytes!]
  relayer_not_in: [goerli_Bytes!]
  relayer_contains: goerli_Bytes
  relayer_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type goerli_RootCount {
  id: ID!
  count: BigInt
}

input goerli_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootCount_orderBy {
  id
  count
}

type goerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: goerli_Bytes
  count: BigInt
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input goerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type goerli_Router {
  id: ID!
  isActive: Boolean!
  owner: goerli_Bytes
  recipient: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: goerli_AssetBalance_orderBy, orderDirection: goerli_OrderDirection, where: goerli_AssetBalance_filter): [goerli_AssetBalance!]!
}

input goerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: goerli_Bytes
  owner_not: goerli_Bytes
  owner_in: [goerli_Bytes!]
  owner_not_in: [goerli_Bytes!]
  owner_contains: goerli_Bytes
  owner_not_contains: goerli_Bytes
  recipient: goerli_Bytes
  recipient_not: goerli_Bytes
  recipient_in: [goerli_Bytes!]
  recipient_not_in: [goerli_Bytes!]
  recipient_contains: goerli_Bytes
  recipient_not_contains: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedOwner_not: goerli_Bytes
  proposedOwner_in: [goerli_Bytes!]
  proposedOwner_not_in: [goerli_Bytes!]
  proposedOwner_contains: goerli_Bytes
  proposedOwner_not_contains: goerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: goerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type goerli_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: goerli_Bytes
}

input goerli_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: goerli_Bytes
  sequencer_not: goerli_Bytes
  sequencer_in: [goerli_Bytes!]
  sequencer_not_in: [goerli_Bytes!]
  sequencer_contains: goerli_Bytes
  sequencer_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type goerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: goerli_Bytes!
}

input goerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type goerli_StableSwap {
  id: ID!
  isActive: Boolean
  key: goerli_Bytes
  canonicalId: goerli_Bytes
  domain: BigInt
  swapPool: goerli_Bytes
  lpToken: goerli_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: goerli_PooledToken_orderBy, orderDirection: goerli_OrderDirection, where: goerli_PooledToken_filter): [goerli_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
}

type goerli_StableSwapLiquidity {
  id: ID!
  provider: goerli_Bytes!
  stableSwap: goerli_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input goerli_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: goerli_Bytes
  provider_not: goerli_Bytes
  provider_in: [goerli_Bytes!]
  provider_not_in: [goerli_Bytes!]
  provider_contains: goerli_Bytes
  provider_not_contains: goerli_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: goerli_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

input goerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: goerli_Bytes
  key_not: goerli_Bytes
  key_in: [goerli_Bytes!]
  key_not_in: [goerli_Bytes!]
  key_contains: goerli_Bytes
  key_not_contains: goerli_Bytes
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: goerli_Bytes
  swapPool_not: goerli_Bytes
  swapPool_in: [goerli_Bytes!]
  swapPool_not_in: [goerli_Bytes!]
  swapPool_contains: goerli_Bytes
  swapPool_not_contains: goerli_Bytes
  lpToken: goerli_Bytes
  lpToken_not: goerli_Bytes
  lpToken_in: [goerli_Bytes!]
  lpToken_not_in: [goerli_Bytes!]
  lpToken_contains: goerli_Bytes
  lpToken_not_contains: goerli_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: goerli_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
}

type Subscription {
  goerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Asset!]!
  goerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AssetBalance!]!
  goerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Router!]!
  goerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Setting
  goerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Setting_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Setting!]!
  goerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Relayer
  goerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Relayer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Relayer!]!
  goerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_TransferRelayerFee
  goerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_TransferRelayerFee_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_TransferRelayerFee!]!
  goerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Sequencer
  goerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Sequencer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Sequencer!]!
  goerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_DestinationTransfer!]!
  goerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginMessage
  goerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginMessage!]!
  goerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregateRoot
  goerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregateRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregateRoot!]!
  goerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_ConnectorMeta
  goerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_ConnectorMeta!]!
  goerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootCount
  goerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootCount_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootCount!]!
  goerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootMessageSent
  goerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageSent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootMessageSent!]!
  goerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwap
  goerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwap_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwap!]!
  goerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_PooledToken
  goerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_PooledToken_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_PooledToken!]!
  goerli_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapLiquidity
  goerli_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapLiquidity_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapLiquidity!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
}

type goerli_TransferRelayerFee {
  id: ID!
  transferId: goerli_Bytes!
  fee: BigInt
}

input goerli_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum goerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type goerli__Block_ {
  """The hash of the block"""
  hash: goerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type goerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: goerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}