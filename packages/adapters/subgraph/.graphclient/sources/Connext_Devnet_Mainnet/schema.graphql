schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type devnetmainnet_AggregatedMessageRoot {
  id: ID!
  index: BigInt!
  receivedRoot: devnetmainnet_Bytes!
  domain: BigInt
}

input devnetmainnet_AggregatedMessageRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  receivedRoot: devnetmainnet_Bytes
  receivedRoot_not: devnetmainnet_Bytes
  receivedRoot_in: [devnetmainnet_Bytes!]
  receivedRoot_not_in: [devnetmainnet_Bytes!]
  receivedRoot_contains: devnetmainnet_Bytes
  receivedRoot_not_contains: devnetmainnet_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_AggregatedMessageRoot_orderBy {
  id
  index
  receivedRoot
  domain
}

type devnetmainnet_ArbitrumConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: devnetmainnet_Bytes!
  rootManager: devnetmainnet_Bytes!
  mirrorConnector: devnetmainnet_Bytes!
}

input devnetmainnet_ArbitrumConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: devnetmainnet_Bytes
  amb_not: devnetmainnet_Bytes
  amb_in: [devnetmainnet_Bytes!]
  amb_not_in: [devnetmainnet_Bytes!]
  amb_contains: devnetmainnet_Bytes
  amb_not_contains: devnetmainnet_Bytes
  rootManager: devnetmainnet_Bytes
  rootManager_not: devnetmainnet_Bytes
  rootManager_in: [devnetmainnet_Bytes!]
  rootManager_not_in: [devnetmainnet_Bytes!]
  rootManager_contains: devnetmainnet_Bytes
  rootManager_not_contains: devnetmainnet_Bytes
  mirrorConnector: devnetmainnet_Bytes
  mirrorConnector_not: devnetmainnet_Bytes
  mirrorConnector_in: [devnetmainnet_Bytes!]
  mirrorConnector_not_in: [devnetmainnet_Bytes!]
  mirrorConnector_contains: devnetmainnet_Bytes
  mirrorConnector_not_contains: devnetmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_ArbitrumConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar devnetmainnet_BigDecimal

scalar BigInt

input devnetmainnet_BlockChangedFilter {
  number_gte: Int!
}

input devnetmainnet_Block_height {
  hash: devnetmainnet_Bytes
  number: Int
  number_gte: Int
}

type devnetmainnet_BnbConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: devnetmainnet_Bytes!
  rootManager: devnetmainnet_Bytes!
  mirrorConnector: devnetmainnet_Bytes!
}

input devnetmainnet_BnbConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: devnetmainnet_Bytes
  amb_not: devnetmainnet_Bytes
  amb_in: [devnetmainnet_Bytes!]
  amb_not_in: [devnetmainnet_Bytes!]
  amb_contains: devnetmainnet_Bytes
  amb_not_contains: devnetmainnet_Bytes
  rootManager: devnetmainnet_Bytes
  rootManager_not: devnetmainnet_Bytes
  rootManager_in: [devnetmainnet_Bytes!]
  rootManager_not_in: [devnetmainnet_Bytes!]
  rootManager_contains: devnetmainnet_Bytes
  rootManager_not_contains: devnetmainnet_Bytes
  mirrorConnector: devnetmainnet_Bytes
  mirrorConnector_not: devnetmainnet_Bytes
  mirrorConnector_in: [devnetmainnet_Bytes!]
  mirrorConnector_not_in: [devnetmainnet_Bytes!]
  mirrorConnector_contains: devnetmainnet_Bytes
  mirrorConnector_not_contains: devnetmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_BnbConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar devnetmainnet_Bytes

type devnetmainnet_GnosisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: devnetmainnet_Bytes!
  rootManager: devnetmainnet_Bytes!
  mirrorConnector: devnetmainnet_Bytes!
}

input devnetmainnet_GnosisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: devnetmainnet_Bytes
  amb_not: devnetmainnet_Bytes
  amb_in: [devnetmainnet_Bytes!]
  amb_not_in: [devnetmainnet_Bytes!]
  amb_contains: devnetmainnet_Bytes
  amb_not_contains: devnetmainnet_Bytes
  rootManager: devnetmainnet_Bytes
  rootManager_not: devnetmainnet_Bytes
  rootManager_in: [devnetmainnet_Bytes!]
  rootManager_not_in: [devnetmainnet_Bytes!]
  rootManager_contains: devnetmainnet_Bytes
  rootManager_not_contains: devnetmainnet_Bytes
  mirrorConnector: devnetmainnet_Bytes
  mirrorConnector_not: devnetmainnet_Bytes
  mirrorConnector_in: [devnetmainnet_Bytes!]
  mirrorConnector_not_in: [devnetmainnet_Bytes!]
  mirrorConnector_contains: devnetmainnet_Bytes
  mirrorConnector_not_contains: devnetmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_GnosisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type devnetmainnet_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: devnetmainnet_Bytes!
  rootManager: devnetmainnet_Bytes!
  mirrorConnector: devnetmainnet_Bytes!
}

input devnetmainnet_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: devnetmainnet_Bytes
  amb_not: devnetmainnet_Bytes
  amb_in: [devnetmainnet_Bytes!]
  amb_not_in: [devnetmainnet_Bytes!]
  amb_contains: devnetmainnet_Bytes
  amb_not_contains: devnetmainnet_Bytes
  rootManager: devnetmainnet_Bytes
  rootManager_not: devnetmainnet_Bytes
  rootManager_in: [devnetmainnet_Bytes!]
  rootManager_not_in: [devnetmainnet_Bytes!]
  rootManager_contains: devnetmainnet_Bytes
  rootManager_not_contains: devnetmainnet_Bytes
  mirrorConnector: devnetmainnet_Bytes
  mirrorConnector_not: devnetmainnet_Bytes
  mirrorConnector_in: [devnetmainnet_Bytes!]
  mirrorConnector_not_in: [devnetmainnet_Bytes!]
  mirrorConnector_contains: devnetmainnet_Bytes
  mirrorConnector_not_contains: devnetmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

"""Defines the order direction, either ascending or descending"""
enum devnetmainnet_OrderDirection {
  asc
  desc
}

type devnetmainnet_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: devnetmainnet_Bytes!
  rootManager: devnetmainnet_Bytes!
  mirrorConnector: devnetmainnet_Bytes!
}

input devnetmainnet_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: devnetmainnet_Bytes
  amb_not: devnetmainnet_Bytes
  amb_in: [devnetmainnet_Bytes!]
  amb_not_in: [devnetmainnet_Bytes!]
  amb_contains: devnetmainnet_Bytes
  amb_not_contains: devnetmainnet_Bytes
  rootManager: devnetmainnet_Bytes
  rootManager_not: devnetmainnet_Bytes
  rootManager_in: [devnetmainnet_Bytes!]
  rootManager_not_in: [devnetmainnet_Bytes!]
  rootManager_contains: devnetmainnet_Bytes
  rootManager_not_contains: devnetmainnet_Bytes
  mirrorConnector: devnetmainnet_Bytes
  mirrorConnector_not: devnetmainnet_Bytes
  mirrorConnector_in: [devnetmainnet_Bytes!]
  mirrorConnector_not_in: [devnetmainnet_Bytes!]
  mirrorConnector_contains: devnetmainnet_Bytes
  mirrorConnector_not_contains: devnetmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type Query {
  devnetmainnet_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_RootAggregated
  devnetmainnet_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_RootAggregated_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_RootAggregated!]!
  devnetmainnet_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_RootPropagated
  devnetmainnet_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_RootPropagated_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_RootPropagated!]!
  devnetmainnet_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_AggregatedMessageRoot
  devnetmainnet_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_AggregatedMessageRoot_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_AggregatedMessageRoot!]!
  devnetmainnet_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_RootManagerMeta
  devnetmainnet_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_RootManagerMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_RootManagerMeta!]!
  devnetmainnet_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_PolygonConnectorMeta
  devnetmainnet_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_PolygonConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_PolygonConnectorMeta!]!
  devnetmainnet_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_OptimismConnectorMeta
  devnetmainnet_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_OptimismConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_OptimismConnectorMeta!]!
  devnetmainnet_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_BnbConnectorMeta
  devnetmainnet_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_BnbConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_BnbConnectorMeta!]!
  devnetmainnet_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_ArbitrumConnectorMeta
  devnetmainnet_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_ArbitrumConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_ArbitrumConnectorMeta!]!
  devnetmainnet_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_GnosisConnectorMeta
  devnetmainnet_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_GnosisConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_GnosisConnectorMeta!]!
  devnetmainnet_zkSyncConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_ZkSyncConnectorMeta
  devnetmainnet_zkSyncConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_ZkSyncConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_ZkSyncConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_ZkSyncConnectorMeta!]!
  devnetmainnet_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_RootMessageProcessed
  devnetmainnet_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_RootMessageProcessed_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  devnetmainnet__meta(block: devnetmainnet_Block_height): devnetmainnet__Meta_
}

type devnetmainnet_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: devnetmainnet_Bytes!
  index: BigInt!
}

input devnetmainnet_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: devnetmainnet_Bytes
  receivedRoot_not: devnetmainnet_Bytes
  receivedRoot_in: [devnetmainnet_Bytes!]
  receivedRoot_not_in: [devnetmainnet_Bytes!]
  receivedRoot_contains: devnetmainnet_Bytes
  receivedRoot_not_contains: devnetmainnet_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type devnetmainnet_RootManagerMeta {
  id: ID!
  domains: [BigInt!]
  connectors: [devnetmainnet_Bytes!]
}

input devnetmainnet_RootManagerMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  connectors: [devnetmainnet_Bytes!]
  connectors_not: [devnetmainnet_Bytes!]
  connectors_contains: [devnetmainnet_Bytes!]
  connectors_contains_nocase: [devnetmainnet_Bytes!]
  connectors_not_contains: [devnetmainnet_Bytes!]
  connectors_not_contains_nocase: [devnetmainnet_Bytes!]
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_RootManagerMeta_orderBy {
  id
  domains
  connectors
}

type devnetmainnet_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: devnetmainnet_Bytes
  caller: devnetmainnet_Bytes
  transactionHash: devnetmainnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input devnetmainnet_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: devnetmainnet_Bytes
  root_not: devnetmainnet_Bytes
  root_in: [devnetmainnet_Bytes!]
  root_not_in: [devnetmainnet_Bytes!]
  root_contains: devnetmainnet_Bytes
  root_not_contains: devnetmainnet_Bytes
  caller: devnetmainnet_Bytes
  caller_not: devnetmainnet_Bytes
  caller_in: [devnetmainnet_Bytes!]
  caller_not_in: [devnetmainnet_Bytes!]
  caller_contains: devnetmainnet_Bytes
  caller_not_contains: devnetmainnet_Bytes
  transactionHash: devnetmainnet_Bytes
  transactionHash_not: devnetmainnet_Bytes
  transactionHash_in: [devnetmainnet_Bytes!]
  transactionHash_not_in: [devnetmainnet_Bytes!]
  transactionHash_contains: devnetmainnet_Bytes
  transactionHash_not_contains: devnetmainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type devnetmainnet_RootPropagated {
  id: ID!
  aggregate: devnetmainnet_Bytes!
  domainsHash: devnetmainnet_Bytes!
  count: BigInt!
}

input devnetmainnet_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: devnetmainnet_Bytes
  aggregate_not: devnetmainnet_Bytes
  aggregate_in: [devnetmainnet_Bytes!]
  aggregate_not_in: [devnetmainnet_Bytes!]
  aggregate_contains: devnetmainnet_Bytes
  aggregate_not_contains: devnetmainnet_Bytes
  domainsHash: devnetmainnet_Bytes
  domainsHash_not: devnetmainnet_Bytes
  domainsHash_in: [devnetmainnet_Bytes!]
  domainsHash_not_in: [devnetmainnet_Bytes!]
  domainsHash_contains: devnetmainnet_Bytes
  domainsHash_not_contains: devnetmainnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_RootPropagated_orderBy {
  id
  aggregate
  domainsHash
  count
}

type Subscription {
  devnetmainnet_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_RootAggregated
  devnetmainnet_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_RootAggregated_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_RootAggregated!]!
  devnetmainnet_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_RootPropagated
  devnetmainnet_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_RootPropagated_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_RootPropagated!]!
  devnetmainnet_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_AggregatedMessageRoot
  devnetmainnet_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_AggregatedMessageRoot_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_AggregatedMessageRoot!]!
  devnetmainnet_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_RootManagerMeta
  devnetmainnet_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_RootManagerMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_RootManagerMeta!]!
  devnetmainnet_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_PolygonConnectorMeta
  devnetmainnet_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_PolygonConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_PolygonConnectorMeta!]!
  devnetmainnet_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_OptimismConnectorMeta
  devnetmainnet_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_OptimismConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_OptimismConnectorMeta!]!
  devnetmainnet_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_BnbConnectorMeta
  devnetmainnet_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_BnbConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_BnbConnectorMeta!]!
  devnetmainnet_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_ArbitrumConnectorMeta
  devnetmainnet_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_ArbitrumConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_ArbitrumConnectorMeta!]!
  devnetmainnet_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_GnosisConnectorMeta
  devnetmainnet_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_GnosisConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_GnosisConnectorMeta!]!
  devnetmainnet_zkSyncConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_ZkSyncConnectorMeta
  devnetmainnet_zkSyncConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_ZkSyncConnectorMeta_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_ZkSyncConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_ZkSyncConnectorMeta!]!
  devnetmainnet_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetmainnet_RootMessageProcessed
  devnetmainnet_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetmainnet_RootMessageProcessed_orderBy
    orderDirection: devnetmainnet_OrderDirection
    where: devnetmainnet_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetmainnet_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  devnetmainnet__meta(block: devnetmainnet_Block_height): devnetmainnet__Meta_
}

type devnetmainnet_ZkSyncConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: devnetmainnet_Bytes!
  rootManager: devnetmainnet_Bytes!
  mirrorConnector: devnetmainnet_Bytes!
}

input devnetmainnet_ZkSyncConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: devnetmainnet_Bytes
  amb_not: devnetmainnet_Bytes
  amb_in: [devnetmainnet_Bytes!]
  amb_not_in: [devnetmainnet_Bytes!]
  amb_contains: devnetmainnet_Bytes
  amb_not_contains: devnetmainnet_Bytes
  rootManager: devnetmainnet_Bytes
  rootManager_not: devnetmainnet_Bytes
  rootManager_in: [devnetmainnet_Bytes!]
  rootManager_not_in: [devnetmainnet_Bytes!]
  rootManager_contains: devnetmainnet_Bytes
  rootManager_not_contains: devnetmainnet_Bytes
  mirrorConnector: devnetmainnet_Bytes
  mirrorConnector_not: devnetmainnet_Bytes
  mirrorConnector_in: [devnetmainnet_Bytes!]
  mirrorConnector_not_in: [devnetmainnet_Bytes!]
  mirrorConnector_contains: devnetmainnet_Bytes
  mirrorConnector_not_contains: devnetmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: devnetmainnet_BlockChangedFilter
}

enum devnetmainnet_ZkSyncConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type devnetmainnet__Block_ {
  """The hash of the block"""
  hash: devnetmainnet_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type devnetmainnet__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: devnetmainnet__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}