schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type arbitrumgoerli_AggregateRoot {
  id: ID!
  root: arbitrumgoerli_Bytes!
  blockNumber: BigInt!
}

input arbitrumgoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: arbitrumgoerli_Bytes
  root_not: arbitrumgoerli_Bytes
  root_in: [arbitrumgoerli_Bytes!]
  root_not_in: [arbitrumgoerli_Bytes!]
  root_contains: arbitrumgoerli_Bytes
  root_not_contains: arbitrumgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type arbitrumgoerli_Asset {
  id: ID!
  key: arbitrumgoerli_Bytes
  canonicalId: arbitrumgoerli_Bytes
  canonicalDomain: BigInt
  adoptedAsset: arbitrumgoerli_Bytes
  localAsset: arbitrumgoerli_Bytes
  blockNumber: BigInt
}

type arbitrumgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: arbitrumgoerli_Router!
  asset: arbitrumgoerli_Asset!
  feesEarned: BigInt!
}

input arbitrumgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: arbitrumgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: arbitrumgoerli_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input arbitrumgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: arbitrumgoerli_Bytes
  key_not: arbitrumgoerli_Bytes
  key_in: [arbitrumgoerli_Bytes!]
  key_not_in: [arbitrumgoerli_Bytes!]
  key_contains: arbitrumgoerli_Bytes
  key_not_contains: arbitrumgoerli_Bytes
  canonicalId: arbitrumgoerli_Bytes
  canonicalId_not: arbitrumgoerli_Bytes
  canonicalId_in: [arbitrumgoerli_Bytes!]
  canonicalId_not_in: [arbitrumgoerli_Bytes!]
  canonicalId_contains: arbitrumgoerli_Bytes
  canonicalId_not_contains: arbitrumgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: arbitrumgoerli_Bytes
  adoptedAsset_not: arbitrumgoerli_Bytes
  adoptedAsset_in: [arbitrumgoerli_Bytes!]
  adoptedAsset_not_in: [arbitrumgoerli_Bytes!]
  adoptedAsset_contains: arbitrumgoerli_Bytes
  adoptedAsset_not_contains: arbitrumgoerli_Bytes
  localAsset: arbitrumgoerli_Bytes
  localAsset_not: arbitrumgoerli_Bytes
  localAsset_in: [arbitrumgoerli_Bytes!]
  localAsset_not_in: [arbitrumgoerli_Bytes!]
  localAsset_contains: arbitrumgoerli_Bytes
  localAsset_not_contains: arbitrumgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

scalar arbitrumgoerli_BigDecimal

scalar BigInt

input arbitrumgoerli_BlockChangedFilter {
  number_gte: Int!
}

input arbitrumgoerli_Block_height {
  hash: arbitrumgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar arbitrumgoerli_Bytes

type arbitrumgoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: arbitrumgoerli_Bytes
  rootManager: arbitrumgoerli_Bytes
  mirrorConnector: arbitrumgoerli_Bytes
}

input arbitrumgoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: arbitrumgoerli_Bytes
  amb_not: arbitrumgoerli_Bytes
  amb_in: [arbitrumgoerli_Bytes!]
  amb_not_in: [arbitrumgoerli_Bytes!]
  amb_contains: arbitrumgoerli_Bytes
  amb_not_contains: arbitrumgoerli_Bytes
  rootManager: arbitrumgoerli_Bytes
  rootManager_not: arbitrumgoerli_Bytes
  rootManager_in: [arbitrumgoerli_Bytes!]
  rootManager_not_in: [arbitrumgoerli_Bytes!]
  rootManager_contains: arbitrumgoerli_Bytes
  rootManager_not_contains: arbitrumgoerli_Bytes
  mirrorConnector: arbitrumgoerli_Bytes
  mirrorConnector_not: arbitrumgoerli_Bytes
  mirrorConnector_in: [arbitrumgoerli_Bytes!]
  mirrorConnector_not_in: [arbitrumgoerli_Bytes!]
  mirrorConnector_contains: arbitrumgoerli_Bytes
  mirrorConnector_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type arbitrumgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: arbitrumgoerli_Bytes
  nonce: BigInt
  status: arbitrumgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_Router_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_Router_filter): [arbitrumgoerli_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: arbitrumgoerli_Bytes
  delegate: arbitrumgoerli_Bytes
  receiveLocal: Boolean
  callData: arbitrumgoerli_Bytes
  slippage: BigInt
  originSender: arbitrumgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: arbitrumgoerli_Bytes
  asset: arbitrumgoerli_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: arbitrumgoerli_Bytes
  executedTransactionHash: arbitrumgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: arbitrumgoerli_Bytes
  reconciledCaller: arbitrumgoerli_Bytes
  reconciledTransactionHash: arbitrumgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: arbitrumgoerli_Bytes
}

input arbitrumgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: arbitrumgoerli_Bytes
  transferId_not: arbitrumgoerli_Bytes
  transferId_in: [arbitrumgoerli_Bytes!]
  transferId_not_in: [arbitrumgoerli_Bytes!]
  transferId_contains: arbitrumgoerli_Bytes
  transferId_not_contains: arbitrumgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: arbitrumgoerli_TransferStatus
  status_not: arbitrumgoerli_TransferStatus
  status_in: [arbitrumgoerli_TransferStatus!]
  status_not_in: [arbitrumgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: arbitrumgoerli_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: arbitrumgoerli_Bytes
  to_not: arbitrumgoerli_Bytes
  to_in: [arbitrumgoerli_Bytes!]
  to_not_in: [arbitrumgoerli_Bytes!]
  to_contains: arbitrumgoerli_Bytes
  to_not_contains: arbitrumgoerli_Bytes
  delegate: arbitrumgoerli_Bytes
  delegate_not: arbitrumgoerli_Bytes
  delegate_in: [arbitrumgoerli_Bytes!]
  delegate_not_in: [arbitrumgoerli_Bytes!]
  delegate_contains: arbitrumgoerli_Bytes
  delegate_not_contains: arbitrumgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: arbitrumgoerli_Bytes
  callData_not: arbitrumgoerli_Bytes
  callData_in: [arbitrumgoerli_Bytes!]
  callData_not_in: [arbitrumgoerli_Bytes!]
  callData_contains: arbitrumgoerli_Bytes
  callData_not_contains: arbitrumgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: arbitrumgoerli_Bytes
  originSender_not: arbitrumgoerli_Bytes
  originSender_in: [arbitrumgoerli_Bytes!]
  originSender_not_in: [arbitrumgoerli_Bytes!]
  originSender_contains: arbitrumgoerli_Bytes
  originSender_not_contains: arbitrumgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: arbitrumgoerli_Bytes
  canonicalId_not: arbitrumgoerli_Bytes
  canonicalId_in: [arbitrumgoerli_Bytes!]
  canonicalId_not_in: [arbitrumgoerli_Bytes!]
  canonicalId_contains: arbitrumgoerli_Bytes
  canonicalId_not_contains: arbitrumgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: arbitrumgoerli_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: arbitrumgoerli_Bytes
  executedCaller_not: arbitrumgoerli_Bytes
  executedCaller_in: [arbitrumgoerli_Bytes!]
  executedCaller_not_in: [arbitrumgoerli_Bytes!]
  executedCaller_contains: arbitrumgoerli_Bytes
  executedCaller_not_contains: arbitrumgoerli_Bytes
  executedTransactionHash: arbitrumgoerli_Bytes
  executedTransactionHash_not: arbitrumgoerli_Bytes
  executedTransactionHash_in: [arbitrumgoerli_Bytes!]
  executedTransactionHash_not_in: [arbitrumgoerli_Bytes!]
  executedTransactionHash_contains: arbitrumgoerli_Bytes
  executedTransactionHash_not_contains: arbitrumgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: arbitrumgoerli_Bytes
  executedTxOrigin_not: arbitrumgoerli_Bytes
  executedTxOrigin_in: [arbitrumgoerli_Bytes!]
  executedTxOrigin_not_in: [arbitrumgoerli_Bytes!]
  executedTxOrigin_contains: arbitrumgoerli_Bytes
  executedTxOrigin_not_contains: arbitrumgoerli_Bytes
  reconciledCaller: arbitrumgoerli_Bytes
  reconciledCaller_not: arbitrumgoerli_Bytes
  reconciledCaller_in: [arbitrumgoerli_Bytes!]
  reconciledCaller_not_in: [arbitrumgoerli_Bytes!]
  reconciledCaller_contains: arbitrumgoerli_Bytes
  reconciledCaller_not_contains: arbitrumgoerli_Bytes
  reconciledTransactionHash: arbitrumgoerli_Bytes
  reconciledTransactionHash_not: arbitrumgoerli_Bytes
  reconciledTransactionHash_in: [arbitrumgoerli_Bytes!]
  reconciledTransactionHash_not_in: [arbitrumgoerli_Bytes!]
  reconciledTransactionHash_contains: arbitrumgoerli_Bytes
  reconciledTransactionHash_not_contains: arbitrumgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: arbitrumgoerli_Bytes
  reconciledTxOrigin_not: arbitrumgoerli_Bytes
  reconciledTxOrigin_in: [arbitrumgoerli_Bytes!]
  reconciledTxOrigin_not_in: [arbitrumgoerli_Bytes!]
  reconciledTxOrigin_contains: arbitrumgoerli_Bytes
  reconciledTxOrigin_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

"""Defines the order direction, either ascending or descending"""
enum arbitrumgoerli_OrderDirection {
  asc
  desc
}

type arbitrumgoerli_OriginMessage {
  id: ID!
  transferId: arbitrumgoerli_Bytes
  destinationDomain: BigInt
  leaf: arbitrumgoerli_Bytes
  index: BigInt
  message: arbitrumgoerli_Bytes
  root: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  blockNumber: BigInt
  rootCount: arbitrumgoerli_RootCount
}

input arbitrumgoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: arbitrumgoerli_Bytes
  transferId_not: arbitrumgoerli_Bytes
  transferId_in: [arbitrumgoerli_Bytes!]
  transferId_not_in: [arbitrumgoerli_Bytes!]
  transferId_contains: arbitrumgoerli_Bytes
  transferId_not_contains: arbitrumgoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: arbitrumgoerli_Bytes
  leaf_not: arbitrumgoerli_Bytes
  leaf_in: [arbitrumgoerli_Bytes!]
  leaf_not_in: [arbitrumgoerli_Bytes!]
  leaf_contains: arbitrumgoerli_Bytes
  leaf_not_contains: arbitrumgoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: arbitrumgoerli_Bytes
  message_not: arbitrumgoerli_Bytes
  message_in: [arbitrumgoerli_Bytes!]
  message_not_in: [arbitrumgoerli_Bytes!]
  message_contains: arbitrumgoerli_Bytes
  message_not_contains: arbitrumgoerli_Bytes
  root: arbitrumgoerli_Bytes
  root_not: arbitrumgoerli_Bytes
  root_in: [arbitrumgoerli_Bytes!]
  root_not_in: [arbitrumgoerli_Bytes!]
  root_contains: arbitrumgoerli_Bytes
  root_not_contains: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  transactionHash_not: arbitrumgoerli_Bytes
  transactionHash_in: [arbitrumgoerli_Bytes!]
  transactionHash_not_in: [arbitrumgoerli_Bytes!]
  transactionHash_contains: arbitrumgoerli_Bytes
  transactionHash_not_contains: arbitrumgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: arbitrumgoerli_RootCount_filter
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type arbitrumgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: arbitrumgoerli_Bytes
  nonce: BigInt
  status: arbitrumgoerli_TransferStatus
  messageHash: arbitrumgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: arbitrumgoerli_Bytes
  delegate: arbitrumgoerli_Bytes
  receiveLocal: Boolean
  callData: arbitrumgoerli_Bytes
  slippage: BigInt
  originSender: arbitrumgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: arbitrumgoerli_Bytes
  asset: arbitrumgoerli_Asset
  transacting: arbitrumgoerli_Bytes
  message: arbitrumgoerli_OriginMessage
  relayerFee: BigInt
  caller: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: arbitrumgoerli_Bytes
}

input arbitrumgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: arbitrumgoerli_Bytes
  transferId_not: arbitrumgoerli_Bytes
  transferId_in: [arbitrumgoerli_Bytes!]
  transferId_not_in: [arbitrumgoerli_Bytes!]
  transferId_contains: arbitrumgoerli_Bytes
  transferId_not_contains: arbitrumgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: arbitrumgoerli_TransferStatus
  status_not: arbitrumgoerli_TransferStatus
  status_in: [arbitrumgoerli_TransferStatus!]
  status_not_in: [arbitrumgoerli_TransferStatus!]
  messageHash: arbitrumgoerli_Bytes
  messageHash_not: arbitrumgoerli_Bytes
  messageHash_in: [arbitrumgoerli_Bytes!]
  messageHash_not_in: [arbitrumgoerli_Bytes!]
  messageHash_contains: arbitrumgoerli_Bytes
  messageHash_not_contains: arbitrumgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: arbitrumgoerli_Bytes
  to_not: arbitrumgoerli_Bytes
  to_in: [arbitrumgoerli_Bytes!]
  to_not_in: [arbitrumgoerli_Bytes!]
  to_contains: arbitrumgoerli_Bytes
  to_not_contains: arbitrumgoerli_Bytes
  delegate: arbitrumgoerli_Bytes
  delegate_not: arbitrumgoerli_Bytes
  delegate_in: [arbitrumgoerli_Bytes!]
  delegate_not_in: [arbitrumgoerli_Bytes!]
  delegate_contains: arbitrumgoerli_Bytes
  delegate_not_contains: arbitrumgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: arbitrumgoerli_Bytes
  callData_not: arbitrumgoerli_Bytes
  callData_in: [arbitrumgoerli_Bytes!]
  callData_not_in: [arbitrumgoerli_Bytes!]
  callData_contains: arbitrumgoerli_Bytes
  callData_not_contains: arbitrumgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: arbitrumgoerli_Bytes
  originSender_not: arbitrumgoerli_Bytes
  originSender_in: [arbitrumgoerli_Bytes!]
  originSender_not_in: [arbitrumgoerli_Bytes!]
  originSender_contains: arbitrumgoerli_Bytes
  originSender_not_contains: arbitrumgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: arbitrumgoerli_Bytes
  canonicalId_not: arbitrumgoerli_Bytes
  canonicalId_in: [arbitrumgoerli_Bytes!]
  canonicalId_not_in: [arbitrumgoerli_Bytes!]
  canonicalId_contains: arbitrumgoerli_Bytes
  canonicalId_not_contains: arbitrumgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: arbitrumgoerli_Asset_filter
  transacting: arbitrumgoerli_Bytes
  transacting_not: arbitrumgoerli_Bytes
  transacting_in: [arbitrumgoerli_Bytes!]
  transacting_not_in: [arbitrumgoerli_Bytes!]
  transacting_contains: arbitrumgoerli_Bytes
  transacting_not_contains: arbitrumgoerli_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: arbitrumgoerli_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: arbitrumgoerli_Bytes
  caller_not: arbitrumgoerli_Bytes
  caller_in: [arbitrumgoerli_Bytes!]
  caller_not_in: [arbitrumgoerli_Bytes!]
  caller_contains: arbitrumgoerli_Bytes
  caller_not_contains: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  transactionHash_not: arbitrumgoerli_Bytes
  transactionHash_in: [arbitrumgoerli_Bytes!]
  transactionHash_not_in: [arbitrumgoerli_Bytes!]
  transactionHash_contains: arbitrumgoerli_Bytes
  transactionHash_not_contains: arbitrumgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: arbitrumgoerli_Bytes
  txOrigin_not: arbitrumgoerli_Bytes
  txOrigin_in: [arbitrumgoerli_Bytes!]
  txOrigin_not_in: [arbitrumgoerli_Bytes!]
  txOrigin_contains: arbitrumgoerli_Bytes
  txOrigin_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type arbitrumgoerli_PooledToken {
  id: ID!
  asset: arbitrumgoerli_Bytes!
}

input arbitrumgoerli_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: arbitrumgoerli_Bytes
  asset_not: arbitrumgoerli_Bytes
  asset_in: [arbitrumgoerli_Bytes!]
  asset_not_in: [arbitrumgoerli_Bytes!]
  asset_contains: arbitrumgoerli_Bytes
  asset_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_PooledToken_orderBy {
  id
  asset
}

type Query {
  arbitrumgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Asset
  arbitrumgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Asset_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Asset!]!
  arbitrumgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_AssetBalance
  arbitrumgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_AssetBalance_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_AssetBalance!]!
  arbitrumgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Router
  arbitrumgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Router_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Router!]!
  arbitrumgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Setting
  arbitrumgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Setting_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Setting!]!
  arbitrumgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Relayer
  arbitrumgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Relayer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Relayer!]!
  arbitrumgoerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_TransferRelayerFee
  arbitrumgoerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_TransferRelayerFee_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_TransferRelayerFee!]!
  arbitrumgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Sequencer
  arbitrumgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Sequencer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Sequencer!]!
  arbitrumgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_OriginTransfer
  arbitrumgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_OriginTransfer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_OriginTransfer!]!
  arbitrumgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_DestinationTransfer
  arbitrumgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_DestinationTransfer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_DestinationTransfer!]!
  arbitrumgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_OriginMessage
  arbitrumgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_OriginMessage_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_OriginMessage!]!
  arbitrumgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_AggregateRoot
  arbitrumgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_AggregateRoot_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_AggregateRoot!]!
  arbitrumgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_ConnectorMeta
  arbitrumgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_ConnectorMeta_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_ConnectorMeta!]!
  arbitrumgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_RootCount
  arbitrumgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_RootCount_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_RootCount!]!
  arbitrumgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_RootMessageSent
  arbitrumgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_RootMessageSent_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_RootMessageSent!]!
  arbitrumgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwap
  arbitrumgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwap_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwap!]!
  arbitrumgoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_PooledToken
  arbitrumgoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_PooledToken_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_PooledToken!]!
  arbitrumgoerli_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapLiquidity
  arbitrumgoerli_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapLiquidity_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapLiquidity!]!
  """Access to subgraph metadata"""
  arbitrumgoerli__meta(block: arbitrumgoerli_Block_height): arbitrumgoerli__Meta_
}

type arbitrumgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: arbitrumgoerli_Bytes
}

input arbitrumgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: arbitrumgoerli_Bytes
  relayer_not: arbitrumgoerli_Bytes
  relayer_in: [arbitrumgoerli_Bytes!]
  relayer_not_in: [arbitrumgoerli_Bytes!]
  relayer_contains: arbitrumgoerli_Bytes
  relayer_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type arbitrumgoerli_RootCount {
  id: ID!
  count: BigInt
}

input arbitrumgoerli_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_RootCount_orderBy {
  id
  count
}

type arbitrumgoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: arbitrumgoerli_Bytes
  count: BigInt
  caller: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input arbitrumgoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: arbitrumgoerli_Bytes
  root_not: arbitrumgoerli_Bytes
  root_in: [arbitrumgoerli_Bytes!]
  root_not_in: [arbitrumgoerli_Bytes!]
  root_contains: arbitrumgoerli_Bytes
  root_not_contains: arbitrumgoerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: arbitrumgoerli_Bytes
  caller_not: arbitrumgoerli_Bytes
  caller_in: [arbitrumgoerli_Bytes!]
  caller_not_in: [arbitrumgoerli_Bytes!]
  caller_contains: arbitrumgoerli_Bytes
  caller_not_contains: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  transactionHash_not: arbitrumgoerli_Bytes
  transactionHash_in: [arbitrumgoerli_Bytes!]
  transactionHash_not_in: [arbitrumgoerli_Bytes!]
  transactionHash_contains: arbitrumgoerli_Bytes
  transactionHash_not_contains: arbitrumgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type arbitrumgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: arbitrumgoerli_Bytes
  recipient: arbitrumgoerli_Bytes
  proposedOwner: arbitrumgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_AssetBalance_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_AssetBalance_filter): [arbitrumgoerli_AssetBalance!]!
}

input arbitrumgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: arbitrumgoerli_Bytes
  owner_not: arbitrumgoerli_Bytes
  owner_in: [arbitrumgoerli_Bytes!]
  owner_not_in: [arbitrumgoerli_Bytes!]
  owner_contains: arbitrumgoerli_Bytes
  owner_not_contains: arbitrumgoerli_Bytes
  recipient: arbitrumgoerli_Bytes
  recipient_not: arbitrumgoerli_Bytes
  recipient_in: [arbitrumgoerli_Bytes!]
  recipient_not_in: [arbitrumgoerli_Bytes!]
  recipient_contains: arbitrumgoerli_Bytes
  recipient_not_contains: arbitrumgoerli_Bytes
  proposedOwner: arbitrumgoerli_Bytes
  proposedOwner_not: arbitrumgoerli_Bytes
  proposedOwner_in: [arbitrumgoerli_Bytes!]
  proposedOwner_not_in: [arbitrumgoerli_Bytes!]
  proposedOwner_contains: arbitrumgoerli_Bytes
  proposedOwner_not_contains: arbitrumgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: arbitrumgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type arbitrumgoerli_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: arbitrumgoerli_Bytes
}

input arbitrumgoerli_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: arbitrumgoerli_Bytes
  sequencer_not: arbitrumgoerli_Bytes
  sequencer_in: [arbitrumgoerli_Bytes!]
  sequencer_not_in: [arbitrumgoerli_Bytes!]
  sequencer_contains: arbitrumgoerli_Bytes
  sequencer_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type arbitrumgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: arbitrumgoerli_Bytes!
}

input arbitrumgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: arbitrumgoerli_Bytes
  caller_not: arbitrumgoerli_Bytes
  caller_in: [arbitrumgoerli_Bytes!]
  caller_not_in: [arbitrumgoerli_Bytes!]
  caller_contains: arbitrumgoerli_Bytes
  caller_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type arbitrumgoerli_StableSwap {
  id: ID!
  isActive: Boolean
  key: arbitrumgoerli_Bytes
  canonicalId: arbitrumgoerli_Bytes
  domain: BigInt
  swapPool: arbitrumgoerli_Bytes
  lpToken: arbitrumgoerli_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_PooledToken_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_PooledToken_filter): [arbitrumgoerli_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
}

type arbitrumgoerli_StableSwapLiquidity {
  id: ID!
  provider: arbitrumgoerli_Bytes!
  stableSwap: arbitrumgoerli_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input arbitrumgoerli_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: arbitrumgoerli_Bytes
  provider_not: arbitrumgoerli_Bytes
  provider_in: [arbitrumgoerli_Bytes!]
  provider_not_in: [arbitrumgoerli_Bytes!]
  provider_contains: arbitrumgoerli_Bytes
  provider_not_contains: arbitrumgoerli_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumgoerli_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

input arbitrumgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: arbitrumgoerli_Bytes
  key_not: arbitrumgoerli_Bytes
  key_in: [arbitrumgoerli_Bytes!]
  key_not_in: [arbitrumgoerli_Bytes!]
  key_contains: arbitrumgoerli_Bytes
  key_not_contains: arbitrumgoerli_Bytes
  canonicalId: arbitrumgoerli_Bytes
  canonicalId_not: arbitrumgoerli_Bytes
  canonicalId_in: [arbitrumgoerli_Bytes!]
  canonicalId_not_in: [arbitrumgoerli_Bytes!]
  canonicalId_contains: arbitrumgoerli_Bytes
  canonicalId_not_contains: arbitrumgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: arbitrumgoerli_Bytes
  swapPool_not: arbitrumgoerli_Bytes
  swapPool_in: [arbitrumgoerli_Bytes!]
  swapPool_not_in: [arbitrumgoerli_Bytes!]
  swapPool_contains: arbitrumgoerli_Bytes
  swapPool_not_contains: arbitrumgoerli_Bytes
  lpToken: arbitrumgoerli_Bytes
  lpToken_not: arbitrumgoerli_Bytes
  lpToken_in: [arbitrumgoerli_Bytes!]
  lpToken_not_in: [arbitrumgoerli_Bytes!]
  lpToken_contains: arbitrumgoerli_Bytes
  lpToken_not_contains: arbitrumgoerli_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: arbitrumgoerli_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
}

type Subscription {
  arbitrumgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Asset
  arbitrumgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Asset_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Asset!]!
  arbitrumgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_AssetBalance
  arbitrumgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_AssetBalance_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_AssetBalance!]!
  arbitrumgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Router
  arbitrumgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Router_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Router!]!
  arbitrumgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Setting
  arbitrumgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Setting_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Setting!]!
  arbitrumgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Relayer
  arbitrumgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Relayer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Relayer!]!
  arbitrumgoerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_TransferRelayerFee
  arbitrumgoerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_TransferRelayerFee_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_TransferRelayerFee!]!
  arbitrumgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Sequencer
  arbitrumgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Sequencer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Sequencer!]!
  arbitrumgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_OriginTransfer
  arbitrumgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_OriginTransfer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_OriginTransfer!]!
  arbitrumgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_DestinationTransfer
  arbitrumgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_DestinationTransfer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_DestinationTransfer!]!
  arbitrumgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_OriginMessage
  arbitrumgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_OriginMessage_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_OriginMessage!]!
  arbitrumgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_AggregateRoot
  arbitrumgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_AggregateRoot_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_AggregateRoot!]!
  arbitrumgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_ConnectorMeta
  arbitrumgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_ConnectorMeta_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_ConnectorMeta!]!
  arbitrumgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_RootCount
  arbitrumgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_RootCount_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_RootCount!]!
  arbitrumgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_RootMessageSent
  arbitrumgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_RootMessageSent_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_RootMessageSent!]!
  arbitrumgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwap
  arbitrumgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwap_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwap!]!
  arbitrumgoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_PooledToken
  arbitrumgoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_PooledToken_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_PooledToken!]!
  arbitrumgoerli_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapLiquidity
  arbitrumgoerli_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapLiquidity_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapLiquidity!]!
  """Access to subgraph metadata"""
  arbitrumgoerli__meta(block: arbitrumgoerli_Block_height): arbitrumgoerli__Meta_
}

type arbitrumgoerli_TransferRelayerFee {
  id: ID!
  transferId: arbitrumgoerli_Bytes!
  fee: BigInt
}

input arbitrumgoerli_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: arbitrumgoerli_Bytes
  transferId_not: arbitrumgoerli_Bytes
  transferId_in: [arbitrumgoerli_Bytes!]
  transferId_not_in: [arbitrumgoerli_Bytes!]
  transferId_contains: arbitrumgoerli_Bytes
  transferId_not_contains: arbitrumgoerli_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum arbitrumgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type arbitrumgoerli__Block_ {
  """The hash of the block"""
  hash: arbitrumgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type arbitrumgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: arbitrumgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}