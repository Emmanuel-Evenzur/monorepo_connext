schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type devnetxdai_AggregateRoot {
  id: ID!
  root: devnetxdai_Bytes!
  blockNumber: BigInt!
}

input devnetxdai_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: devnetxdai_Bytes
  root_not: devnetxdai_Bytes
  root_in: [devnetxdai_Bytes!]
  root_not_in: [devnetxdai_Bytes!]
  root_contains: devnetxdai_Bytes
  root_not_contains: devnetxdai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type devnetxdai_Asset {
  id: ID!
  key: devnetxdai_Bytes
  decimal: BigInt
  canonicalId: devnetxdai_Bytes
  canonicalDomain: BigInt
  adoptedAsset: devnetxdai_Bytes
  localAsset: devnetxdai_Bytes
  blockNumber: BigInt
  status: devnetxdai_AssetStatus
}

type devnetxdai_AssetBalance {
  id: ID!
  amount: BigInt!
  locked: BigInt!
  supplied: BigInt!
  removed: BigInt!
  router: devnetxdai_Router!
  asset: devnetxdai_Asset!
  feesEarned: BigInt!
}

input devnetxdai_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  locked: BigInt
  locked_not: BigInt
  locked_gt: BigInt
  locked_lt: BigInt
  locked_gte: BigInt
  locked_lte: BigInt
  locked_in: [BigInt!]
  locked_not_in: [BigInt!]
  supplied: BigInt
  supplied_not: BigInt
  supplied_gt: BigInt
  supplied_lt: BigInt
  supplied_gte: BigInt
  supplied_lte: BigInt
  supplied_in: [BigInt!]
  supplied_not_in: [BigInt!]
  removed: BigInt
  removed_not: BigInt
  removed_gt: BigInt
  removed_lt: BigInt
  removed_gte: BigInt
  removed_lte: BigInt
  removed_in: [BigInt!]
  removed_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: devnetxdai_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: devnetxdai_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_AssetBalance_orderBy {
  id
  amount
  locked
  supplied
  removed
  router
  asset
  feesEarned
}

type devnetxdai_AssetStatus {
  id: ID!
  status: Boolean
}

input devnetxdai_AssetStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_AssetStatus_orderBy {
  id
  status
}

input devnetxdai_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: devnetxdai_Bytes
  key_not: devnetxdai_Bytes
  key_in: [devnetxdai_Bytes!]
  key_not_in: [devnetxdai_Bytes!]
  key_contains: devnetxdai_Bytes
  key_not_contains: devnetxdai_Bytes
  decimal: BigInt
  decimal_not: BigInt
  decimal_gt: BigInt
  decimal_lt: BigInt
  decimal_gte: BigInt
  decimal_lte: BigInt
  decimal_in: [BigInt!]
  decimal_not_in: [BigInt!]
  canonicalId: devnetxdai_Bytes
  canonicalId_not: devnetxdai_Bytes
  canonicalId_in: [devnetxdai_Bytes!]
  canonicalId_not_in: [devnetxdai_Bytes!]
  canonicalId_contains: devnetxdai_Bytes
  canonicalId_not_contains: devnetxdai_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: devnetxdai_Bytes
  adoptedAsset_not: devnetxdai_Bytes
  adoptedAsset_in: [devnetxdai_Bytes!]
  adoptedAsset_not_in: [devnetxdai_Bytes!]
  adoptedAsset_contains: devnetxdai_Bytes
  adoptedAsset_not_contains: devnetxdai_Bytes
  localAsset: devnetxdai_Bytes
  localAsset_not: devnetxdai_Bytes
  localAsset_in: [devnetxdai_Bytes!]
  localAsset_not_in: [devnetxdai_Bytes!]
  localAsset_contains: devnetxdai_Bytes
  localAsset_not_contains: devnetxdai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_: devnetxdai_AssetStatus_filter
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_Asset_orderBy {
  id
  key
  decimal
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
  status
}

scalar devnetxdai_BigDecimal

scalar BigInt

input devnetxdai_BlockChangedFilter {
  number_gte: Int!
}

input devnetxdai_Block_height {
  hash: devnetxdai_Bytes
  number: Int
  number_gte: Int
}

scalar devnetxdai_Bytes

type devnetxdai_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: devnetxdai_Bytes
  rootManager: devnetxdai_Bytes
  mirrorConnector: devnetxdai_Bytes
}

input devnetxdai_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: devnetxdai_Bytes
  amb_not: devnetxdai_Bytes
  amb_in: [devnetxdai_Bytes!]
  amb_not_in: [devnetxdai_Bytes!]
  amb_contains: devnetxdai_Bytes
  amb_not_contains: devnetxdai_Bytes
  rootManager: devnetxdai_Bytes
  rootManager_not: devnetxdai_Bytes
  rootManager_in: [devnetxdai_Bytes!]
  rootManager_not_in: [devnetxdai_Bytes!]
  rootManager_contains: devnetxdai_Bytes
  rootManager_not_contains: devnetxdai_Bytes
  mirrorConnector: devnetxdai_Bytes
  mirrorConnector_not: devnetxdai_Bytes
  mirrorConnector_in: [devnetxdai_Bytes!]
  mirrorConnector_not_in: [devnetxdai_Bytes!]
  mirrorConnector_contains: devnetxdai_Bytes
  mirrorConnector_not_contains: devnetxdai_Bytes
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type devnetxdai_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: devnetxdai_Bytes
  nonce: BigInt
  status: devnetxdai_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: devnetxdai_Router_orderBy, orderDirection: devnetxdai_OrderDirection, where: devnetxdai_Router_filter): [devnetxdai_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: devnetxdai_Bytes
  delegate: devnetxdai_Bytes
  receiveLocal: Boolean
  callData: devnetxdai_Bytes
  slippage: BigInt
  bumpSlippageCount: BigInt
  originSender: devnetxdai_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: devnetxdai_Bytes
  asset: devnetxdai_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: devnetxdai_Bytes
  executedTransactionHash: devnetxdai_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: devnetxdai_Bytes
  executedTxNonce: BigInt
  reconciledCaller: devnetxdai_Bytes
  reconciledTransactionHash: devnetxdai_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: devnetxdai_Bytes
  reconciledTxNonce: BigInt
}

input devnetxdai_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: devnetxdai_Bytes
  transferId_not: devnetxdai_Bytes
  transferId_in: [devnetxdai_Bytes!]
  transferId_not_in: [devnetxdai_Bytes!]
  transferId_contains: devnetxdai_Bytes
  transferId_not_contains: devnetxdai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: devnetxdai_TransferStatus
  status_not: devnetxdai_TransferStatus
  status_in: [devnetxdai_TransferStatus!]
  status_not_in: [devnetxdai_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: devnetxdai_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: devnetxdai_Bytes
  to_not: devnetxdai_Bytes
  to_in: [devnetxdai_Bytes!]
  to_not_in: [devnetxdai_Bytes!]
  to_contains: devnetxdai_Bytes
  to_not_contains: devnetxdai_Bytes
  delegate: devnetxdai_Bytes
  delegate_not: devnetxdai_Bytes
  delegate_in: [devnetxdai_Bytes!]
  delegate_not_in: [devnetxdai_Bytes!]
  delegate_contains: devnetxdai_Bytes
  delegate_not_contains: devnetxdai_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: devnetxdai_Bytes
  callData_not: devnetxdai_Bytes
  callData_in: [devnetxdai_Bytes!]
  callData_not_in: [devnetxdai_Bytes!]
  callData_contains: devnetxdai_Bytes
  callData_not_contains: devnetxdai_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  bumpSlippageCount: BigInt
  bumpSlippageCount_not: BigInt
  bumpSlippageCount_gt: BigInt
  bumpSlippageCount_lt: BigInt
  bumpSlippageCount_gte: BigInt
  bumpSlippageCount_lte: BigInt
  bumpSlippageCount_in: [BigInt!]
  bumpSlippageCount_not_in: [BigInt!]
  originSender: devnetxdai_Bytes
  originSender_not: devnetxdai_Bytes
  originSender_in: [devnetxdai_Bytes!]
  originSender_not_in: [devnetxdai_Bytes!]
  originSender_contains: devnetxdai_Bytes
  originSender_not_contains: devnetxdai_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: devnetxdai_Bytes
  canonicalId_not: devnetxdai_Bytes
  canonicalId_in: [devnetxdai_Bytes!]
  canonicalId_not_in: [devnetxdai_Bytes!]
  canonicalId_contains: devnetxdai_Bytes
  canonicalId_not_contains: devnetxdai_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: devnetxdai_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: devnetxdai_Bytes
  executedCaller_not: devnetxdai_Bytes
  executedCaller_in: [devnetxdai_Bytes!]
  executedCaller_not_in: [devnetxdai_Bytes!]
  executedCaller_contains: devnetxdai_Bytes
  executedCaller_not_contains: devnetxdai_Bytes
  executedTransactionHash: devnetxdai_Bytes
  executedTransactionHash_not: devnetxdai_Bytes
  executedTransactionHash_in: [devnetxdai_Bytes!]
  executedTransactionHash_not_in: [devnetxdai_Bytes!]
  executedTransactionHash_contains: devnetxdai_Bytes
  executedTransactionHash_not_contains: devnetxdai_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: devnetxdai_Bytes
  executedTxOrigin_not: devnetxdai_Bytes
  executedTxOrigin_in: [devnetxdai_Bytes!]
  executedTxOrigin_not_in: [devnetxdai_Bytes!]
  executedTxOrigin_contains: devnetxdai_Bytes
  executedTxOrigin_not_contains: devnetxdai_Bytes
  executedTxNonce: BigInt
  executedTxNonce_not: BigInt
  executedTxNonce_gt: BigInt
  executedTxNonce_lt: BigInt
  executedTxNonce_gte: BigInt
  executedTxNonce_lte: BigInt
  executedTxNonce_in: [BigInt!]
  executedTxNonce_not_in: [BigInt!]
  reconciledCaller: devnetxdai_Bytes
  reconciledCaller_not: devnetxdai_Bytes
  reconciledCaller_in: [devnetxdai_Bytes!]
  reconciledCaller_not_in: [devnetxdai_Bytes!]
  reconciledCaller_contains: devnetxdai_Bytes
  reconciledCaller_not_contains: devnetxdai_Bytes
  reconciledTransactionHash: devnetxdai_Bytes
  reconciledTransactionHash_not: devnetxdai_Bytes
  reconciledTransactionHash_in: [devnetxdai_Bytes!]
  reconciledTransactionHash_not_in: [devnetxdai_Bytes!]
  reconciledTransactionHash_contains: devnetxdai_Bytes
  reconciledTransactionHash_not_contains: devnetxdai_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: devnetxdai_Bytes
  reconciledTxOrigin_not: devnetxdai_Bytes
  reconciledTxOrigin_in: [devnetxdai_Bytes!]
  reconciledTxOrigin_not_in: [devnetxdai_Bytes!]
  reconciledTxOrigin_contains: devnetxdai_Bytes
  reconciledTxOrigin_not_contains: devnetxdai_Bytes
  reconciledTxNonce: BigInt
  reconciledTxNonce_not: BigInt
  reconciledTxNonce_gt: BigInt
  reconciledTxNonce_lt: BigInt
  reconciledTxNonce_gte: BigInt
  reconciledTxNonce_lte: BigInt
  reconciledTxNonce_in: [BigInt!]
  reconciledTxNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  bumpSlippageCount
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  executedTxNonce
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
  reconciledTxNonce
}

"""Defines the order direction, either ascending or descending"""
enum devnetxdai_OrderDirection {
  asc
  desc
}

type devnetxdai_OriginMessage {
  id: ID!
  transferId: devnetxdai_Bytes
  destinationDomain: BigInt
  leaf: devnetxdai_Bytes
  index: BigInt
  message: devnetxdai_Bytes
  root: devnetxdai_Bytes
  transactionHash: devnetxdai_Bytes
  blockNumber: BigInt
  rootCount: devnetxdai_RootCount
}

input devnetxdai_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: devnetxdai_Bytes
  transferId_not: devnetxdai_Bytes
  transferId_in: [devnetxdai_Bytes!]
  transferId_not_in: [devnetxdai_Bytes!]
  transferId_contains: devnetxdai_Bytes
  transferId_not_contains: devnetxdai_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: devnetxdai_Bytes
  leaf_not: devnetxdai_Bytes
  leaf_in: [devnetxdai_Bytes!]
  leaf_not_in: [devnetxdai_Bytes!]
  leaf_contains: devnetxdai_Bytes
  leaf_not_contains: devnetxdai_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: devnetxdai_Bytes
  message_not: devnetxdai_Bytes
  message_in: [devnetxdai_Bytes!]
  message_not_in: [devnetxdai_Bytes!]
  message_contains: devnetxdai_Bytes
  message_not_contains: devnetxdai_Bytes
  root: devnetxdai_Bytes
  root_not: devnetxdai_Bytes
  root_in: [devnetxdai_Bytes!]
  root_not_in: [devnetxdai_Bytes!]
  root_contains: devnetxdai_Bytes
  root_not_contains: devnetxdai_Bytes
  transactionHash: devnetxdai_Bytes
  transactionHash_not: devnetxdai_Bytes
  transactionHash_in: [devnetxdai_Bytes!]
  transactionHash_not_in: [devnetxdai_Bytes!]
  transactionHash_contains: devnetxdai_Bytes
  transactionHash_not_contains: devnetxdai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: devnetxdai_RootCount_filter
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type devnetxdai_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: devnetxdai_Bytes
  nonce: BigInt
  status: devnetxdai_TransferStatus
  messageHash: devnetxdai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: devnetxdai_Bytes
  delegate: devnetxdai_Bytes
  receiveLocal: Boolean
  callData: devnetxdai_Bytes
  slippage: BigInt
  originSender: devnetxdai_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: devnetxdai_Bytes
  asset: devnetxdai_Asset
  transactingAsset: devnetxdai_Bytes
  message: devnetxdai_OriginMessage
  bumpRelayerFeeCount: BigInt
  relayerFees(skip: Int = 0, first: Int = 100, orderBy: devnetxdai_RelayerFee_orderBy, orderDirection: devnetxdai_OrderDirection, where: devnetxdai_RelayerFee_filter): [devnetxdai_RelayerFee!]
  initialRelayerFeeAsset: devnetxdai_Bytes
  caller: devnetxdai_Bytes
  transactionHash: devnetxdai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: devnetxdai_Bytes
  txNonce: BigInt
}

input devnetxdai_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: devnetxdai_Bytes
  transferId_not: devnetxdai_Bytes
  transferId_in: [devnetxdai_Bytes!]
  transferId_not_in: [devnetxdai_Bytes!]
  transferId_contains: devnetxdai_Bytes
  transferId_not_contains: devnetxdai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: devnetxdai_TransferStatus
  status_not: devnetxdai_TransferStatus
  status_in: [devnetxdai_TransferStatus!]
  status_not_in: [devnetxdai_TransferStatus!]
  messageHash: devnetxdai_Bytes
  messageHash_not: devnetxdai_Bytes
  messageHash_in: [devnetxdai_Bytes!]
  messageHash_not_in: [devnetxdai_Bytes!]
  messageHash_contains: devnetxdai_Bytes
  messageHash_not_contains: devnetxdai_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: devnetxdai_Bytes
  to_not: devnetxdai_Bytes
  to_in: [devnetxdai_Bytes!]
  to_not_in: [devnetxdai_Bytes!]
  to_contains: devnetxdai_Bytes
  to_not_contains: devnetxdai_Bytes
  delegate: devnetxdai_Bytes
  delegate_not: devnetxdai_Bytes
  delegate_in: [devnetxdai_Bytes!]
  delegate_not_in: [devnetxdai_Bytes!]
  delegate_contains: devnetxdai_Bytes
  delegate_not_contains: devnetxdai_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: devnetxdai_Bytes
  callData_not: devnetxdai_Bytes
  callData_in: [devnetxdai_Bytes!]
  callData_not_in: [devnetxdai_Bytes!]
  callData_contains: devnetxdai_Bytes
  callData_not_contains: devnetxdai_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: devnetxdai_Bytes
  originSender_not: devnetxdai_Bytes
  originSender_in: [devnetxdai_Bytes!]
  originSender_not_in: [devnetxdai_Bytes!]
  originSender_contains: devnetxdai_Bytes
  originSender_not_contains: devnetxdai_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: devnetxdai_Bytes
  canonicalId_not: devnetxdai_Bytes
  canonicalId_in: [devnetxdai_Bytes!]
  canonicalId_not_in: [devnetxdai_Bytes!]
  canonicalId_contains: devnetxdai_Bytes
  canonicalId_not_contains: devnetxdai_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: devnetxdai_Asset_filter
  transactingAsset: devnetxdai_Bytes
  transactingAsset_not: devnetxdai_Bytes
  transactingAsset_in: [devnetxdai_Bytes!]
  transactingAsset_not_in: [devnetxdai_Bytes!]
  transactingAsset_contains: devnetxdai_Bytes
  transactingAsset_not_contains: devnetxdai_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: devnetxdai_OriginMessage_filter
  bumpRelayerFeeCount: BigInt
  bumpRelayerFeeCount_not: BigInt
  bumpRelayerFeeCount_gt: BigInt
  bumpRelayerFeeCount_lt: BigInt
  bumpRelayerFeeCount_gte: BigInt
  bumpRelayerFeeCount_lte: BigInt
  bumpRelayerFeeCount_in: [BigInt!]
  bumpRelayerFeeCount_not_in: [BigInt!]
  relayerFees: [String!]
  relayerFees_not: [String!]
  relayerFees_contains: [String!]
  relayerFees_contains_nocase: [String!]
  relayerFees_not_contains: [String!]
  relayerFees_not_contains_nocase: [String!]
  relayerFees_: devnetxdai_RelayerFee_filter
  initialRelayerFeeAsset: devnetxdai_Bytes
  initialRelayerFeeAsset_not: devnetxdai_Bytes
  initialRelayerFeeAsset_in: [devnetxdai_Bytes!]
  initialRelayerFeeAsset_not_in: [devnetxdai_Bytes!]
  initialRelayerFeeAsset_contains: devnetxdai_Bytes
  initialRelayerFeeAsset_not_contains: devnetxdai_Bytes
  caller: devnetxdai_Bytes
  caller_not: devnetxdai_Bytes
  caller_in: [devnetxdai_Bytes!]
  caller_not_in: [devnetxdai_Bytes!]
  caller_contains: devnetxdai_Bytes
  caller_not_contains: devnetxdai_Bytes
  transactionHash: devnetxdai_Bytes
  transactionHash_not: devnetxdai_Bytes
  transactionHash_in: [devnetxdai_Bytes!]
  transactionHash_not_in: [devnetxdai_Bytes!]
  transactionHash_contains: devnetxdai_Bytes
  transactionHash_not_contains: devnetxdai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: devnetxdai_Bytes
  txOrigin_not: devnetxdai_Bytes
  txOrigin_in: [devnetxdai_Bytes!]
  txOrigin_not_in: [devnetxdai_Bytes!]
  txOrigin_contains: devnetxdai_Bytes
  txOrigin_not_contains: devnetxdai_Bytes
  txNonce: BigInt
  txNonce_not: BigInt
  txNonce_gt: BigInt
  txNonce_lt: BigInt
  txNonce_gte: BigInt
  txNonce_lte: BigInt
  txNonce_in: [BigInt!]
  txNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transactingAsset
  message
  bumpRelayerFeeCount
  relayerFees
  initialRelayerFeeAsset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
  txNonce
}

type Query {
  devnetxdai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_Asset
  devnetxdai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_Asset_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_Asset!]!
  devnetxdai_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_AssetStatus
  devnetxdai_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_AssetStatus_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_AssetStatus!]!
  devnetxdai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_AssetBalance
  devnetxdai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_AssetBalance_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_AssetBalance!]!
  devnetxdai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_Router
  devnetxdai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_Router_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_Router!]!
  devnetxdai_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_RouterDailyTVL
  devnetxdai_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_RouterDailyTVL_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_RouterDailyTVL!]!
  devnetxdai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_Setting
  devnetxdai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_Setting_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_Setting!]!
  devnetxdai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_Relayer
  devnetxdai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_Relayer_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_Relayer!]!
  devnetxdai_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_Sequencer
  devnetxdai_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_Sequencer_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_Sequencer!]!
  devnetxdai_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_RelayerFee
  devnetxdai_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_RelayerFee_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_RelayerFee!]!
  devnetxdai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_OriginTransfer
  devnetxdai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_OriginTransfer_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_OriginTransfer!]!
  devnetxdai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_DestinationTransfer
  devnetxdai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_DestinationTransfer_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_DestinationTransfer!]!
  devnetxdai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_OriginMessage
  devnetxdai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_OriginMessage_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_OriginMessage!]!
  devnetxdai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_AggregateRoot
  devnetxdai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_AggregateRoot_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_AggregateRoot!]!
  devnetxdai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_ConnectorMeta
  devnetxdai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_ConnectorMeta_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_ConnectorMeta!]!
  devnetxdai_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_RootCount
  devnetxdai_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_RootCount_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_RootCount!]!
  devnetxdai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_RootMessageSent
  devnetxdai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_RootMessageSent_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_RootMessageSent!]!
  devnetxdai_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_RelayerFeesIncrease
  devnetxdai_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_RelayerFeesIncrease_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_RelayerFeesIncrease!]!
  devnetxdai_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_SlippageUpdate
  devnetxdai_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_SlippageUpdate_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_SlippageUpdate!]!
  """Access to subgraph metadata"""
  devnetxdai__meta(block: devnetxdai_Block_height): devnetxdai__Meta_
}

type devnetxdai_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: devnetxdai_Bytes
}

type devnetxdai_RelayerFee {
  id: ID!
  transfer: devnetxdai_OriginTransfer!
  fee: BigInt!
  asset: devnetxdai_Bytes!
}

input devnetxdai_RelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: devnetxdai_OriginTransfer_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  asset: devnetxdai_Bytes
  asset_not: devnetxdai_Bytes
  asset_in: [devnetxdai_Bytes!]
  asset_not_in: [devnetxdai_Bytes!]
  asset_contains: devnetxdai_Bytes
  asset_not_contains: devnetxdai_Bytes
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_RelayerFee_orderBy {
  id
  transfer
  fee
  asset
}

type devnetxdai_RelayerFeesIncrease {
  id: ID!
  transfer: devnetxdai_OriginTransfer!
  increase: BigInt
  asset: devnetxdai_Bytes
  caller: devnetxdai_Bytes!
  transactionHash: devnetxdai_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input devnetxdai_RelayerFeesIncrease_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: devnetxdai_OriginTransfer_filter
  increase: BigInt
  increase_not: BigInt
  increase_gt: BigInt
  increase_lt: BigInt
  increase_gte: BigInt
  increase_lte: BigInt
  increase_in: [BigInt!]
  increase_not_in: [BigInt!]
  asset: devnetxdai_Bytes
  asset_not: devnetxdai_Bytes
  asset_in: [devnetxdai_Bytes!]
  asset_not_in: [devnetxdai_Bytes!]
  asset_contains: devnetxdai_Bytes
  asset_not_contains: devnetxdai_Bytes
  caller: devnetxdai_Bytes
  caller_not: devnetxdai_Bytes
  caller_in: [devnetxdai_Bytes!]
  caller_not_in: [devnetxdai_Bytes!]
  caller_contains: devnetxdai_Bytes
  caller_not_contains: devnetxdai_Bytes
  transactionHash: devnetxdai_Bytes
  transactionHash_not: devnetxdai_Bytes
  transactionHash_in: [devnetxdai_Bytes!]
  transactionHash_not_in: [devnetxdai_Bytes!]
  transactionHash_contains: devnetxdai_Bytes
  transactionHash_not_contains: devnetxdai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_RelayerFeesIncrease_orderBy {
  id
  transfer
  increase
  asset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

input devnetxdai_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: devnetxdai_Bytes
  relayer_not: devnetxdai_Bytes
  relayer_in: [devnetxdai_Bytes!]
  relayer_not_in: [devnetxdai_Bytes!]
  relayer_contains: devnetxdai_Bytes
  relayer_not_contains: devnetxdai_Bytes
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_Relayer_orderBy {
  id
  isActive
  relayer
}

type devnetxdai_RootCount {
  id: ID!
  count: BigInt
}

input devnetxdai_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_RootCount_orderBy {
  id
  count
}

type devnetxdai_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: devnetxdai_Bytes
  count: BigInt
  caller: devnetxdai_Bytes
  transactionHash: devnetxdai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input devnetxdai_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: devnetxdai_Bytes
  root_not: devnetxdai_Bytes
  root_in: [devnetxdai_Bytes!]
  root_not_in: [devnetxdai_Bytes!]
  root_contains: devnetxdai_Bytes
  root_not_contains: devnetxdai_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: devnetxdai_Bytes
  caller_not: devnetxdai_Bytes
  caller_in: [devnetxdai_Bytes!]
  caller_not_in: [devnetxdai_Bytes!]
  caller_contains: devnetxdai_Bytes
  caller_not_contains: devnetxdai_Bytes
  transactionHash: devnetxdai_Bytes
  transactionHash_not: devnetxdai_Bytes
  transactionHash_in: [devnetxdai_Bytes!]
  transactionHash_not_in: [devnetxdai_Bytes!]
  transactionHash_contains: devnetxdai_Bytes
  transactionHash_not_contains: devnetxdai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type devnetxdai_Router {
  id: ID!
  isActive: Boolean!
  owner: devnetxdai_Bytes
  recipient: devnetxdai_Bytes
  proposedOwner: devnetxdai_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: devnetxdai_AssetBalance_orderBy, orderDirection: devnetxdai_OrderDirection, where: devnetxdai_AssetBalance_filter): [devnetxdai_AssetBalance!]!
}

type devnetxdai_RouterDailyTVL {
  id: ID!
  router: devnetxdai_Router!
  asset: devnetxdai_Asset!
  timestamp: BigInt!
  balance: BigInt!
}

input devnetxdai_RouterDailyTVL_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: devnetxdai_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: devnetxdai_Asset_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_RouterDailyTVL_orderBy {
  id
  router
  asset
  timestamp
  balance
}

input devnetxdai_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: devnetxdai_Bytes
  owner_not: devnetxdai_Bytes
  owner_in: [devnetxdai_Bytes!]
  owner_not_in: [devnetxdai_Bytes!]
  owner_contains: devnetxdai_Bytes
  owner_not_contains: devnetxdai_Bytes
  recipient: devnetxdai_Bytes
  recipient_not: devnetxdai_Bytes
  recipient_in: [devnetxdai_Bytes!]
  recipient_not_in: [devnetxdai_Bytes!]
  recipient_contains: devnetxdai_Bytes
  recipient_not_contains: devnetxdai_Bytes
  proposedOwner: devnetxdai_Bytes
  proposedOwner_not: devnetxdai_Bytes
  proposedOwner_in: [devnetxdai_Bytes!]
  proposedOwner_not_in: [devnetxdai_Bytes!]
  proposedOwner_contains: devnetxdai_Bytes
  proposedOwner_not_contains: devnetxdai_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: devnetxdai_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type devnetxdai_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: devnetxdai_Bytes
}

input devnetxdai_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: devnetxdai_Bytes
  sequencer_not: devnetxdai_Bytes
  sequencer_in: [devnetxdai_Bytes!]
  sequencer_not_in: [devnetxdai_Bytes!]
  sequencer_contains: devnetxdai_Bytes
  sequencer_not_contains: devnetxdai_Bytes
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type devnetxdai_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: devnetxdai_Bytes!
}

input devnetxdai_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: devnetxdai_Bytes
  caller_not: devnetxdai_Bytes
  caller_in: [devnetxdai_Bytes!]
  caller_not_in: [devnetxdai_Bytes!]
  caller_contains: devnetxdai_Bytes
  caller_not_contains: devnetxdai_Bytes
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type devnetxdai_SlippageUpdate {
  id: ID!
  transfer: devnetxdai_DestinationTransfer!
  slippage: BigInt!
  caller: devnetxdai_Bytes!
  transactionHash: devnetxdai_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input devnetxdai_SlippageUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: devnetxdai_DestinationTransfer_filter
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  caller: devnetxdai_Bytes
  caller_not: devnetxdai_Bytes
  caller_in: [devnetxdai_Bytes!]
  caller_not_in: [devnetxdai_Bytes!]
  caller_contains: devnetxdai_Bytes
  caller_not_contains: devnetxdai_Bytes
  transactionHash: devnetxdai_Bytes
  transactionHash_not: devnetxdai_Bytes
  transactionHash_in: [devnetxdai_Bytes!]
  transactionHash_not_in: [devnetxdai_Bytes!]
  transactionHash_contains: devnetxdai_Bytes
  transactionHash_not_contains: devnetxdai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: devnetxdai_BlockChangedFilter
}

enum devnetxdai_SlippageUpdate_orderBy {
  id
  transfer
  slippage
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type Subscription {
  devnetxdai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_Asset
  devnetxdai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_Asset_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_Asset!]!
  devnetxdai_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_AssetStatus
  devnetxdai_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_AssetStatus_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_AssetStatus!]!
  devnetxdai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_AssetBalance
  devnetxdai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_AssetBalance_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_AssetBalance!]!
  devnetxdai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_Router
  devnetxdai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_Router_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_Router!]!
  devnetxdai_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_RouterDailyTVL
  devnetxdai_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_RouterDailyTVL_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_RouterDailyTVL!]!
  devnetxdai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_Setting
  devnetxdai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_Setting_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_Setting!]!
  devnetxdai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_Relayer
  devnetxdai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_Relayer_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_Relayer!]!
  devnetxdai_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_Sequencer
  devnetxdai_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_Sequencer_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_Sequencer!]!
  devnetxdai_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_RelayerFee
  devnetxdai_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_RelayerFee_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_RelayerFee!]!
  devnetxdai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_OriginTransfer
  devnetxdai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_OriginTransfer_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_OriginTransfer!]!
  devnetxdai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_DestinationTransfer
  devnetxdai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_DestinationTransfer_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_DestinationTransfer!]!
  devnetxdai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_OriginMessage
  devnetxdai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_OriginMessage_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_OriginMessage!]!
  devnetxdai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_AggregateRoot
  devnetxdai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_AggregateRoot_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_AggregateRoot!]!
  devnetxdai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_ConnectorMeta
  devnetxdai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_ConnectorMeta_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_ConnectorMeta!]!
  devnetxdai_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_RootCount
  devnetxdai_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_RootCount_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_RootCount!]!
  devnetxdai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_RootMessageSent
  devnetxdai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_RootMessageSent_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_RootMessageSent!]!
  devnetxdai_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_RelayerFeesIncrease
  devnetxdai_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_RelayerFeesIncrease_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_RelayerFeesIncrease!]!
  devnetxdai_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): devnetxdai_SlippageUpdate
  devnetxdai_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: devnetxdai_SlippageUpdate_orderBy
    orderDirection: devnetxdai_OrderDirection
    where: devnetxdai_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: devnetxdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [devnetxdai_SlippageUpdate!]!
  """Access to subgraph metadata"""
  devnetxdai__meta(block: devnetxdai_Block_height): devnetxdai__Meta_
}

enum devnetxdai_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type devnetxdai__Block_ {
  """The hash of the block"""
  hash: devnetxdai_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type devnetxdai__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: devnetxdai__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}