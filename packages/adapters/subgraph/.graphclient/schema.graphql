schema {
  query: Query
  subscription: Subscription
}

type Query {
  rinkeby_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Asset
  rinkeby_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Asset_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Asset!]!
  rinkeby_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_AssetBalance
  rinkeby_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_AssetBalance_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_AssetBalance!]!
  rinkeby_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Router
  rinkeby_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Router_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Router!]!
  rinkeby_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Setting
  rinkeby_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Setting_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Setting!]!
  rinkeby_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Relayer
  rinkeby_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Relayer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Relayer!]!
  rinkeby_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_StableSwap
  rinkeby_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_StableSwap_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_StableSwap!]!
  rinkeby_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_SponsorVault
  rinkeby_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_SponsorVault_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_SponsorVault!]!
  rinkeby_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_OriginTransfer
  rinkeby_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_OriginTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_OriginTransfer!]!
  rinkeby_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_DestinationTransfer
  rinkeby_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_DestinationTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_DestinationTransfer!]!
  """Access to subgraph metadata"""
  rinkeby__meta(block: rinkeby_Block_height): rinkeby__Meta_
  staginggoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Asset
  staginggoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Asset_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Asset!]!
  staginggoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AssetBalance
  staginggoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AssetBalance_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AssetBalance!]!
  staginggoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Router
  staginggoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Router_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Router!]!
  staginggoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Setting
  staginggoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Setting_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Setting!]!
  staginggoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Relayer
  staginggoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Relayer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Relayer!]!
  staginggoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwap
  staginggoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwap_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwap!]!
  staginggoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SponsorVault
  staginggoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SponsorVault_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SponsorVault!]!
  staginggoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_OriginTransfer
  staginggoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_OriginTransfer!]!
  staginggoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_DestinationTransfer
  staginggoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  staginggoerli__meta(block: staginggoerli_Block_height): staginggoerli__Meta_
  testgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Asset
  testgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Asset_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Asset!]!
  testgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_AssetBalance
  testgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_AssetBalance_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_AssetBalance!]!
  testgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Router
  testgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Router_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Router!]!
  testgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Setting
  testgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Setting_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Setting!]!
  testgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Relayer
  testgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Relayer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Relayer!]!
  testgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_StableSwap
  testgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_StableSwap_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_StableSwap!]!
  testgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_SponsorVault
  testgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_SponsorVault_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_SponsorVault!]!
  testgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_OriginTransfer
  testgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OriginTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_OriginTransfer!]!
  testgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_DestinationTransfer
  testgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_DestinationTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
  local1337_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Asset
  local1337_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Asset_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Asset!]!
  local1337_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_AssetBalance
  local1337_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AssetBalance_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_AssetBalance!]!
  local1337_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Router
  local1337_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Router_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Router!]!
  local1337_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Setting
  local1337_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Setting_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Setting!]!
  local1337_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Relayer
  local1337_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Relayer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Relayer!]!
  local1337_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwap
  local1337_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwap_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwap!]!
  local1337_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SponsorVault
  local1337_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SponsorVault_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SponsorVault!]!
  local1337_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_OriginTransfer
  local1337_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_OriginTransfer!]!
  local1337_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_DestinationTransfer
  local1337_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_DestinationTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1337__meta(block: local1337_Block_height): local1337__Meta_
  local1338_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Asset
  local1338_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Asset_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Asset!]!
  local1338_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_AssetBalance
  local1338_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_AssetBalance_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_AssetBalance!]!
  local1338_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Router
  local1338_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Router_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Router!]!
  local1338_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Setting
  local1338_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Setting_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Setting!]!
  local1338_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Relayer
  local1338_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Relayer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Relayer!]!
  local1338_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwap
  local1338_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwap_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwap!]!
  local1338_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SponsorVault
  local1338_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SponsorVault_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SponsorVault!]!
  local1338_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_OriginTransfer
  local1338_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_OriginTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_OriginTransfer!]!
  local1338_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_DestinationTransfer
  local1338_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_DestinationTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1338__meta(block: local1338_Block_height): local1338__Meta_
  stagingoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Asset
  stagingoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Asset_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Asset!]!
  stagingoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AssetBalance
  stagingoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetBalance_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AssetBalance!]!
  stagingoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Router
  stagingoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Router_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Router!]!
  stagingoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Setting
  stagingoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Setting_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Setting!]!
  stagingoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Relayer
  stagingoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Relayer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Relayer!]!
  stagingoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwap
  stagingoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwap!]!
  stagingoptimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SponsorVault
  stagingoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SponsorVault_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SponsorVault!]!
  stagingoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginTransfer
  stagingoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginTransfer!]!
  stagingoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationTransfer
  stagingoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli__meta(block: stagingoptimismgoerli_Block_height): stagingoptimismgoerli__Meta_
  testoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Asset
  testoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Asset_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Asset!]!
  testoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_AssetBalance
  testoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_AssetBalance_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_AssetBalance!]!
  testoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Router
  testoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Router_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Router!]!
  testoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Setting
  testoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Setting_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Setting!]!
  testoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Relayer
  testoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Relayer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Relayer!]!
  testoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_StableSwap
  testoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_StableSwap_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_StableSwap!]!
  testoptimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_SponsorVault
  testoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_SponsorVault_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_SponsorVault!]!
  testoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_OriginTransfer
  testoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_OriginTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_OriginTransfer!]!
  testoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_DestinationTransfer
  testoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testoptimismgoerli__meta(block: testoptimismgoerli_Block_height): testoptimismgoerli__Meta_
  goerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Asset!]!
  goerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AssetBalance!]!
  goerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Router!]!
  goerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Setting
  goerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Setting_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Setting!]!
  goerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Relayer
  goerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Relayer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Relayer!]!
  goerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwap
  goerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwap_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwap!]!
  goerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SponsorVault
  goerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SponsorVault_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SponsorVault!]!
  goerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
}

type Subscription {
  rinkeby_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Asset
  rinkeby_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Asset_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Asset!]!
  rinkeby_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_AssetBalance
  rinkeby_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_AssetBalance_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_AssetBalance!]!
  rinkeby_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Router
  rinkeby_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Router_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Router!]!
  rinkeby_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Setting
  rinkeby_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Setting_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Setting!]!
  rinkeby_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Relayer
  rinkeby_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Relayer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Relayer!]!
  rinkeby_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_StableSwap
  rinkeby_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_StableSwap_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_StableSwap!]!
  rinkeby_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_SponsorVault
  rinkeby_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_SponsorVault_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_SponsorVault!]!
  rinkeby_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_OriginTransfer
  rinkeby_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_OriginTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_OriginTransfer!]!
  rinkeby_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_DestinationTransfer
  rinkeby_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_DestinationTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_DestinationTransfer!]!
  """Access to subgraph metadata"""
  rinkeby__meta(block: rinkeby_Block_height): rinkeby__Meta_
  staginggoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Asset
  staginggoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Asset_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Asset!]!
  staginggoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AssetBalance
  staginggoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AssetBalance_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AssetBalance!]!
  staginggoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Router
  staginggoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Router_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Router!]!
  staginggoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Setting
  staginggoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Setting_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Setting!]!
  staginggoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Relayer
  staginggoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Relayer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Relayer!]!
  staginggoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwap
  staginggoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwap_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwap!]!
  staginggoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SponsorVault
  staginggoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SponsorVault_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SponsorVault!]!
  staginggoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_OriginTransfer
  staginggoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_OriginTransfer!]!
  staginggoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_DestinationTransfer
  staginggoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  staginggoerli__meta(block: staginggoerli_Block_height): staginggoerli__Meta_
  testgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Asset
  testgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Asset_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Asset!]!
  testgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_AssetBalance
  testgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_AssetBalance_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_AssetBalance!]!
  testgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Router
  testgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Router_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Router!]!
  testgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Setting
  testgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Setting_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Setting!]!
  testgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Relayer
  testgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Relayer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Relayer!]!
  testgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_StableSwap
  testgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_StableSwap_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_StableSwap!]!
  testgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_SponsorVault
  testgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_SponsorVault_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_SponsorVault!]!
  testgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_OriginTransfer
  testgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OriginTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_OriginTransfer!]!
  testgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_DestinationTransfer
  testgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_DestinationTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
  local1337_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Asset
  local1337_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Asset_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Asset!]!
  local1337_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_AssetBalance
  local1337_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AssetBalance_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_AssetBalance!]!
  local1337_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Router
  local1337_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Router_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Router!]!
  local1337_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Setting
  local1337_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Setting_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Setting!]!
  local1337_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Relayer
  local1337_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Relayer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Relayer!]!
  local1337_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwap
  local1337_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwap_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwap!]!
  local1337_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SponsorVault
  local1337_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SponsorVault_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SponsorVault!]!
  local1337_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_OriginTransfer
  local1337_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_OriginTransfer!]!
  local1337_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_DestinationTransfer
  local1337_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_DestinationTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1337__meta(block: local1337_Block_height): local1337__Meta_
  local1338_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Asset
  local1338_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Asset_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Asset!]!
  local1338_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_AssetBalance
  local1338_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_AssetBalance_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_AssetBalance!]!
  local1338_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Router
  local1338_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Router_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Router!]!
  local1338_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Setting
  local1338_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Setting_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Setting!]!
  local1338_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Relayer
  local1338_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Relayer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Relayer!]!
  local1338_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwap
  local1338_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwap_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwap!]!
  local1338_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SponsorVault
  local1338_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SponsorVault_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SponsorVault!]!
  local1338_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_OriginTransfer
  local1338_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_OriginTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_OriginTransfer!]!
  local1338_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_DestinationTransfer
  local1338_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_DestinationTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1338__meta(block: local1338_Block_height): local1338__Meta_
  stagingoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Asset
  stagingoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Asset_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Asset!]!
  stagingoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AssetBalance
  stagingoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetBalance_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AssetBalance!]!
  stagingoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Router
  stagingoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Router_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Router!]!
  stagingoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Setting
  stagingoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Setting_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Setting!]!
  stagingoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Relayer
  stagingoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Relayer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Relayer!]!
  stagingoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwap
  stagingoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwap!]!
  stagingoptimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SponsorVault
  stagingoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SponsorVault_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SponsorVault!]!
  stagingoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginTransfer
  stagingoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginTransfer!]!
  stagingoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationTransfer
  stagingoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli__meta(block: stagingoptimismgoerli_Block_height): stagingoptimismgoerli__Meta_
  testoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Asset
  testoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Asset_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Asset!]!
  testoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_AssetBalance
  testoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_AssetBalance_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_AssetBalance!]!
  testoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Router
  testoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Router_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Router!]!
  testoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Setting
  testoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Setting_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Setting!]!
  testoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Relayer
  testoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Relayer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Relayer!]!
  testoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_StableSwap
  testoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_StableSwap_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_StableSwap!]!
  testoptimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_SponsorVault
  testoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_SponsorVault_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_SponsorVault!]!
  testoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_OriginTransfer
  testoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_OriginTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_OriginTransfer!]!
  testoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_DestinationTransfer
  testoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testoptimismgoerli__meta(block: testoptimismgoerli_Block_height): testoptimismgoerli__Meta_
  goerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Asset!]!
  goerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AssetBalance!]!
  goerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Router!]!
  goerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Setting
  goerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Setting_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Setting!]!
  goerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Relayer
  goerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Relayer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Relayer!]!
  goerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwap
  goerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwap_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwap!]!
  goerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SponsorVault
  goerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SponsorVault_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SponsorVault!]!
  goerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
}

type rinkeby_Asset {
  id: ID!
  local: rinkeby_Bytes!
  adoptedAsset: rinkeby_Bytes!
  canonicalId: rinkeby_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type rinkeby_AssetBalance {
  id: ID!
  amount: BigInt!
  router: rinkeby_Router!
  asset: rinkeby_Asset!
}

input rinkeby_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: rinkeby_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: rinkeby_Asset_filter
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input rinkeby_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: rinkeby_Bytes
  local_not: rinkeby_Bytes
  local_in: [rinkeby_Bytes!]
  local_not_in: [rinkeby_Bytes!]
  local_contains: rinkeby_Bytes
  local_not_contains: rinkeby_Bytes
  adoptedAsset: rinkeby_Bytes
  adoptedAsset_not: rinkeby_Bytes
  adoptedAsset_in: [rinkeby_Bytes!]
  adoptedAsset_not_in: [rinkeby_Bytes!]
  adoptedAsset_contains: rinkeby_Bytes
  adoptedAsset_not_contains: rinkeby_Bytes
  canonicalId: rinkeby_Bytes
  canonicalId_not: rinkeby_Bytes
  canonicalId_in: [rinkeby_Bytes!]
  canonicalId_not_in: [rinkeby_Bytes!]
  canonicalId_contains: rinkeby_Bytes
  canonicalId_not_contains: rinkeby_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar rinkeby_BigDecimal

scalar BigInt

input rinkeby_BlockChangedFilter {
  number_gte: Int!
}

input rinkeby_Block_height {
  hash: rinkeby_Bytes
  number: Int
  number_gte: Int
}

scalar rinkeby_Bytes

type rinkeby_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: rinkeby_Bytes
  nonce: BigInt
  to: rinkeby_Bytes
  callData: rinkeby_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: rinkeby_Bytes
  recovery: rinkeby_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: rinkeby_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  slippageTol: BigInt
  status: rinkeby_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: rinkeby_Router_orderBy, orderDirection: rinkeby_OrderDirection, where: rinkeby_Router_filter): [rinkeby_Router!]
  originSender: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAmount: BigInt
  localAsset: rinkeby_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: rinkeby_Bytes
  executedTransactionHash: rinkeby_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: rinkeby_Bytes
  reconciledTransactionHash: rinkeby_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input rinkeby_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: rinkeby_Bytes
  transferId_not: rinkeby_Bytes
  transferId_in: [rinkeby_Bytes!]
  transferId_not_in: [rinkeby_Bytes!]
  transferId_contains: rinkeby_Bytes
  transferId_not_contains: rinkeby_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: rinkeby_Bytes
  to_not: rinkeby_Bytes
  to_in: [rinkeby_Bytes!]
  to_not_in: [rinkeby_Bytes!]
  to_contains: rinkeby_Bytes
  to_not_contains: rinkeby_Bytes
  callData: rinkeby_Bytes
  callData_not: rinkeby_Bytes
  callData_in: [rinkeby_Bytes!]
  callData_not_in: [rinkeby_Bytes!]
  callData_contains: rinkeby_Bytes
  callData_not_contains: rinkeby_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: rinkeby_Bytes
  agent_not: rinkeby_Bytes
  agent_in: [rinkeby_Bytes!]
  agent_not_in: [rinkeby_Bytes!]
  agent_contains: rinkeby_Bytes
  agent_not_contains: rinkeby_Bytes
  recovery: rinkeby_Bytes
  recovery_not: rinkeby_Bytes
  recovery_in: [rinkeby_Bytes!]
  recovery_not_in: [rinkeby_Bytes!]
  recovery_contains: rinkeby_Bytes
  recovery_not_contains: rinkeby_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: rinkeby_Bytes
  callback_not: rinkeby_Bytes
  callback_in: [rinkeby_Bytes!]
  callback_not_in: [rinkeby_Bytes!]
  callback_contains: rinkeby_Bytes
  callback_not_contains: rinkeby_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  slippageTol: BigInt
  slippageTol_not: BigInt
  slippageTol_gt: BigInt
  slippageTol_lt: BigInt
  slippageTol_gte: BigInt
  slippageTol_lte: BigInt
  slippageTol_in: [BigInt!]
  slippageTol_not_in: [BigInt!]
  status: rinkeby_TransferStatus
  status_not: rinkeby_TransferStatus
  status_in: [rinkeby_TransferStatus!]
  status_not_in: [rinkeby_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: rinkeby_Router_filter
  originSender: rinkeby_Bytes
  originSender_not: rinkeby_Bytes
  originSender_in: [rinkeby_Bytes!]
  originSender_not_in: [rinkeby_Bytes!]
  originSender_contains: rinkeby_Bytes
  originSender_not_contains: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAsset_not: rinkeby_Bytes
  transactingAsset_in: [rinkeby_Bytes!]
  transactingAsset_not_in: [rinkeby_Bytes!]
  transactingAsset_contains: rinkeby_Bytes
  transactingAsset_not_contains: rinkeby_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: rinkeby_Bytes
  localAsset_not: rinkeby_Bytes
  localAsset_in: [rinkeby_Bytes!]
  localAsset_not_in: [rinkeby_Bytes!]
  localAsset_contains: rinkeby_Bytes
  localAsset_not_contains: rinkeby_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: rinkeby_Bytes
  executedCaller_not: rinkeby_Bytes
  executedCaller_in: [rinkeby_Bytes!]
  executedCaller_not_in: [rinkeby_Bytes!]
  executedCaller_contains: rinkeby_Bytes
  executedCaller_not_contains: rinkeby_Bytes
  executedTransactionHash: rinkeby_Bytes
  executedTransactionHash_not: rinkeby_Bytes
  executedTransactionHash_in: [rinkeby_Bytes!]
  executedTransactionHash_not_in: [rinkeby_Bytes!]
  executedTransactionHash_contains: rinkeby_Bytes
  executedTransactionHash_not_contains: rinkeby_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: rinkeby_Bytes
  reconciledCaller_not: rinkeby_Bytes
  reconciledCaller_in: [rinkeby_Bytes!]
  reconciledCaller_not_in: [rinkeby_Bytes!]
  reconciledCaller_contains: rinkeby_Bytes
  reconciledCaller_not_contains: rinkeby_Bytes
  reconciledTransactionHash: rinkeby_Bytes
  reconciledTransactionHash_not: rinkeby_Bytes
  reconciledTransactionHash_in: [rinkeby_Bytes!]
  reconciledTransactionHash_not_in: [rinkeby_Bytes!]
  reconciledTransactionHash_contains: rinkeby_Bytes
  reconciledTransactionHash_not_contains: rinkeby_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  slippageTol
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum rinkeby_OrderDirection {
  asc
  desc
}

type rinkeby_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: rinkeby_Bytes
  nonce: BigInt
  to: rinkeby_Bytes
  callData: rinkeby_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: rinkeby_Bytes
  recovery: rinkeby_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: rinkeby_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  slippageTol: BigInt
  status: rinkeby_TransferStatus
  message: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAmount: BigInt
  bridgedAsset: rinkeby_Bytes
  bridgedAmount: BigInt
  caller: rinkeby_Bytes
  transactionHash: rinkeby_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input rinkeby_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: rinkeby_Bytes
  transferId_not: rinkeby_Bytes
  transferId_in: [rinkeby_Bytes!]
  transferId_not_in: [rinkeby_Bytes!]
  transferId_contains: rinkeby_Bytes
  transferId_not_contains: rinkeby_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: rinkeby_Bytes
  to_not: rinkeby_Bytes
  to_in: [rinkeby_Bytes!]
  to_not_in: [rinkeby_Bytes!]
  to_contains: rinkeby_Bytes
  to_not_contains: rinkeby_Bytes
  callData: rinkeby_Bytes
  callData_not: rinkeby_Bytes
  callData_in: [rinkeby_Bytes!]
  callData_not_in: [rinkeby_Bytes!]
  callData_contains: rinkeby_Bytes
  callData_not_contains: rinkeby_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: rinkeby_Bytes
  agent_not: rinkeby_Bytes
  agent_in: [rinkeby_Bytes!]
  agent_not_in: [rinkeby_Bytes!]
  agent_contains: rinkeby_Bytes
  agent_not_contains: rinkeby_Bytes
  recovery: rinkeby_Bytes
  recovery_not: rinkeby_Bytes
  recovery_in: [rinkeby_Bytes!]
  recovery_not_in: [rinkeby_Bytes!]
  recovery_contains: rinkeby_Bytes
  recovery_not_contains: rinkeby_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: rinkeby_Bytes
  callback_not: rinkeby_Bytes
  callback_in: [rinkeby_Bytes!]
  callback_not_in: [rinkeby_Bytes!]
  callback_contains: rinkeby_Bytes
  callback_not_contains: rinkeby_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  slippageTol: BigInt
  slippageTol_not: BigInt
  slippageTol_gt: BigInt
  slippageTol_lt: BigInt
  slippageTol_gte: BigInt
  slippageTol_lte: BigInt
  slippageTol_in: [BigInt!]
  slippageTol_not_in: [BigInt!]
  status: rinkeby_TransferStatus
  status_not: rinkeby_TransferStatus
  status_in: [rinkeby_TransferStatus!]
  status_not_in: [rinkeby_TransferStatus!]
  message: rinkeby_Bytes
  message_not: rinkeby_Bytes
  message_in: [rinkeby_Bytes!]
  message_not_in: [rinkeby_Bytes!]
  message_contains: rinkeby_Bytes
  message_not_contains: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAsset_not: rinkeby_Bytes
  transactingAsset_in: [rinkeby_Bytes!]
  transactingAsset_not_in: [rinkeby_Bytes!]
  transactingAsset_contains: rinkeby_Bytes
  transactingAsset_not_contains: rinkeby_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: rinkeby_Bytes
  bridgedAsset_not: rinkeby_Bytes
  bridgedAsset_in: [rinkeby_Bytes!]
  bridgedAsset_not_in: [rinkeby_Bytes!]
  bridgedAsset_contains: rinkeby_Bytes
  bridgedAsset_not_contains: rinkeby_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: rinkeby_Bytes
  caller_not: rinkeby_Bytes
  caller_in: [rinkeby_Bytes!]
  caller_not_in: [rinkeby_Bytes!]
  caller_contains: rinkeby_Bytes
  caller_not_contains: rinkeby_Bytes
  transactionHash: rinkeby_Bytes
  transactionHash_not: rinkeby_Bytes
  transactionHash_in: [rinkeby_Bytes!]
  transactionHash_not_in: [rinkeby_Bytes!]
  transactionHash_contains: rinkeby_Bytes
  transactionHash_not_contains: rinkeby_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  slippageTol
  status
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type rinkeby_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: rinkeby_Bytes
}

input rinkeby_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: rinkeby_Bytes
  relayer_not: rinkeby_Bytes
  relayer_in: [rinkeby_Bytes!]
  relayer_not_in: [rinkeby_Bytes!]
  relayer_contains: rinkeby_Bytes
  relayer_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Relayer_orderBy {
  id
  isActive
  relayer
}

type rinkeby_Router {
  id: ID!
  isActive: Boolean!
  owner: rinkeby_Bytes
  recipient: rinkeby_Bytes
  proposedOwner: rinkeby_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: rinkeby_AssetBalance_orderBy, orderDirection: rinkeby_OrderDirection, where: rinkeby_AssetBalance_filter): [rinkeby_AssetBalance!]!
}

input rinkeby_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: rinkeby_Bytes
  owner_not: rinkeby_Bytes
  owner_in: [rinkeby_Bytes!]
  owner_not_in: [rinkeby_Bytes!]
  owner_contains: rinkeby_Bytes
  owner_not_contains: rinkeby_Bytes
  recipient: rinkeby_Bytes
  recipient_not: rinkeby_Bytes
  recipient_in: [rinkeby_Bytes!]
  recipient_not_in: [rinkeby_Bytes!]
  recipient_contains: rinkeby_Bytes
  recipient_not_contains: rinkeby_Bytes
  proposedOwner: rinkeby_Bytes
  proposedOwner_not: rinkeby_Bytes
  proposedOwner_in: [rinkeby_Bytes!]
  proposedOwner_not_in: [rinkeby_Bytes!]
  proposedOwner_contains: rinkeby_Bytes
  proposedOwner_not_contains: rinkeby_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: rinkeby_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type rinkeby_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: rinkeby_Bytes!
}

input rinkeby_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: rinkeby_Bytes
  caller_not: rinkeby_Bytes
  caller_in: [rinkeby_Bytes!]
  caller_not_in: [rinkeby_Bytes!]
  caller_contains: rinkeby_Bytes
  caller_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type rinkeby_SponsorVault {
  id: ID!
  sponsorVault: rinkeby_Bytes!
}

input rinkeby_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: rinkeby_Bytes
  sponsorVault_not: rinkeby_Bytes
  sponsorVault_in: [rinkeby_Bytes!]
  sponsorVault_not_in: [rinkeby_Bytes!]
  sponsorVault_contains: rinkeby_Bytes
  sponsorVault_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_SponsorVault_orderBy {
  id
  sponsorVault
}

type rinkeby_StableSwap {
  id: ID!
  canonicalId: rinkeby_Bytes!
  domain: BigInt
  swapPool: rinkeby_Bytes!
}

input rinkeby_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: rinkeby_Bytes
  canonicalId_not: rinkeby_Bytes
  canonicalId_in: [rinkeby_Bytes!]
  canonicalId_not_in: [rinkeby_Bytes!]
  canonicalId_contains: rinkeby_Bytes
  canonicalId_not_contains: rinkeby_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: rinkeby_Bytes
  swapPool_not: rinkeby_Bytes
  swapPool_in: [rinkeby_Bytes!]
  swapPool_not_in: [rinkeby_Bytes!]
  swapPool_contains: rinkeby_Bytes
  swapPool_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum rinkeby_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type rinkeby__Block_ {
  """The hash of the block"""
  hash: rinkeby_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type rinkeby__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: rinkeby__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type staginggoerli_Asset {
  id: ID!
  key: staginggoerli_Bytes
  local: staginggoerli_Bytes!
  adoptedAsset: staginggoerli_Bytes!
  canonicalId: staginggoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type staginggoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: staginggoerli_Router!
  asset: staginggoerli_Asset!
}

input staginggoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: staginggoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: staginggoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input staginggoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: staginggoerli_Bytes
  key_not: staginggoerli_Bytes
  key_in: [staginggoerli_Bytes!]
  key_not_in: [staginggoerli_Bytes!]
  key_contains: staginggoerli_Bytes
  key_not_contains: staginggoerli_Bytes
  local: staginggoerli_Bytes
  local_not: staginggoerli_Bytes
  local_in: [staginggoerli_Bytes!]
  local_not_in: [staginggoerli_Bytes!]
  local_contains: staginggoerli_Bytes
  local_not_contains: staginggoerli_Bytes
  adoptedAsset: staginggoerli_Bytes
  adoptedAsset_not: staginggoerli_Bytes
  adoptedAsset_in: [staginggoerli_Bytes!]
  adoptedAsset_not_in: [staginggoerli_Bytes!]
  adoptedAsset_contains: staginggoerli_Bytes
  adoptedAsset_not_contains: staginggoerli_Bytes
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar staginggoerli_BigDecimal

input staginggoerli_BlockChangedFilter {
  number_gte: Int!
}

input staginggoerli_Block_height {
  hash: staginggoerli_Bytes
  number: Int
  number_gte: Int
}

scalar staginggoerli_Bytes

type staginggoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: staginggoerli_Bytes
  nonce: BigInt
  to: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: staginggoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: staginggoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_Router_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_Router_filter): [staginggoerli_Router!]
  originSender: staginggoerli_Bytes
  transactingAsset: staginggoerli_Bytes
  transactingAmount: BigInt
  localAsset: staginggoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: staginggoerli_Bytes
  executedTransactionHash: staginggoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: staginggoerli_Bytes
  reconciledTransactionHash: staginggoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input staginggoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: staginggoerli_Bytes
  to_not: staginggoerli_Bytes
  to_in: [staginggoerli_Bytes!]
  to_not_in: [staginggoerli_Bytes!]
  to_contains: staginggoerli_Bytes
  to_not_contains: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  callData_not: staginggoerli_Bytes
  callData_in: [staginggoerli_Bytes!]
  callData_not_in: [staginggoerli_Bytes!]
  callData_contains: staginggoerli_Bytes
  callData_not_contains: staginggoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: staginggoerli_Bytes
  agent_not: staginggoerli_Bytes
  agent_in: [staginggoerli_Bytes!]
  agent_not_in: [staginggoerli_Bytes!]
  agent_contains: staginggoerli_Bytes
  agent_not_contains: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  recovery_not: staginggoerli_Bytes
  recovery_in: [staginggoerli_Bytes!]
  recovery_not_in: [staginggoerli_Bytes!]
  recovery_contains: staginggoerli_Bytes
  recovery_not_contains: staginggoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: staginggoerli_Bytes
  callback_not: staginggoerli_Bytes
  callback_in: [staginggoerli_Bytes!]
  callback_not_in: [staginggoerli_Bytes!]
  callback_contains: staginggoerli_Bytes
  callback_not_contains: staginggoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: staginggoerli_TransferStatus
  status_not: staginggoerli_TransferStatus
  status_in: [staginggoerli_TransferStatus!]
  status_not_in: [staginggoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: staginggoerli_Router_filter
  originSender: staginggoerli_Bytes
  originSender_not: staginggoerli_Bytes
  originSender_in: [staginggoerli_Bytes!]
  originSender_not_in: [staginggoerli_Bytes!]
  originSender_contains: staginggoerli_Bytes
  originSender_not_contains: staginggoerli_Bytes
  transactingAsset: staginggoerli_Bytes
  transactingAsset_not: staginggoerli_Bytes
  transactingAsset_in: [staginggoerli_Bytes!]
  transactingAsset_not_in: [staginggoerli_Bytes!]
  transactingAsset_contains: staginggoerli_Bytes
  transactingAsset_not_contains: staginggoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: staginggoerli_Bytes
  localAsset_not: staginggoerli_Bytes
  localAsset_in: [staginggoerli_Bytes!]
  localAsset_not_in: [staginggoerli_Bytes!]
  localAsset_contains: staginggoerli_Bytes
  localAsset_not_contains: staginggoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: staginggoerli_Bytes
  executedCaller_not: staginggoerli_Bytes
  executedCaller_in: [staginggoerli_Bytes!]
  executedCaller_not_in: [staginggoerli_Bytes!]
  executedCaller_contains: staginggoerli_Bytes
  executedCaller_not_contains: staginggoerli_Bytes
  executedTransactionHash: staginggoerli_Bytes
  executedTransactionHash_not: staginggoerli_Bytes
  executedTransactionHash_in: [staginggoerli_Bytes!]
  executedTransactionHash_not_in: [staginggoerli_Bytes!]
  executedTransactionHash_contains: staginggoerli_Bytes
  executedTransactionHash_not_contains: staginggoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: staginggoerli_Bytes
  reconciledCaller_not: staginggoerli_Bytes
  reconciledCaller_in: [staginggoerli_Bytes!]
  reconciledCaller_not_in: [staginggoerli_Bytes!]
  reconciledCaller_contains: staginggoerli_Bytes
  reconciledCaller_not_contains: staginggoerli_Bytes
  reconciledTransactionHash: staginggoerli_Bytes
  reconciledTransactionHash_not: staginggoerli_Bytes
  reconciledTransactionHash_in: [staginggoerli_Bytes!]
  reconciledTransactionHash_not_in: [staginggoerli_Bytes!]
  reconciledTransactionHash_contains: staginggoerli_Bytes
  reconciledTransactionHash_not_contains: staginggoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum staginggoerli_OrderDirection {
  asc
  desc
}

type staginggoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: staginggoerli_Bytes
  nonce: BigInt
  to: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: staginggoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: staginggoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: staginggoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: staginggoerli_Bytes
  bridgedAmount: BigInt
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input staginggoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: staginggoerli_Bytes
  to_not: staginggoerli_Bytes
  to_in: [staginggoerli_Bytes!]
  to_not_in: [staginggoerli_Bytes!]
  to_contains: staginggoerli_Bytes
  to_not_contains: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  callData_not: staginggoerli_Bytes
  callData_in: [staginggoerli_Bytes!]
  callData_not_in: [staginggoerli_Bytes!]
  callData_contains: staginggoerli_Bytes
  callData_not_contains: staginggoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: staginggoerli_Bytes
  agent_not: staginggoerli_Bytes
  agent_in: [staginggoerli_Bytes!]
  agent_not_in: [staginggoerli_Bytes!]
  agent_contains: staginggoerli_Bytes
  agent_not_contains: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  recovery_not: staginggoerli_Bytes
  recovery_in: [staginggoerli_Bytes!]
  recovery_not_in: [staginggoerli_Bytes!]
  recovery_contains: staginggoerli_Bytes
  recovery_not_contains: staginggoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: staginggoerli_Bytes
  callback_not: staginggoerli_Bytes
  callback_in: [staginggoerli_Bytes!]
  callback_not_in: [staginggoerli_Bytes!]
  callback_contains: staginggoerli_Bytes
  callback_not_contains: staginggoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: staginggoerli_TransferStatus
  status_not: staginggoerli_TransferStatus
  status_in: [staginggoerli_TransferStatus!]
  status_not_in: [staginggoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: staginggoerli_Bytes
  transactingAsset_not: staginggoerli_Bytes
  transactingAsset_in: [staginggoerli_Bytes!]
  transactingAsset_not_in: [staginggoerli_Bytes!]
  transactingAsset_contains: staginggoerli_Bytes
  transactingAsset_not_contains: staginggoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: staginggoerli_Bytes
  bridgedAsset_not: staginggoerli_Bytes
  bridgedAsset_in: [staginggoerli_Bytes!]
  bridgedAsset_not_in: [staginggoerli_Bytes!]
  bridgedAsset_contains: staginggoerli_Bytes
  bridgedAsset_not_contains: staginggoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type staginggoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: staginggoerli_Bytes
}

input staginggoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: staginggoerli_Bytes
  relayer_not: staginggoerli_Bytes
  relayer_in: [staginggoerli_Bytes!]
  relayer_not_in: [staginggoerli_Bytes!]
  relayer_contains: staginggoerli_Bytes
  relayer_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type staginggoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: staginggoerli_Bytes
  recipient: staginggoerli_Bytes
  proposedOwner: staginggoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_AssetBalance_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_AssetBalance_filter): [staginggoerli_AssetBalance!]!
}

input staginggoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: staginggoerli_Bytes
  owner_not: staginggoerli_Bytes
  owner_in: [staginggoerli_Bytes!]
  owner_not_in: [staginggoerli_Bytes!]
  owner_contains: staginggoerli_Bytes
  owner_not_contains: staginggoerli_Bytes
  recipient: staginggoerli_Bytes
  recipient_not: staginggoerli_Bytes
  recipient_in: [staginggoerli_Bytes!]
  recipient_not_in: [staginggoerli_Bytes!]
  recipient_contains: staginggoerli_Bytes
  recipient_not_contains: staginggoerli_Bytes
  proposedOwner: staginggoerli_Bytes
  proposedOwner_not: staginggoerli_Bytes
  proposedOwner_in: [staginggoerli_Bytes!]
  proposedOwner_not_in: [staginggoerli_Bytes!]
  proposedOwner_contains: staginggoerli_Bytes
  proposedOwner_not_contains: staginggoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: staginggoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type staginggoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: staginggoerli_Bytes!
}

input staginggoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type staginggoerli_SponsorVault {
  id: ID!
  sponsorVault: staginggoerli_Bytes!
}

input staginggoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: staginggoerli_Bytes
  sponsorVault_not: staginggoerli_Bytes
  sponsorVault_in: [staginggoerli_Bytes!]
  sponsorVault_not_in: [staginggoerli_Bytes!]
  sponsorVault_contains: staginggoerli_Bytes
  sponsorVault_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type staginggoerli_StableSwap {
  id: ID!
  canonicalId: staginggoerli_Bytes!
  domain: BigInt
  swapPool: staginggoerli_Bytes!
}

input staginggoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: staginggoerli_Bytes
  swapPool_not: staginggoerli_Bytes
  swapPool_in: [staginggoerli_Bytes!]
  swapPool_not_in: [staginggoerli_Bytes!]
  swapPool_contains: staginggoerli_Bytes
  swapPool_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum staginggoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type staginggoerli__Block_ {
  """The hash of the block"""
  hash: staginggoerli_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type staginggoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: staginggoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type testgoerli_Asset {
  id: ID!
  local: testgoerli_Bytes!
  adoptedAsset: testgoerli_Bytes!
  canonicalId: testgoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type testgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testgoerli_Router!
  asset: testgoerli_Asset!
}

input testgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: testgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: testgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input testgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: testgoerli_Bytes
  local_not: testgoerli_Bytes
  local_in: [testgoerli_Bytes!]
  local_not_in: [testgoerli_Bytes!]
  local_contains: testgoerli_Bytes
  local_not_contains: testgoerli_Bytes
  adoptedAsset: testgoerli_Bytes
  adoptedAsset_not: testgoerli_Bytes
  adoptedAsset_in: [testgoerli_Bytes!]
  adoptedAsset_not_in: [testgoerli_Bytes!]
  adoptedAsset_contains: testgoerli_Bytes
  adoptedAsset_not_contains: testgoerli_Bytes
  canonicalId: testgoerli_Bytes
  canonicalId_not: testgoerli_Bytes
  canonicalId_in: [testgoerli_Bytes!]
  canonicalId_not_in: [testgoerli_Bytes!]
  canonicalId_contains: testgoerli_Bytes
  canonicalId_not_contains: testgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar testgoerli_BigDecimal

input testgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testgoerli_Block_height {
  hash: testgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar testgoerli_Bytes

type testgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testgoerli_Bytes
  nonce: BigInt
  to: testgoerli_Bytes
  callData: testgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testgoerli_Bytes
  recovery: testgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testgoerli_Router_orderBy, orderDirection: testgoerli_OrderDirection, where: testgoerli_Router_filter): [testgoerli_Router!]
  originSender: testgoerli_Bytes
  transactingAsset: testgoerli_Bytes
  transactingAmount: BigInt
  localAsset: testgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: testgoerli_Bytes
  executedTransactionHash: testgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: testgoerli_Bytes
  reconciledTransactionHash: testgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input testgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testgoerli_Bytes
  transferId_not: testgoerli_Bytes
  transferId_in: [testgoerli_Bytes!]
  transferId_not_in: [testgoerli_Bytes!]
  transferId_contains: testgoerli_Bytes
  transferId_not_contains: testgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testgoerli_Bytes
  to_not: testgoerli_Bytes
  to_in: [testgoerli_Bytes!]
  to_not_in: [testgoerli_Bytes!]
  to_contains: testgoerli_Bytes
  to_not_contains: testgoerli_Bytes
  callData: testgoerli_Bytes
  callData_not: testgoerli_Bytes
  callData_in: [testgoerli_Bytes!]
  callData_not_in: [testgoerli_Bytes!]
  callData_contains: testgoerli_Bytes
  callData_not_contains: testgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testgoerli_Bytes
  agent_not: testgoerli_Bytes
  agent_in: [testgoerli_Bytes!]
  agent_not_in: [testgoerli_Bytes!]
  agent_contains: testgoerli_Bytes
  agent_not_contains: testgoerli_Bytes
  recovery: testgoerli_Bytes
  recovery_not: testgoerli_Bytes
  recovery_in: [testgoerli_Bytes!]
  recovery_not_in: [testgoerli_Bytes!]
  recovery_contains: testgoerli_Bytes
  recovery_not_contains: testgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testgoerli_Bytes
  callback_not: testgoerli_Bytes
  callback_in: [testgoerli_Bytes!]
  callback_not_in: [testgoerli_Bytes!]
  callback_contains: testgoerli_Bytes
  callback_not_contains: testgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testgoerli_TransferStatus
  status_not: testgoerli_TransferStatus
  status_in: [testgoerli_TransferStatus!]
  status_not_in: [testgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: testgoerli_Router_filter
  originSender: testgoerli_Bytes
  originSender_not: testgoerli_Bytes
  originSender_in: [testgoerli_Bytes!]
  originSender_not_in: [testgoerli_Bytes!]
  originSender_contains: testgoerli_Bytes
  originSender_not_contains: testgoerli_Bytes
  transactingAsset: testgoerli_Bytes
  transactingAsset_not: testgoerli_Bytes
  transactingAsset_in: [testgoerli_Bytes!]
  transactingAsset_not_in: [testgoerli_Bytes!]
  transactingAsset_contains: testgoerli_Bytes
  transactingAsset_not_contains: testgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: testgoerli_Bytes
  localAsset_not: testgoerli_Bytes
  localAsset_in: [testgoerli_Bytes!]
  localAsset_not_in: [testgoerli_Bytes!]
  localAsset_contains: testgoerli_Bytes
  localAsset_not_contains: testgoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: testgoerli_Bytes
  executedCaller_not: testgoerli_Bytes
  executedCaller_in: [testgoerli_Bytes!]
  executedCaller_not_in: [testgoerli_Bytes!]
  executedCaller_contains: testgoerli_Bytes
  executedCaller_not_contains: testgoerli_Bytes
  executedTransactionHash: testgoerli_Bytes
  executedTransactionHash_not: testgoerli_Bytes
  executedTransactionHash_in: [testgoerli_Bytes!]
  executedTransactionHash_not_in: [testgoerli_Bytes!]
  executedTransactionHash_contains: testgoerli_Bytes
  executedTransactionHash_not_contains: testgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: testgoerli_Bytes
  reconciledCaller_not: testgoerli_Bytes
  reconciledCaller_in: [testgoerli_Bytes!]
  reconciledCaller_not_in: [testgoerli_Bytes!]
  reconciledCaller_contains: testgoerli_Bytes
  reconciledCaller_not_contains: testgoerli_Bytes
  reconciledTransactionHash: testgoerli_Bytes
  reconciledTransactionHash_not: testgoerli_Bytes
  reconciledTransactionHash_in: [testgoerli_Bytes!]
  reconciledTransactionHash_not_in: [testgoerli_Bytes!]
  reconciledTransactionHash_contains: testgoerli_Bytes
  reconciledTransactionHash_not_contains: testgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum testgoerli_OrderDirection {
  asc
  desc
}

type testgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testgoerli_Bytes
  nonce: BigInt
  to: testgoerli_Bytes
  callData: testgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testgoerli_Bytes
  recovery: testgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: testgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: testgoerli_Bytes
  bridgedAmount: BigInt
  caller: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input testgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testgoerli_Bytes
  transferId_not: testgoerli_Bytes
  transferId_in: [testgoerli_Bytes!]
  transferId_not_in: [testgoerli_Bytes!]
  transferId_contains: testgoerli_Bytes
  transferId_not_contains: testgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testgoerli_Bytes
  to_not: testgoerli_Bytes
  to_in: [testgoerli_Bytes!]
  to_not_in: [testgoerli_Bytes!]
  to_contains: testgoerli_Bytes
  to_not_contains: testgoerli_Bytes
  callData: testgoerli_Bytes
  callData_not: testgoerli_Bytes
  callData_in: [testgoerli_Bytes!]
  callData_not_in: [testgoerli_Bytes!]
  callData_contains: testgoerli_Bytes
  callData_not_contains: testgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testgoerli_Bytes
  agent_not: testgoerli_Bytes
  agent_in: [testgoerli_Bytes!]
  agent_not_in: [testgoerli_Bytes!]
  agent_contains: testgoerli_Bytes
  agent_not_contains: testgoerli_Bytes
  recovery: testgoerli_Bytes
  recovery_not: testgoerli_Bytes
  recovery_in: [testgoerli_Bytes!]
  recovery_not_in: [testgoerli_Bytes!]
  recovery_contains: testgoerli_Bytes
  recovery_not_contains: testgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testgoerli_Bytes
  callback_not: testgoerli_Bytes
  callback_in: [testgoerli_Bytes!]
  callback_not_in: [testgoerli_Bytes!]
  callback_contains: testgoerli_Bytes
  callback_not_contains: testgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testgoerli_TransferStatus
  status_not: testgoerli_TransferStatus
  status_in: [testgoerli_TransferStatus!]
  status_not_in: [testgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: testgoerli_Bytes
  transactingAsset_not: testgoerli_Bytes
  transactingAsset_in: [testgoerli_Bytes!]
  transactingAsset_not_in: [testgoerli_Bytes!]
  transactingAsset_contains: testgoerli_Bytes
  transactingAsset_not_contains: testgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: testgoerli_Bytes
  bridgedAsset_not: testgoerli_Bytes
  bridgedAsset_in: [testgoerli_Bytes!]
  bridgedAsset_not_in: [testgoerli_Bytes!]
  bridgedAsset_contains: testgoerli_Bytes
  bridgedAsset_not_contains: testgoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
  transactionHash_not: testgoerli_Bytes
  transactionHash_in: [testgoerli_Bytes!]
  transactionHash_not_in: [testgoerli_Bytes!]
  transactionHash_contains: testgoerli_Bytes
  transactionHash_not_contains: testgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type testgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testgoerli_Bytes
}

input testgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: testgoerli_Bytes
  relayer_not: testgoerli_Bytes
  relayer_in: [testgoerli_Bytes!]
  relayer_not_in: [testgoerli_Bytes!]
  relayer_contains: testgoerli_Bytes
  relayer_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type testgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: testgoerli_Bytes
  recipient: testgoerli_Bytes
  proposedOwner: testgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testgoerli_AssetBalance_orderBy, orderDirection: testgoerli_OrderDirection, where: testgoerli_AssetBalance_filter): [testgoerli_AssetBalance!]!
}

input testgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: testgoerli_Bytes
  owner_not: testgoerli_Bytes
  owner_in: [testgoerli_Bytes!]
  owner_not_in: [testgoerli_Bytes!]
  owner_contains: testgoerli_Bytes
  owner_not_contains: testgoerli_Bytes
  recipient: testgoerli_Bytes
  recipient_not: testgoerli_Bytes
  recipient_in: [testgoerli_Bytes!]
  recipient_not_in: [testgoerli_Bytes!]
  recipient_contains: testgoerli_Bytes
  recipient_not_contains: testgoerli_Bytes
  proposedOwner: testgoerli_Bytes
  proposedOwner_not: testgoerli_Bytes
  proposedOwner_in: [testgoerli_Bytes!]
  proposedOwner_not_in: [testgoerli_Bytes!]
  proposedOwner_contains: testgoerli_Bytes
  proposedOwner_not_contains: testgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: testgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type testgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testgoerli_Bytes!
}

input testgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type testgoerli_SponsorVault {
  id: ID!
  sponsorVault: testgoerli_Bytes!
}

input testgoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: testgoerli_Bytes
  sponsorVault_not: testgoerli_Bytes
  sponsorVault_in: [testgoerli_Bytes!]
  sponsorVault_not_in: [testgoerli_Bytes!]
  sponsorVault_contains: testgoerli_Bytes
  sponsorVault_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type testgoerli_StableSwap {
  id: ID!
  canonicalId: testgoerli_Bytes!
  domain: BigInt
  swapPool: testgoerli_Bytes!
}

input testgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: testgoerli_Bytes
  canonicalId_not: testgoerli_Bytes
  canonicalId_in: [testgoerli_Bytes!]
  canonicalId_not_in: [testgoerli_Bytes!]
  canonicalId_contains: testgoerli_Bytes
  canonicalId_not_contains: testgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: testgoerli_Bytes
  swapPool_not: testgoerli_Bytes
  swapPool_in: [testgoerli_Bytes!]
  swapPool_not_in: [testgoerli_Bytes!]
  swapPool_contains: testgoerli_Bytes
  swapPool_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum testgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type testgoerli__Block_ {
  """The hash of the block"""
  hash: testgoerli_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type testgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: testgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type local1337_Asset {
  id: ID!
  local: local1337_Bytes!
  adoptedAsset: local1337_Bytes!
  canonicalId: local1337_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type local1337_AssetBalance {
  id: ID!
  amount: BigInt!
  router: local1337_Router!
  asset: local1337_Asset!
}

input local1337_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: local1337_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: local1337_Asset_filter
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input local1337_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: local1337_Bytes
  local_not: local1337_Bytes
  local_in: [local1337_Bytes!]
  local_not_in: [local1337_Bytes!]
  local_contains: local1337_Bytes
  local_not_contains: local1337_Bytes
  adoptedAsset: local1337_Bytes
  adoptedAsset_not: local1337_Bytes
  adoptedAsset_in: [local1337_Bytes!]
  adoptedAsset_not_in: [local1337_Bytes!]
  adoptedAsset_contains: local1337_Bytes
  adoptedAsset_not_contains: local1337_Bytes
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar local1337_BigDecimal

input local1337_BlockChangedFilter {
  number_gte: Int!
}

input local1337_Block_height {
  hash: local1337_Bytes
  number: Int
  number_gte: Int
}

scalar local1337_Bytes

type local1337_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1337_Bytes
  nonce: BigInt
  to: local1337_Bytes
  callData: local1337_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1337_Bytes
  recovery: local1337_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1337_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1337_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: local1337_Router_orderBy, orderDirection: local1337_OrderDirection, where: local1337_Router_filter): [local1337_Router!]
  originSender: local1337_Bytes
  transactingAsset: local1337_Bytes
  transactingAmount: BigInt
  localAsset: local1337_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: local1337_Bytes
  executedTransactionHash: local1337_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: local1337_Bytes
  reconciledTransactionHash: local1337_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input local1337_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: local1337_Bytes
  to_not: local1337_Bytes
  to_in: [local1337_Bytes!]
  to_not_in: [local1337_Bytes!]
  to_contains: local1337_Bytes
  to_not_contains: local1337_Bytes
  callData: local1337_Bytes
  callData_not: local1337_Bytes
  callData_in: [local1337_Bytes!]
  callData_not_in: [local1337_Bytes!]
  callData_contains: local1337_Bytes
  callData_not_contains: local1337_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: local1337_Bytes
  agent_not: local1337_Bytes
  agent_in: [local1337_Bytes!]
  agent_not_in: [local1337_Bytes!]
  agent_contains: local1337_Bytes
  agent_not_contains: local1337_Bytes
  recovery: local1337_Bytes
  recovery_not: local1337_Bytes
  recovery_in: [local1337_Bytes!]
  recovery_not_in: [local1337_Bytes!]
  recovery_contains: local1337_Bytes
  recovery_not_contains: local1337_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: local1337_Bytes
  callback_not: local1337_Bytes
  callback_in: [local1337_Bytes!]
  callback_not_in: [local1337_Bytes!]
  callback_contains: local1337_Bytes
  callback_not_contains: local1337_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: local1337_TransferStatus
  status_not: local1337_TransferStatus
  status_in: [local1337_TransferStatus!]
  status_not_in: [local1337_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: local1337_Router_filter
  originSender: local1337_Bytes
  originSender_not: local1337_Bytes
  originSender_in: [local1337_Bytes!]
  originSender_not_in: [local1337_Bytes!]
  originSender_contains: local1337_Bytes
  originSender_not_contains: local1337_Bytes
  transactingAsset: local1337_Bytes
  transactingAsset_not: local1337_Bytes
  transactingAsset_in: [local1337_Bytes!]
  transactingAsset_not_in: [local1337_Bytes!]
  transactingAsset_contains: local1337_Bytes
  transactingAsset_not_contains: local1337_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: local1337_Bytes
  localAsset_not: local1337_Bytes
  localAsset_in: [local1337_Bytes!]
  localAsset_not_in: [local1337_Bytes!]
  localAsset_contains: local1337_Bytes
  localAsset_not_contains: local1337_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: local1337_Bytes
  executedCaller_not: local1337_Bytes
  executedCaller_in: [local1337_Bytes!]
  executedCaller_not_in: [local1337_Bytes!]
  executedCaller_contains: local1337_Bytes
  executedCaller_not_contains: local1337_Bytes
  executedTransactionHash: local1337_Bytes
  executedTransactionHash_not: local1337_Bytes
  executedTransactionHash_in: [local1337_Bytes!]
  executedTransactionHash_not_in: [local1337_Bytes!]
  executedTransactionHash_contains: local1337_Bytes
  executedTransactionHash_not_contains: local1337_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: local1337_Bytes
  reconciledCaller_not: local1337_Bytes
  reconciledCaller_in: [local1337_Bytes!]
  reconciledCaller_not_in: [local1337_Bytes!]
  reconciledCaller_contains: local1337_Bytes
  reconciledCaller_not_contains: local1337_Bytes
  reconciledTransactionHash: local1337_Bytes
  reconciledTransactionHash_not: local1337_Bytes
  reconciledTransactionHash_in: [local1337_Bytes!]
  reconciledTransactionHash_not_in: [local1337_Bytes!]
  reconciledTransactionHash_contains: local1337_Bytes
  reconciledTransactionHash_not_contains: local1337_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum local1337_OrderDirection {
  asc
  desc
}

type local1337_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1337_Bytes
  nonce: BigInt
  to: local1337_Bytes
  callData: local1337_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1337_Bytes
  recovery: local1337_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1337_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1337_TransferStatus
  originMinOut: BigInt
  transactingAsset: local1337_Bytes
  transactingAmount: BigInt
  bridgedAsset: local1337_Bytes
  bridgedAmount: BigInt
  caller: local1337_Bytes
  transactionHash: local1337_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input local1337_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: local1337_Bytes
  to_not: local1337_Bytes
  to_in: [local1337_Bytes!]
  to_not_in: [local1337_Bytes!]
  to_contains: local1337_Bytes
  to_not_contains: local1337_Bytes
  callData: local1337_Bytes
  callData_not: local1337_Bytes
  callData_in: [local1337_Bytes!]
  callData_not_in: [local1337_Bytes!]
  callData_contains: local1337_Bytes
  callData_not_contains: local1337_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: local1337_Bytes
  agent_not: local1337_Bytes
  agent_in: [local1337_Bytes!]
  agent_not_in: [local1337_Bytes!]
  agent_contains: local1337_Bytes
  agent_not_contains: local1337_Bytes
  recovery: local1337_Bytes
  recovery_not: local1337_Bytes
  recovery_in: [local1337_Bytes!]
  recovery_not_in: [local1337_Bytes!]
  recovery_contains: local1337_Bytes
  recovery_not_contains: local1337_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: local1337_Bytes
  callback_not: local1337_Bytes
  callback_in: [local1337_Bytes!]
  callback_not_in: [local1337_Bytes!]
  callback_contains: local1337_Bytes
  callback_not_contains: local1337_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: local1337_TransferStatus
  status_not: local1337_TransferStatus
  status_in: [local1337_TransferStatus!]
  status_not_in: [local1337_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: local1337_Bytes
  transactingAsset_not: local1337_Bytes
  transactingAsset_in: [local1337_Bytes!]
  transactingAsset_not_in: [local1337_Bytes!]
  transactingAsset_contains: local1337_Bytes
  transactingAsset_not_contains: local1337_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: local1337_Bytes
  bridgedAsset_not: local1337_Bytes
  bridgedAsset_in: [local1337_Bytes!]
  bridgedAsset_not_in: [local1337_Bytes!]
  bridgedAsset_contains: local1337_Bytes
  bridgedAsset_not_contains: local1337_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  transactionHash: local1337_Bytes
  transactionHash_not: local1337_Bytes
  transactionHash_in: [local1337_Bytes!]
  transactionHash_not_in: [local1337_Bytes!]
  transactionHash_contains: local1337_Bytes
  transactionHash_not_contains: local1337_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type local1337_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: local1337_Bytes
}

input local1337_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: local1337_Bytes
  relayer_not: local1337_Bytes
  relayer_in: [local1337_Bytes!]
  relayer_not_in: [local1337_Bytes!]
  relayer_contains: local1337_Bytes
  relayer_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Relayer_orderBy {
  id
  isActive
  relayer
}

type local1337_Router {
  id: ID!
  isActive: Boolean!
  owner: local1337_Bytes
  recipient: local1337_Bytes
  proposedOwner: local1337_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: local1337_AssetBalance_orderBy, orderDirection: local1337_OrderDirection, where: local1337_AssetBalance_filter): [local1337_AssetBalance!]!
}

input local1337_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: local1337_Bytes
  owner_not: local1337_Bytes
  owner_in: [local1337_Bytes!]
  owner_not_in: [local1337_Bytes!]
  owner_contains: local1337_Bytes
  owner_not_contains: local1337_Bytes
  recipient: local1337_Bytes
  recipient_not: local1337_Bytes
  recipient_in: [local1337_Bytes!]
  recipient_not_in: [local1337_Bytes!]
  recipient_contains: local1337_Bytes
  recipient_not_contains: local1337_Bytes
  proposedOwner: local1337_Bytes
  proposedOwner_not: local1337_Bytes
  proposedOwner_in: [local1337_Bytes!]
  proposedOwner_not_in: [local1337_Bytes!]
  proposedOwner_contains: local1337_Bytes
  proposedOwner_not_contains: local1337_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: local1337_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type local1337_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: local1337_Bytes!
}

input local1337_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type local1337_SponsorVault {
  id: ID!
  sponsorVault: local1337_Bytes!
}

input local1337_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: local1337_Bytes
  sponsorVault_not: local1337_Bytes
  sponsorVault_in: [local1337_Bytes!]
  sponsorVault_not_in: [local1337_Bytes!]
  sponsorVault_contains: local1337_Bytes
  sponsorVault_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_SponsorVault_orderBy {
  id
  sponsorVault
}

type local1337_StableSwap {
  id: ID!
  canonicalId: local1337_Bytes!
  domain: BigInt
  swapPool: local1337_Bytes!
}

input local1337_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: local1337_Bytes
  swapPool_not: local1337_Bytes
  swapPool_in: [local1337_Bytes!]
  swapPool_not_in: [local1337_Bytes!]
  swapPool_contains: local1337_Bytes
  swapPool_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum local1337_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type local1337__Block_ {
  """The hash of the block"""
  hash: local1337_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type local1337__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: local1337__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type local1338_Asset {
  id: ID!
  local: local1338_Bytes!
  adoptedAsset: local1338_Bytes!
  canonicalId: local1338_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type local1338_AssetBalance {
  id: ID!
  amount: BigInt!
  router: local1338_Router!
  asset: local1338_Asset!
}

input local1338_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: local1338_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: local1338_Asset_filter
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input local1338_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: local1338_Bytes
  local_not: local1338_Bytes
  local_in: [local1338_Bytes!]
  local_not_in: [local1338_Bytes!]
  local_contains: local1338_Bytes
  local_not_contains: local1338_Bytes
  adoptedAsset: local1338_Bytes
  adoptedAsset_not: local1338_Bytes
  adoptedAsset_in: [local1338_Bytes!]
  adoptedAsset_not_in: [local1338_Bytes!]
  adoptedAsset_contains: local1338_Bytes
  adoptedAsset_not_contains: local1338_Bytes
  canonicalId: local1338_Bytes
  canonicalId_not: local1338_Bytes
  canonicalId_in: [local1338_Bytes!]
  canonicalId_not_in: [local1338_Bytes!]
  canonicalId_contains: local1338_Bytes
  canonicalId_not_contains: local1338_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar local1338_BigDecimal

input local1338_BlockChangedFilter {
  number_gte: Int!
}

input local1338_Block_height {
  hash: local1338_Bytes
  number: Int
  number_gte: Int
}

scalar local1338_Bytes

type local1338_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1338_Bytes
  nonce: BigInt
  to: local1338_Bytes
  callData: local1338_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1338_Bytes
  recovery: local1338_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1338_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1338_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: local1338_Router_orderBy, orderDirection: local1338_OrderDirection, where: local1338_Router_filter): [local1338_Router!]
  originSender: local1338_Bytes
  transactingAsset: local1338_Bytes
  transactingAmount: BigInt
  localAsset: local1338_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: local1338_Bytes
  executedTransactionHash: local1338_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: local1338_Bytes
  reconciledTransactionHash: local1338_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input local1338_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1338_Bytes
  transferId_not: local1338_Bytes
  transferId_in: [local1338_Bytes!]
  transferId_not_in: [local1338_Bytes!]
  transferId_contains: local1338_Bytes
  transferId_not_contains: local1338_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: local1338_Bytes
  to_not: local1338_Bytes
  to_in: [local1338_Bytes!]
  to_not_in: [local1338_Bytes!]
  to_contains: local1338_Bytes
  to_not_contains: local1338_Bytes
  callData: local1338_Bytes
  callData_not: local1338_Bytes
  callData_in: [local1338_Bytes!]
  callData_not_in: [local1338_Bytes!]
  callData_contains: local1338_Bytes
  callData_not_contains: local1338_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: local1338_Bytes
  agent_not: local1338_Bytes
  agent_in: [local1338_Bytes!]
  agent_not_in: [local1338_Bytes!]
  agent_contains: local1338_Bytes
  agent_not_contains: local1338_Bytes
  recovery: local1338_Bytes
  recovery_not: local1338_Bytes
  recovery_in: [local1338_Bytes!]
  recovery_not_in: [local1338_Bytes!]
  recovery_contains: local1338_Bytes
  recovery_not_contains: local1338_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: local1338_Bytes
  callback_not: local1338_Bytes
  callback_in: [local1338_Bytes!]
  callback_not_in: [local1338_Bytes!]
  callback_contains: local1338_Bytes
  callback_not_contains: local1338_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: local1338_TransferStatus
  status_not: local1338_TransferStatus
  status_in: [local1338_TransferStatus!]
  status_not_in: [local1338_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: local1338_Router_filter
  originSender: local1338_Bytes
  originSender_not: local1338_Bytes
  originSender_in: [local1338_Bytes!]
  originSender_not_in: [local1338_Bytes!]
  originSender_contains: local1338_Bytes
  originSender_not_contains: local1338_Bytes
  transactingAsset: local1338_Bytes
  transactingAsset_not: local1338_Bytes
  transactingAsset_in: [local1338_Bytes!]
  transactingAsset_not_in: [local1338_Bytes!]
  transactingAsset_contains: local1338_Bytes
  transactingAsset_not_contains: local1338_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: local1338_Bytes
  localAsset_not: local1338_Bytes
  localAsset_in: [local1338_Bytes!]
  localAsset_not_in: [local1338_Bytes!]
  localAsset_contains: local1338_Bytes
  localAsset_not_contains: local1338_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: local1338_Bytes
  executedCaller_not: local1338_Bytes
  executedCaller_in: [local1338_Bytes!]
  executedCaller_not_in: [local1338_Bytes!]
  executedCaller_contains: local1338_Bytes
  executedCaller_not_contains: local1338_Bytes
  executedTransactionHash: local1338_Bytes
  executedTransactionHash_not: local1338_Bytes
  executedTransactionHash_in: [local1338_Bytes!]
  executedTransactionHash_not_in: [local1338_Bytes!]
  executedTransactionHash_contains: local1338_Bytes
  executedTransactionHash_not_contains: local1338_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: local1338_Bytes
  reconciledCaller_not: local1338_Bytes
  reconciledCaller_in: [local1338_Bytes!]
  reconciledCaller_not_in: [local1338_Bytes!]
  reconciledCaller_contains: local1338_Bytes
  reconciledCaller_not_contains: local1338_Bytes
  reconciledTransactionHash: local1338_Bytes
  reconciledTransactionHash_not: local1338_Bytes
  reconciledTransactionHash_in: [local1338_Bytes!]
  reconciledTransactionHash_not_in: [local1338_Bytes!]
  reconciledTransactionHash_contains: local1338_Bytes
  reconciledTransactionHash_not_contains: local1338_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum local1338_OrderDirection {
  asc
  desc
}

type local1338_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1338_Bytes
  nonce: BigInt
  to: local1338_Bytes
  callData: local1338_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1338_Bytes
  recovery: local1338_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1338_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1338_TransferStatus
  originMinOut: BigInt
  transactingAsset: local1338_Bytes
  transactingAmount: BigInt
  bridgedAsset: local1338_Bytes
  bridgedAmount: BigInt
  caller: local1338_Bytes
  transactionHash: local1338_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input local1338_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1338_Bytes
  transferId_not: local1338_Bytes
  transferId_in: [local1338_Bytes!]
  transferId_not_in: [local1338_Bytes!]
  transferId_contains: local1338_Bytes
  transferId_not_contains: local1338_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: local1338_Bytes
  to_not: local1338_Bytes
  to_in: [local1338_Bytes!]
  to_not_in: [local1338_Bytes!]
  to_contains: local1338_Bytes
  to_not_contains: local1338_Bytes
  callData: local1338_Bytes
  callData_not: local1338_Bytes
  callData_in: [local1338_Bytes!]
  callData_not_in: [local1338_Bytes!]
  callData_contains: local1338_Bytes
  callData_not_contains: local1338_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: local1338_Bytes
  agent_not: local1338_Bytes
  agent_in: [local1338_Bytes!]
  agent_not_in: [local1338_Bytes!]
  agent_contains: local1338_Bytes
  agent_not_contains: local1338_Bytes
  recovery: local1338_Bytes
  recovery_not: local1338_Bytes
  recovery_in: [local1338_Bytes!]
  recovery_not_in: [local1338_Bytes!]
  recovery_contains: local1338_Bytes
  recovery_not_contains: local1338_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: local1338_Bytes
  callback_not: local1338_Bytes
  callback_in: [local1338_Bytes!]
  callback_not_in: [local1338_Bytes!]
  callback_contains: local1338_Bytes
  callback_not_contains: local1338_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: local1338_TransferStatus
  status_not: local1338_TransferStatus
  status_in: [local1338_TransferStatus!]
  status_not_in: [local1338_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: local1338_Bytes
  transactingAsset_not: local1338_Bytes
  transactingAsset_in: [local1338_Bytes!]
  transactingAsset_not_in: [local1338_Bytes!]
  transactingAsset_contains: local1338_Bytes
  transactingAsset_not_contains: local1338_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: local1338_Bytes
  bridgedAsset_not: local1338_Bytes
  bridgedAsset_in: [local1338_Bytes!]
  bridgedAsset_not_in: [local1338_Bytes!]
  bridgedAsset_contains: local1338_Bytes
  bridgedAsset_not_contains: local1338_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: local1338_Bytes
  caller_not: local1338_Bytes
  caller_in: [local1338_Bytes!]
  caller_not_in: [local1338_Bytes!]
  caller_contains: local1338_Bytes
  caller_not_contains: local1338_Bytes
  transactionHash: local1338_Bytes
  transactionHash_not: local1338_Bytes
  transactionHash_in: [local1338_Bytes!]
  transactionHash_not_in: [local1338_Bytes!]
  transactionHash_contains: local1338_Bytes
  transactionHash_not_contains: local1338_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type local1338_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: local1338_Bytes
}

input local1338_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: local1338_Bytes
  relayer_not: local1338_Bytes
  relayer_in: [local1338_Bytes!]
  relayer_not_in: [local1338_Bytes!]
  relayer_contains: local1338_Bytes
  relayer_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Relayer_orderBy {
  id
  isActive
  relayer
}

type local1338_Router {
  id: ID!
  isActive: Boolean!
  owner: local1338_Bytes
  recipient: local1338_Bytes
  proposedOwner: local1338_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: local1338_AssetBalance_orderBy, orderDirection: local1338_OrderDirection, where: local1338_AssetBalance_filter): [local1338_AssetBalance!]!
}

input local1338_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: local1338_Bytes
  owner_not: local1338_Bytes
  owner_in: [local1338_Bytes!]
  owner_not_in: [local1338_Bytes!]
  owner_contains: local1338_Bytes
  owner_not_contains: local1338_Bytes
  recipient: local1338_Bytes
  recipient_not: local1338_Bytes
  recipient_in: [local1338_Bytes!]
  recipient_not_in: [local1338_Bytes!]
  recipient_contains: local1338_Bytes
  recipient_not_contains: local1338_Bytes
  proposedOwner: local1338_Bytes
  proposedOwner_not: local1338_Bytes
  proposedOwner_in: [local1338_Bytes!]
  proposedOwner_not_in: [local1338_Bytes!]
  proposedOwner_contains: local1338_Bytes
  proposedOwner_not_contains: local1338_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: local1338_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type local1338_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: local1338_Bytes!
}

input local1338_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: local1338_Bytes
  caller_not: local1338_Bytes
  caller_in: [local1338_Bytes!]
  caller_not_in: [local1338_Bytes!]
  caller_contains: local1338_Bytes
  caller_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type local1338_SponsorVault {
  id: ID!
  sponsorVault: local1338_Bytes!
}

input local1338_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: local1338_Bytes
  sponsorVault_not: local1338_Bytes
  sponsorVault_in: [local1338_Bytes!]
  sponsorVault_not_in: [local1338_Bytes!]
  sponsorVault_contains: local1338_Bytes
  sponsorVault_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_SponsorVault_orderBy {
  id
  sponsorVault
}

type local1338_StableSwap {
  id: ID!
  canonicalId: local1338_Bytes!
  domain: BigInt
  swapPool: local1338_Bytes!
}

input local1338_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: local1338_Bytes
  canonicalId_not: local1338_Bytes
  canonicalId_in: [local1338_Bytes!]
  canonicalId_not_in: [local1338_Bytes!]
  canonicalId_contains: local1338_Bytes
  canonicalId_not_contains: local1338_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: local1338_Bytes
  swapPool_not: local1338_Bytes
  swapPool_in: [local1338_Bytes!]
  swapPool_not_in: [local1338_Bytes!]
  swapPool_contains: local1338_Bytes
  swapPool_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum local1338_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type local1338__Block_ {
  """The hash of the block"""
  hash: local1338_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type local1338__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: local1338__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type stagingoptimismgoerli_Asset {
  id: ID!
  key: stagingoptimismgoerli_Bytes
  local: stagingoptimismgoerli_Bytes!
  adoptedAsset: stagingoptimismgoerli_Bytes!
  canonicalId: stagingoptimismgoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type stagingoptimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingoptimismgoerli_Router!
  asset: stagingoptimismgoerli_Asset!
}

input stagingoptimismgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: stagingoptimismgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingoptimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input stagingoptimismgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: stagingoptimismgoerli_Bytes
  key_not: stagingoptimismgoerli_Bytes
  key_in: [stagingoptimismgoerli_Bytes!]
  key_not_in: [stagingoptimismgoerli_Bytes!]
  key_contains: stagingoptimismgoerli_Bytes
  key_not_contains: stagingoptimismgoerli_Bytes
  local: stagingoptimismgoerli_Bytes
  local_not: stagingoptimismgoerli_Bytes
  local_in: [stagingoptimismgoerli_Bytes!]
  local_not_in: [stagingoptimismgoerli_Bytes!]
  local_contains: stagingoptimismgoerli_Bytes
  local_not_contains: stagingoptimismgoerli_Bytes
  adoptedAsset: stagingoptimismgoerli_Bytes
  adoptedAsset_not: stagingoptimismgoerli_Bytes
  adoptedAsset_in: [stagingoptimismgoerli_Bytes!]
  adoptedAsset_not_in: [stagingoptimismgoerli_Bytes!]
  adoptedAsset_contains: stagingoptimismgoerli_Bytes
  adoptedAsset_not_contains: stagingoptimismgoerli_Bytes
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar stagingoptimismgoerli_BigDecimal

input stagingoptimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input stagingoptimismgoerli_Block_height {
  hash: stagingoptimismgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar stagingoptimismgoerli_Bytes

type stagingoptimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingoptimismgoerli_Bytes
  nonce: BigInt
  to: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: stagingoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: stagingoptimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_Router_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_Router_filter): [stagingoptimismgoerli_Router!]
  originSender: stagingoptimismgoerli_Bytes
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAmount: BigInt
  localAsset: stagingoptimismgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: stagingoptimismgoerli_Bytes
  executedTransactionHash: stagingoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: stagingoptimismgoerli_Bytes
  reconciledTransactionHash: stagingoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input stagingoptimismgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: stagingoptimismgoerli_Bytes
  to_not: stagingoptimismgoerli_Bytes
  to_in: [stagingoptimismgoerli_Bytes!]
  to_not_in: [stagingoptimismgoerli_Bytes!]
  to_contains: stagingoptimismgoerli_Bytes
  to_not_contains: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  callData_not: stagingoptimismgoerli_Bytes
  callData_in: [stagingoptimismgoerli_Bytes!]
  callData_not_in: [stagingoptimismgoerli_Bytes!]
  callData_contains: stagingoptimismgoerli_Bytes
  callData_not_contains: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: stagingoptimismgoerli_Bytes
  agent_not: stagingoptimismgoerli_Bytes
  agent_in: [stagingoptimismgoerli_Bytes!]
  agent_not_in: [stagingoptimismgoerli_Bytes!]
  agent_contains: stagingoptimismgoerli_Bytes
  agent_not_contains: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  recovery_not: stagingoptimismgoerli_Bytes
  recovery_in: [stagingoptimismgoerli_Bytes!]
  recovery_not_in: [stagingoptimismgoerli_Bytes!]
  recovery_contains: stagingoptimismgoerli_Bytes
  recovery_not_contains: stagingoptimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: stagingoptimismgoerli_Bytes
  callback_not: stagingoptimismgoerli_Bytes
  callback_in: [stagingoptimismgoerli_Bytes!]
  callback_not_in: [stagingoptimismgoerli_Bytes!]
  callback_contains: stagingoptimismgoerli_Bytes
  callback_not_contains: stagingoptimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: stagingoptimismgoerli_TransferStatus
  status_not: stagingoptimismgoerli_TransferStatus
  status_in: [stagingoptimismgoerli_TransferStatus!]
  status_not_in: [stagingoptimismgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: stagingoptimismgoerli_Router_filter
  originSender: stagingoptimismgoerli_Bytes
  originSender_not: stagingoptimismgoerli_Bytes
  originSender_in: [stagingoptimismgoerli_Bytes!]
  originSender_not_in: [stagingoptimismgoerli_Bytes!]
  originSender_contains: stagingoptimismgoerli_Bytes
  originSender_not_contains: stagingoptimismgoerli_Bytes
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAsset_not: stagingoptimismgoerli_Bytes
  transactingAsset_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_not_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_contains: stagingoptimismgoerli_Bytes
  transactingAsset_not_contains: stagingoptimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: stagingoptimismgoerli_Bytes
  localAsset_not: stagingoptimismgoerli_Bytes
  localAsset_in: [stagingoptimismgoerli_Bytes!]
  localAsset_not_in: [stagingoptimismgoerli_Bytes!]
  localAsset_contains: stagingoptimismgoerli_Bytes
  localAsset_not_contains: stagingoptimismgoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: stagingoptimismgoerli_Bytes
  executedCaller_not: stagingoptimismgoerli_Bytes
  executedCaller_in: [stagingoptimismgoerli_Bytes!]
  executedCaller_not_in: [stagingoptimismgoerli_Bytes!]
  executedCaller_contains: stagingoptimismgoerli_Bytes
  executedCaller_not_contains: stagingoptimismgoerli_Bytes
  executedTransactionHash: stagingoptimismgoerli_Bytes
  executedTransactionHash_not: stagingoptimismgoerli_Bytes
  executedTransactionHash_in: [stagingoptimismgoerli_Bytes!]
  executedTransactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  executedTransactionHash_contains: stagingoptimismgoerli_Bytes
  executedTransactionHash_not_contains: stagingoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: stagingoptimismgoerli_Bytes
  reconciledCaller_not: stagingoptimismgoerli_Bytes
  reconciledCaller_in: [stagingoptimismgoerli_Bytes!]
  reconciledCaller_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledCaller_contains: stagingoptimismgoerli_Bytes
  reconciledCaller_not_contains: stagingoptimismgoerli_Bytes
  reconciledTransactionHash: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_not: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_in: [stagingoptimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledTransactionHash_contains: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_not_contains: stagingoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum stagingoptimismgoerli_OrderDirection {
  asc
  desc
}

type stagingoptimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingoptimismgoerli_Bytes
  nonce: BigInt
  to: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: stagingoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: stagingoptimismgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: stagingoptimismgoerli_Bytes
  bridgedAmount: BigInt
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingoptimismgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: stagingoptimismgoerli_Bytes
  to_not: stagingoptimismgoerli_Bytes
  to_in: [stagingoptimismgoerli_Bytes!]
  to_not_in: [stagingoptimismgoerli_Bytes!]
  to_contains: stagingoptimismgoerli_Bytes
  to_not_contains: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  callData_not: stagingoptimismgoerli_Bytes
  callData_in: [stagingoptimismgoerli_Bytes!]
  callData_not_in: [stagingoptimismgoerli_Bytes!]
  callData_contains: stagingoptimismgoerli_Bytes
  callData_not_contains: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: stagingoptimismgoerli_Bytes
  agent_not: stagingoptimismgoerli_Bytes
  agent_in: [stagingoptimismgoerli_Bytes!]
  agent_not_in: [stagingoptimismgoerli_Bytes!]
  agent_contains: stagingoptimismgoerli_Bytes
  agent_not_contains: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  recovery_not: stagingoptimismgoerli_Bytes
  recovery_in: [stagingoptimismgoerli_Bytes!]
  recovery_not_in: [stagingoptimismgoerli_Bytes!]
  recovery_contains: stagingoptimismgoerli_Bytes
  recovery_not_contains: stagingoptimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: stagingoptimismgoerli_Bytes
  callback_not: stagingoptimismgoerli_Bytes
  callback_in: [stagingoptimismgoerli_Bytes!]
  callback_not_in: [stagingoptimismgoerli_Bytes!]
  callback_contains: stagingoptimismgoerli_Bytes
  callback_not_contains: stagingoptimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: stagingoptimismgoerli_TransferStatus
  status_not: stagingoptimismgoerli_TransferStatus
  status_in: [stagingoptimismgoerli_TransferStatus!]
  status_not_in: [stagingoptimismgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAsset_not: stagingoptimismgoerli_Bytes
  transactingAsset_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_not_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_contains: stagingoptimismgoerli_Bytes
  transactingAsset_not_contains: stagingoptimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: stagingoptimismgoerli_Bytes
  bridgedAsset_not: stagingoptimismgoerli_Bytes
  bridgedAsset_in: [stagingoptimismgoerli_Bytes!]
  bridgedAsset_not_in: [stagingoptimismgoerli_Bytes!]
  bridgedAsset_contains: stagingoptimismgoerli_Bytes
  bridgedAsset_not_contains: stagingoptimismgoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingoptimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: stagingoptimismgoerli_Bytes
  relayer_not: stagingoptimismgoerli_Bytes
  relayer_in: [stagingoptimismgoerli_Bytes!]
  relayer_not_in: [stagingoptimismgoerli_Bytes!]
  relayer_contains: stagingoptimismgoerli_Bytes
  relayer_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type stagingoptimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingoptimismgoerli_Bytes
  recipient: stagingoptimismgoerli_Bytes
  proposedOwner: stagingoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_AssetBalance_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_AssetBalance_filter): [stagingoptimismgoerli_AssetBalance!]!
}

input stagingoptimismgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: stagingoptimismgoerli_Bytes
  owner_not: stagingoptimismgoerli_Bytes
  owner_in: [stagingoptimismgoerli_Bytes!]
  owner_not_in: [stagingoptimismgoerli_Bytes!]
  owner_contains: stagingoptimismgoerli_Bytes
  owner_not_contains: stagingoptimismgoerli_Bytes
  recipient: stagingoptimismgoerli_Bytes
  recipient_not: stagingoptimismgoerli_Bytes
  recipient_in: [stagingoptimismgoerli_Bytes!]
  recipient_not_in: [stagingoptimismgoerli_Bytes!]
  recipient_contains: stagingoptimismgoerli_Bytes
  recipient_not_contains: stagingoptimismgoerli_Bytes
  proposedOwner: stagingoptimismgoerli_Bytes
  proposedOwner_not: stagingoptimismgoerli_Bytes
  proposedOwner_in: [stagingoptimismgoerli_Bytes!]
  proposedOwner_not_in: [stagingoptimismgoerli_Bytes!]
  proposedOwner_contains: stagingoptimismgoerli_Bytes
  proposedOwner_not_contains: stagingoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: stagingoptimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type stagingoptimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type stagingoptimismgoerli_SponsorVault {
  id: ID!
  sponsorVault: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: stagingoptimismgoerli_Bytes
  sponsorVault_not: stagingoptimismgoerli_Bytes
  sponsorVault_in: [stagingoptimismgoerli_Bytes!]
  sponsorVault_not_in: [stagingoptimismgoerli_Bytes!]
  sponsorVault_contains: stagingoptimismgoerli_Bytes
  sponsorVault_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type stagingoptimismgoerli_StableSwap {
  id: ID!
  canonicalId: stagingoptimismgoerli_Bytes!
  domain: BigInt
  swapPool: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: stagingoptimismgoerli_Bytes
  swapPool_not: stagingoptimismgoerli_Bytes
  swapPool_in: [stagingoptimismgoerli_Bytes!]
  swapPool_not_in: [stagingoptimismgoerli_Bytes!]
  swapPool_contains: stagingoptimismgoerli_Bytes
  swapPool_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum stagingoptimismgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type stagingoptimismgoerli__Block_ {
  """The hash of the block"""
  hash: stagingoptimismgoerli_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type stagingoptimismgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: stagingoptimismgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type testoptimismgoerli_Asset {
  id: ID!
  local: testoptimismgoerli_Bytes!
  adoptedAsset: testoptimismgoerli_Bytes!
  canonicalId: testoptimismgoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type testoptimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testoptimismgoerli_Router!
  asset: testoptimismgoerli_Asset!
}

input testoptimismgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: testoptimismgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: testoptimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input testoptimismgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: testoptimismgoerli_Bytes
  local_not: testoptimismgoerli_Bytes
  local_in: [testoptimismgoerli_Bytes!]
  local_not_in: [testoptimismgoerli_Bytes!]
  local_contains: testoptimismgoerli_Bytes
  local_not_contains: testoptimismgoerli_Bytes
  adoptedAsset: testoptimismgoerli_Bytes
  adoptedAsset_not: testoptimismgoerli_Bytes
  adoptedAsset_in: [testoptimismgoerli_Bytes!]
  adoptedAsset_not_in: [testoptimismgoerli_Bytes!]
  adoptedAsset_contains: testoptimismgoerli_Bytes
  adoptedAsset_not_contains: testoptimismgoerli_Bytes
  canonicalId: testoptimismgoerli_Bytes
  canonicalId_not: testoptimismgoerli_Bytes
  canonicalId_in: [testoptimismgoerli_Bytes!]
  canonicalId_not_in: [testoptimismgoerli_Bytes!]
  canonicalId_contains: testoptimismgoerli_Bytes
  canonicalId_not_contains: testoptimismgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar testoptimismgoerli_BigDecimal

input testoptimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testoptimismgoerli_Block_height {
  hash: testoptimismgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar testoptimismgoerli_Bytes

type testoptimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimismgoerli_Bytes
  nonce: BigInt
  to: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testoptimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testoptimismgoerli_Router_orderBy, orderDirection: testoptimismgoerli_OrderDirection, where: testoptimismgoerli_Router_filter): [testoptimismgoerli_Router!]
  originSender: testoptimismgoerli_Bytes
  transactingAsset: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  localAsset: testoptimismgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: testoptimismgoerli_Bytes
  executedTransactionHash: testoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: testoptimismgoerli_Bytes
  reconciledTransactionHash: testoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input testoptimismgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testoptimismgoerli_Bytes
  transferId_not: testoptimismgoerli_Bytes
  transferId_in: [testoptimismgoerli_Bytes!]
  transferId_not_in: [testoptimismgoerli_Bytes!]
  transferId_contains: testoptimismgoerli_Bytes
  transferId_not_contains: testoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testoptimismgoerli_Bytes
  to_not: testoptimismgoerli_Bytes
  to_in: [testoptimismgoerli_Bytes!]
  to_not_in: [testoptimismgoerli_Bytes!]
  to_contains: testoptimismgoerli_Bytes
  to_not_contains: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  callData_not: testoptimismgoerli_Bytes
  callData_in: [testoptimismgoerli_Bytes!]
  callData_not_in: [testoptimismgoerli_Bytes!]
  callData_contains: testoptimismgoerli_Bytes
  callData_not_contains: testoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testoptimismgoerli_Bytes
  agent_not: testoptimismgoerli_Bytes
  agent_in: [testoptimismgoerli_Bytes!]
  agent_not_in: [testoptimismgoerli_Bytes!]
  agent_contains: testoptimismgoerli_Bytes
  agent_not_contains: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  recovery_not: testoptimismgoerli_Bytes
  recovery_in: [testoptimismgoerli_Bytes!]
  recovery_not_in: [testoptimismgoerli_Bytes!]
  recovery_contains: testoptimismgoerli_Bytes
  recovery_not_contains: testoptimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testoptimismgoerli_Bytes
  callback_not: testoptimismgoerli_Bytes
  callback_in: [testoptimismgoerli_Bytes!]
  callback_not_in: [testoptimismgoerli_Bytes!]
  callback_contains: testoptimismgoerli_Bytes
  callback_not_contains: testoptimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testoptimismgoerli_TransferStatus
  status_not: testoptimismgoerli_TransferStatus
  status_in: [testoptimismgoerli_TransferStatus!]
  status_not_in: [testoptimismgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: testoptimismgoerli_Router_filter
  originSender: testoptimismgoerli_Bytes
  originSender_not: testoptimismgoerli_Bytes
  originSender_in: [testoptimismgoerli_Bytes!]
  originSender_not_in: [testoptimismgoerli_Bytes!]
  originSender_contains: testoptimismgoerli_Bytes
  originSender_not_contains: testoptimismgoerli_Bytes
  transactingAsset: testoptimismgoerli_Bytes
  transactingAsset_not: testoptimismgoerli_Bytes
  transactingAsset_in: [testoptimismgoerli_Bytes!]
  transactingAsset_not_in: [testoptimismgoerli_Bytes!]
  transactingAsset_contains: testoptimismgoerli_Bytes
  transactingAsset_not_contains: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: testoptimismgoerli_Bytes
  localAsset_not: testoptimismgoerli_Bytes
  localAsset_in: [testoptimismgoerli_Bytes!]
  localAsset_not_in: [testoptimismgoerli_Bytes!]
  localAsset_contains: testoptimismgoerli_Bytes
  localAsset_not_contains: testoptimismgoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: testoptimismgoerli_Bytes
  executedCaller_not: testoptimismgoerli_Bytes
  executedCaller_in: [testoptimismgoerli_Bytes!]
  executedCaller_not_in: [testoptimismgoerli_Bytes!]
  executedCaller_contains: testoptimismgoerli_Bytes
  executedCaller_not_contains: testoptimismgoerli_Bytes
  executedTransactionHash: testoptimismgoerli_Bytes
  executedTransactionHash_not: testoptimismgoerli_Bytes
  executedTransactionHash_in: [testoptimismgoerli_Bytes!]
  executedTransactionHash_not_in: [testoptimismgoerli_Bytes!]
  executedTransactionHash_contains: testoptimismgoerli_Bytes
  executedTransactionHash_not_contains: testoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: testoptimismgoerli_Bytes
  reconciledCaller_not: testoptimismgoerli_Bytes
  reconciledCaller_in: [testoptimismgoerli_Bytes!]
  reconciledCaller_not_in: [testoptimismgoerli_Bytes!]
  reconciledCaller_contains: testoptimismgoerli_Bytes
  reconciledCaller_not_contains: testoptimismgoerli_Bytes
  reconciledTransactionHash: testoptimismgoerli_Bytes
  reconciledTransactionHash_not: testoptimismgoerli_Bytes
  reconciledTransactionHash_in: [testoptimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [testoptimismgoerli_Bytes!]
  reconciledTransactionHash_contains: testoptimismgoerli_Bytes
  reconciledTransactionHash_not_contains: testoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum testoptimismgoerli_OrderDirection {
  asc
  desc
}

type testoptimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimismgoerli_Bytes
  nonce: BigInt
  to: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testoptimismgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: testoptimismgoerli_Bytes
  bridgedAmount: BigInt
  caller: testoptimismgoerli_Bytes
  transactionHash: testoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input testoptimismgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testoptimismgoerli_Bytes
  transferId_not: testoptimismgoerli_Bytes
  transferId_in: [testoptimismgoerli_Bytes!]
  transferId_not_in: [testoptimismgoerli_Bytes!]
  transferId_contains: testoptimismgoerli_Bytes
  transferId_not_contains: testoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testoptimismgoerli_Bytes
  to_not: testoptimismgoerli_Bytes
  to_in: [testoptimismgoerli_Bytes!]
  to_not_in: [testoptimismgoerli_Bytes!]
  to_contains: testoptimismgoerli_Bytes
  to_not_contains: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  callData_not: testoptimismgoerli_Bytes
  callData_in: [testoptimismgoerli_Bytes!]
  callData_not_in: [testoptimismgoerli_Bytes!]
  callData_contains: testoptimismgoerli_Bytes
  callData_not_contains: testoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testoptimismgoerli_Bytes
  agent_not: testoptimismgoerli_Bytes
  agent_in: [testoptimismgoerli_Bytes!]
  agent_not_in: [testoptimismgoerli_Bytes!]
  agent_contains: testoptimismgoerli_Bytes
  agent_not_contains: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  recovery_not: testoptimismgoerli_Bytes
  recovery_in: [testoptimismgoerli_Bytes!]
  recovery_not_in: [testoptimismgoerli_Bytes!]
  recovery_contains: testoptimismgoerli_Bytes
  recovery_not_contains: testoptimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testoptimismgoerli_Bytes
  callback_not: testoptimismgoerli_Bytes
  callback_in: [testoptimismgoerli_Bytes!]
  callback_not_in: [testoptimismgoerli_Bytes!]
  callback_contains: testoptimismgoerli_Bytes
  callback_not_contains: testoptimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testoptimismgoerli_TransferStatus
  status_not: testoptimismgoerli_TransferStatus
  status_in: [testoptimismgoerli_TransferStatus!]
  status_not_in: [testoptimismgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: testoptimismgoerli_Bytes
  transactingAsset_not: testoptimismgoerli_Bytes
  transactingAsset_in: [testoptimismgoerli_Bytes!]
  transactingAsset_not_in: [testoptimismgoerli_Bytes!]
  transactingAsset_contains: testoptimismgoerli_Bytes
  transactingAsset_not_contains: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: testoptimismgoerli_Bytes
  bridgedAsset_not: testoptimismgoerli_Bytes
  bridgedAsset_in: [testoptimismgoerli_Bytes!]
  bridgedAsset_not_in: [testoptimismgoerli_Bytes!]
  bridgedAsset_contains: testoptimismgoerli_Bytes
  bridgedAsset_not_contains: testoptimismgoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: testoptimismgoerli_Bytes
  caller_not: testoptimismgoerli_Bytes
  caller_in: [testoptimismgoerli_Bytes!]
  caller_not_in: [testoptimismgoerli_Bytes!]
  caller_contains: testoptimismgoerli_Bytes
  caller_not_contains: testoptimismgoerli_Bytes
  transactionHash: testoptimismgoerli_Bytes
  transactionHash_not: testoptimismgoerli_Bytes
  transactionHash_in: [testoptimismgoerli_Bytes!]
  transactionHash_not_in: [testoptimismgoerli_Bytes!]
  transactionHash_contains: testoptimismgoerli_Bytes
  transactionHash_not_contains: testoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type testoptimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testoptimismgoerli_Bytes
}

input testoptimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: testoptimismgoerli_Bytes
  relayer_not: testoptimismgoerli_Bytes
  relayer_in: [testoptimismgoerli_Bytes!]
  relayer_not_in: [testoptimismgoerli_Bytes!]
  relayer_contains: testoptimismgoerli_Bytes
  relayer_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type testoptimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: testoptimismgoerli_Bytes
  recipient: testoptimismgoerli_Bytes
  proposedOwner: testoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testoptimismgoerli_AssetBalance_orderBy, orderDirection: testoptimismgoerli_OrderDirection, where: testoptimismgoerli_AssetBalance_filter): [testoptimismgoerli_AssetBalance!]!
}

input testoptimismgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: testoptimismgoerli_Bytes
  owner_not: testoptimismgoerli_Bytes
  owner_in: [testoptimismgoerli_Bytes!]
  owner_not_in: [testoptimismgoerli_Bytes!]
  owner_contains: testoptimismgoerli_Bytes
  owner_not_contains: testoptimismgoerli_Bytes
  recipient: testoptimismgoerli_Bytes
  recipient_not: testoptimismgoerli_Bytes
  recipient_in: [testoptimismgoerli_Bytes!]
  recipient_not_in: [testoptimismgoerli_Bytes!]
  recipient_contains: testoptimismgoerli_Bytes
  recipient_not_contains: testoptimismgoerli_Bytes
  proposedOwner: testoptimismgoerli_Bytes
  proposedOwner_not: testoptimismgoerli_Bytes
  proposedOwner_in: [testoptimismgoerli_Bytes!]
  proposedOwner_not_in: [testoptimismgoerli_Bytes!]
  proposedOwner_contains: testoptimismgoerli_Bytes
  proposedOwner_not_contains: testoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: testoptimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type testoptimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: testoptimismgoerli_Bytes
  caller_not: testoptimismgoerli_Bytes
  caller_in: [testoptimismgoerli_Bytes!]
  caller_not_in: [testoptimismgoerli_Bytes!]
  caller_contains: testoptimismgoerli_Bytes
  caller_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type testoptimismgoerli_SponsorVault {
  id: ID!
  sponsorVault: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: testoptimismgoerli_Bytes
  sponsorVault_not: testoptimismgoerli_Bytes
  sponsorVault_in: [testoptimismgoerli_Bytes!]
  sponsorVault_not_in: [testoptimismgoerli_Bytes!]
  sponsorVault_contains: testoptimismgoerli_Bytes
  sponsorVault_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type testoptimismgoerli_StableSwap {
  id: ID!
  canonicalId: testoptimismgoerli_Bytes!
  domain: BigInt
  swapPool: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: testoptimismgoerli_Bytes
  canonicalId_not: testoptimismgoerli_Bytes
  canonicalId_in: [testoptimismgoerli_Bytes!]
  canonicalId_not_in: [testoptimismgoerli_Bytes!]
  canonicalId_contains: testoptimismgoerli_Bytes
  canonicalId_not_contains: testoptimismgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: testoptimismgoerli_Bytes
  swapPool_not: testoptimismgoerli_Bytes
  swapPool_in: [testoptimismgoerli_Bytes!]
  swapPool_not_in: [testoptimismgoerli_Bytes!]
  swapPool_contains: testoptimismgoerli_Bytes
  swapPool_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum testoptimismgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type testoptimismgoerli__Block_ {
  """The hash of the block"""
  hash: testoptimismgoerli_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type testoptimismgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: testoptimismgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type goerli_Asset {
  id: ID!
  local: goerli_Bytes!
  adoptedAsset: goerli_Bytes!
  canonicalId: goerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type goerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: goerli_Router!
  asset: goerli_Asset!
}

input goerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: goerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: goerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input goerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: goerli_Bytes
  local_not: goerli_Bytes
  local_in: [goerli_Bytes!]
  local_not_in: [goerli_Bytes!]
  local_contains: goerli_Bytes
  local_not_contains: goerli_Bytes
  adoptedAsset: goerli_Bytes
  adoptedAsset_not: goerli_Bytes
  adoptedAsset_in: [goerli_Bytes!]
  adoptedAsset_not_in: [goerli_Bytes!]
  adoptedAsset_contains: goerli_Bytes
  adoptedAsset_not_contains: goerli_Bytes
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar goerli_BigDecimal

input goerli_BlockChangedFilter {
  number_gte: Int!
}

input goerli_Block_height {
  hash: goerli_Bytes
  number: Int
  number_gte: Int
}

scalar goerli_Bytes

type goerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  to: goerli_Bytes
  callData: goerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: goerli_Bytes
  recovery: goerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: goerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  slippageTol: BigInt
  status: goerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: goerli_Router_orderBy, orderDirection: goerli_OrderDirection, where: goerli_Router_filter): [goerli_Router!]
  originSender: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAmount: BigInt
  localAsset: goerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input goerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: goerli_Bytes
  agent_not: goerli_Bytes
  agent_in: [goerli_Bytes!]
  agent_not_in: [goerli_Bytes!]
  agent_contains: goerli_Bytes
  agent_not_contains: goerli_Bytes
  recovery: goerli_Bytes
  recovery_not: goerli_Bytes
  recovery_in: [goerli_Bytes!]
  recovery_not_in: [goerli_Bytes!]
  recovery_contains: goerli_Bytes
  recovery_not_contains: goerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: goerli_Bytes
  callback_not: goerli_Bytes
  callback_in: [goerli_Bytes!]
  callback_not_in: [goerli_Bytes!]
  callback_contains: goerli_Bytes
  callback_not_contains: goerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  slippageTol: BigInt
  slippageTol_not: BigInt
  slippageTol_gt: BigInt
  slippageTol_lt: BigInt
  slippageTol_gte: BigInt
  slippageTol_lte: BigInt
  slippageTol_in: [BigInt!]
  slippageTol_not_in: [BigInt!]
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: goerli_Router_filter
  originSender: goerli_Bytes
  originSender_not: goerli_Bytes
  originSender_in: [goerli_Bytes!]
  originSender_not_in: [goerli_Bytes!]
  originSender_contains: goerli_Bytes
  originSender_not_contains: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAsset_not: goerli_Bytes
  transactingAsset_in: [goerli_Bytes!]
  transactingAsset_not_in: [goerli_Bytes!]
  transactingAsset_contains: goerli_Bytes
  transactingAsset_not_contains: goerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: goerli_Bytes
  localAsset_not: goerli_Bytes
  localAsset_in: [goerli_Bytes!]
  localAsset_not_in: [goerli_Bytes!]
  localAsset_contains: goerli_Bytes
  localAsset_not_contains: goerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: goerli_Bytes
  executedCaller_not: goerli_Bytes
  executedCaller_in: [goerli_Bytes!]
  executedCaller_not_in: [goerli_Bytes!]
  executedCaller_contains: goerli_Bytes
  executedCaller_not_contains: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTransactionHash_not: goerli_Bytes
  executedTransactionHash_in: [goerli_Bytes!]
  executedTransactionHash_not_in: [goerli_Bytes!]
  executedTransactionHash_contains: goerli_Bytes
  executedTransactionHash_not_contains: goerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: goerli_Bytes
  reconciledCaller_not: goerli_Bytes
  reconciledCaller_in: [goerli_Bytes!]
  reconciledCaller_not_in: [goerli_Bytes!]
  reconciledCaller_contains: goerli_Bytes
  reconciledCaller_not_contains: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTransactionHash_not: goerli_Bytes
  reconciledTransactionHash_in: [goerli_Bytes!]
  reconciledTransactionHash_not_in: [goerli_Bytes!]
  reconciledTransactionHash_contains: goerli_Bytes
  reconciledTransactionHash_not_contains: goerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  slippageTol
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum goerli_OrderDirection {
  asc
  desc
}

type goerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  to: goerli_Bytes
  callData: goerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: goerli_Bytes
  recovery: goerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: goerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  slippageTol: BigInt
  status: goerli_TransferStatus
  message: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: goerli_Bytes
  bridgedAmount: BigInt
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input goerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: goerli_Bytes
  agent_not: goerli_Bytes
  agent_in: [goerli_Bytes!]
  agent_not_in: [goerli_Bytes!]
  agent_contains: goerli_Bytes
  agent_not_contains: goerli_Bytes
  recovery: goerli_Bytes
  recovery_not: goerli_Bytes
  recovery_in: [goerli_Bytes!]
  recovery_not_in: [goerli_Bytes!]
  recovery_contains: goerli_Bytes
  recovery_not_contains: goerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: goerli_Bytes
  callback_not: goerli_Bytes
  callback_in: [goerli_Bytes!]
  callback_not_in: [goerli_Bytes!]
  callback_contains: goerli_Bytes
  callback_not_contains: goerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  slippageTol: BigInt
  slippageTol_not: BigInt
  slippageTol_gt: BigInt
  slippageTol_lt: BigInt
  slippageTol_gte: BigInt
  slippageTol_lte: BigInt
  slippageTol_in: [BigInt!]
  slippageTol_not_in: [BigInt!]
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
  message: goerli_Bytes
  message_not: goerli_Bytes
  message_in: [goerli_Bytes!]
  message_not_in: [goerli_Bytes!]
  message_contains: goerli_Bytes
  message_not_contains: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAsset_not: goerli_Bytes
  transactingAsset_in: [goerli_Bytes!]
  transactingAsset_not_in: [goerli_Bytes!]
  transactingAsset_contains: goerli_Bytes
  transactingAsset_not_contains: goerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: goerli_Bytes
  bridgedAsset_not: goerli_Bytes
  bridgedAsset_in: [goerli_Bytes!]
  bridgedAsset_not_in: [goerli_Bytes!]
  bridgedAsset_contains: goerli_Bytes
  bridgedAsset_not_contains: goerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  slippageTol
  status
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type goerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: goerli_Bytes
}

input goerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: goerli_Bytes
  relayer_not: goerli_Bytes
  relayer_in: [goerli_Bytes!]
  relayer_not_in: [goerli_Bytes!]
  relayer_contains: goerli_Bytes
  relayer_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type goerli_Router {
  id: ID!
  isActive: Boolean!
  owner: goerli_Bytes
  recipient: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: goerli_AssetBalance_orderBy, orderDirection: goerli_OrderDirection, where: goerli_AssetBalance_filter): [goerli_AssetBalance!]!
}

input goerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: goerli_Bytes
  owner_not: goerli_Bytes
  owner_in: [goerli_Bytes!]
  owner_not_in: [goerli_Bytes!]
  owner_contains: goerli_Bytes
  owner_not_contains: goerli_Bytes
  recipient: goerli_Bytes
  recipient_not: goerli_Bytes
  recipient_in: [goerli_Bytes!]
  recipient_not_in: [goerli_Bytes!]
  recipient_contains: goerli_Bytes
  recipient_not_contains: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedOwner_not: goerli_Bytes
  proposedOwner_in: [goerli_Bytes!]
  proposedOwner_not_in: [goerli_Bytes!]
  proposedOwner_contains: goerli_Bytes
  proposedOwner_not_contains: goerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: goerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type goerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: goerli_Bytes!
}

input goerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type goerli_SponsorVault {
  id: ID!
  sponsorVault: goerli_Bytes!
}

input goerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: goerli_Bytes
  sponsorVault_not: goerli_Bytes
  sponsorVault_in: [goerli_Bytes!]
  sponsorVault_not_in: [goerli_Bytes!]
  sponsorVault_contains: goerli_Bytes
  sponsorVault_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type goerli_StableSwap {
  id: ID!
  canonicalId: goerli_Bytes!
  domain: BigInt
  swapPool: goerli_Bytes!
}

input goerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: goerli_Bytes
  swapPool_not: goerli_Bytes
  swapPool_in: [goerli_Bytes!]
  swapPool_not_in: [goerli_Bytes!]
  swapPool_contains: goerli_Bytes
  swapPool_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum goerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type goerli__Block_ {
  """The hash of the block"""
  hash: goerli_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type goerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: goerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}