/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestAggregator,
  TestAggregatorInterface,
} from "../TestAggregator";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6000805460ff1916601217905560c0604052601960808190527f436861696e6c696e6b20546573742041676772656761746f720000000000000060a090815261004b9160019190610063565b50600160025534801561005d57600080fd5b50610137565b82805461006f906100fc565b90600052602060002090601f01602090048101928261009157600085556100d7565b82601f106100aa57805160ff19168380011785556100d7565b828001600101855582156100d7579182015b828111156100d75782518255916020019190600101906100bc565b506100e39291506100e7565b5090565b5b808211156100e357600081556001016100e8565b600181811c9082168061011057607f821691505b6020821081141561013157634e487b7160e01b600052602260045260246000fd5b50919050565b61029c806101466000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063313ce5671461005c57806354fd4d50146100805780637284e416146100975780639a6fc8f5146100ac578063feaf968c14610105575b600080fd5b6000546100699060ff1681565b60405160ff90911681526020015b60405180910390f35b61008960025481565b604051908152602001610077565b61009f610119565b60405161007791906101d8565b6100ce6100ba3660046101a7565b90670de0b6b3a76400009060009042908390565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610077565b6001670de0b6b3a7640000600042826100ce565b600180546101269061022b565b80601f01602080910402602001604051908101604052809291908181526020018280546101529061022b565b801561019f5780601f106101745761010080835404028352916020019161019f565b820191906000526020600020905b81548152906001019060200180831161018257829003601f168201915b505050505081565b6000602082840312156101b8578081fd5b813569ffffffffffffffffffff811681146101d1578182fd5b9392505050565b6000602080835283518082850152825b81811015610204578581018301518582016040015282016101e8565b818111156102155783604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061023f57607f821691505b6020821081141561026057634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122074b39c71684e84da9e2544f293afccd6d3bee9b539658bc0edb46cd03010740b64736f6c63430008040033";

export class TestAggregator__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestAggregator> {
    return super.deploy(overrides || {}) as Promise<TestAggregator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestAggregator {
    return super.attach(address) as TestAggregator;
  }
  connect(signer: Signer): TestAggregator__factory {
    return super.connect(signer) as TestAggregator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAggregatorInterface {
    return new utils.Interface(_abi) as TestAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAggregator {
    return new Contract(address, _abi, signerOrProvider) as TestAggregator;
  }
}
