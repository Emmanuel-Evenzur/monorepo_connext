/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "incrementAndSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "setShouldRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shouldRevert",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600060015534801561001557600080fd5b5060008060006101000a81548160ff021916908315150217905550610b468061003f6000396000f3fe60806040526004361061004a5760003560e01c806306661abd1461004f5780636813d7871461007a578063d09de08a146100a3578063d2eee78a146100ba578063d3072d82146100d6575b600080fd5b34801561005b57600080fd5b50610064610101565b6040516100719190610931565b60405180910390f35b34801561008657600080fd5b506100a1600480360381019061009c919061076e565b610107565b005b3480156100af57600080fd5b506100b8610123565b005b6100d460048036038101906100cf919061071f565b61018c565b005b3480156100e257600080fd5b506100eb610249565b6040516100f891906108b6565b60405180910390f35b60015481565b806000806101000a81548160ff02191690831515021790555050565b60008054906101000a900460ff1615610171576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610168906108f1565b60405180910390fd5b6001806000828254610183919061095d565b92505081905550565b6101958361025a565b156101e1578034146101dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d3906108d1565b60405180910390fd5b610231565b60003414610224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021b90610911565b60405180910390fd5b61023083333084610317565b5b610239610123565b610244838383610431565b505050565b60008054906101000a900460ff1681565b60006102887f6e4e2577b9bdd3358ded56159f045cf0a3d8612b1d34f5755684c9550098bc2660001b6104e2565b6102b47ffcfbb27411ef3a887960e5686cf746432f7bd94c274e578c29aa3db78d3ec88060001b6104e2565b6102e07fb6e13736222b16d3b9e6ef7dcbb75cf91645e1dd026ab269cd33385fd11e279f60001b6104e2565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6103437f1830ebf33c2137f74de6fde3dab989013a8db66b28c2dcc651c245f1179e537360001b6104e2565b61036f7f46367e88a8d7dbc9f74c82e91da92d5a9e58b1b1ecb1e32b28115766d550a24d60001b6104e2565b61039b7ff26d4d4d9ee09540ad28614f46c1eab6015e4126793d87abd7b256a2fd05421c60001b6104e2565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff1660e01b81526004016103d893929190610856565b602060405180830381600087803b1580156103f257600080fd5b505af1158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a9190610797565b5050505050565b61045d7f7415e13ffdd1bee2f069e903bc4ebe50c87ed70bba283dbbc27995671d8cab5760001b6104e2565b6104897fdb87f7049197ddde7331e43542f1000cc1f204488ec4585d71ba2222446f902660001b6104e2565b6104b57f4c1c92b735412e3bd9cd3184e5d37210bfed5ac2dc11c609c01459d4a3a52ff560001b6104e2565b6104be8361025a565b6104d2576104cd8383836104e5565b6104dd565b6104dc82826105fc565b5b505050565b50565b6105117f1a77d687a9b1b627875efbf7ed69bf4fb77d792f749da6d3cd8a2e5f1ac66f4c60001b6104e2565b61053d7fab27fae7ac2ae2d65e78bd8d65658cace8814d213370a05abffe93d99ef9110c60001b6104e2565b6105697f2392b1539f82b8e836b2e6971df4603acd6e98f246ea984f41f52266ec7aad5460001b6104e2565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016105a492919061088d565b602060405180830381600087803b1580156105be57600080fd5b505af11580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190610797565b50505050565b6106287f1f70c023feb50ba14fe0092b7008a1de2d2ffff340880cc5fd6a0539b4d05bb460001b6104e2565b6106547f7398dfcc09a655236e02619d315f6e6aefffeaf89a8adaf359a712d300a7f60d60001b6104e2565b6106807f9ce79fd32be76bf8678b5ddf35cbaea2234a98a45f99e8cf21609e29dd358ff060001b6104e2565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106c6573d6000803e3d6000fd5b505050565b6000813590506106da81610acb565b92915050565b6000813590506106ef81610ae2565b92915050565b60008151905061070481610ae2565b92915050565b60008135905061071981610af9565b92915050565b60008060006060848603121561073457600080fd5b6000610742868287016106cb565b9350506020610753868287016106cb565b92505060406107648682870161070a565b9150509250925092565b60006020828403121561078057600080fd5b600061078e848285016106e0565b91505092915050565b6000602082840312156107a957600080fd5b60006107b7848285016106f5565b91505092915050565b6107c9816109b3565b82525050565b6107d8816109c5565b82525050565b60006107eb60248361094c565b91506107f682610a2a565b604082019050919050565b600061080e601f8361094c565b915061081982610a79565b602082019050919050565b6000610831601e8361094c565b915061083c82610aa2565b602082019050919050565b610850816109f1565b82525050565b600060608201905061086b60008301866107c0565b61087860208301856107c0565b6108856040830184610847565b949350505050565b60006040820190506108a260008301856107c0565b6108af6020830184610847565b9392505050565b60006020820190506108cb60008301846107cf565b92915050565b600060208201905081810360008301526108ea816107de565b9050919050565b6000602082019050818103600083015261090a81610801565b9050919050565b6000602082019050818103600083015261092a81610824565b9050919050565b60006020820190506109466000830184610847565b92915050565b600082825260208201905092915050565b6000610968826109f1565b9150610973836109f1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109a8576109a76109fb565b5b828201905092915050565b60006109be826109d1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f696e6372656d656e74416e6453656e643a20494e56414c49445f4554485f414d60008201527f4f554e5400000000000000000000000000000000000000000000000000000000602082015250565b7f696e6372656d656e743a2073686f756c64526576657274206973207472756500600082015250565b7f696e6372656d656e74416e6453656e643a204554485f574954485f4552430000600082015250565b610ad4816109b3565b8114610adf57600080fd5b50565b610aeb816109c5565b8114610af657600080fd5b50565b610b02816109f1565b8114610b0d57600080fd5b5056fea26469706673582212206a6c4ea7279db9a78381f57cf4193c388f7e5f768ad752876467905cf1ad241064736f6c63430008040033";

export class Counter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(overrides || {}) as Promise<Counter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
