/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PercentageMath,
  PercentageMathInterface,
} from "../PercentageMath";

const _abi = [
  {
    inputs: [],
    name: "HALF_PERCENT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERCENTAGE_FACTOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c5610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c8063394d97fb146042578063ee01e5e714605a575b600080fd5b60486062565b60405190815260200160405180910390f35b604861271081565b606d60026127106070565b81565b600082608a57634e487b7160e01b81526012600452602481fd5b50049056fea26469706673582212208a95d658d01bc877087a75baf7f67004d49c65b2fb96fffccc13643b87bd7c5164736f6c63430008040033";

export class PercentageMath__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PercentageMath> {
    return super.deploy(overrides || {}) as Promise<PercentageMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PercentageMath {
    return super.attach(address) as PercentageMath;
  }
  connect(signer: Signer): PercentageMath__factory {
    return super.connect(signer) as PercentageMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PercentageMathInterface {
    return new utils.Interface(_abi) as PercentageMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PercentageMath {
    return new Contract(address, _abi, signerOrProvider) as PercentageMath;
  }
}
