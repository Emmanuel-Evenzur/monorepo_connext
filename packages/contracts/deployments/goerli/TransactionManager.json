{
  "address": "0xbF0F4f639cDd010F38CeBEd546783BD71c9e5Ea0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addedAssetId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "removedAssetId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addedRouter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RouterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "removedRouter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RouterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedCallData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedBid",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bidSignature",
          "type": "bytes"
        }
      ],
      "name": "TransactionPrepared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "addAssetId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "addRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedRouters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "fulfill",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "getAmountFromShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "getRouterBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interpreter",
      "outputs": [
        {
          "internalType": "contract IFulfillInterpreter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "issuedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "outstandingShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "invariantData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "encryptedCallData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "encodedBid",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "bidSignature",
          "type": "bytes"
        }
      ],
      "name": "prepare",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "removeAssetId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "removeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "variantTransactionData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa27dc1d178b31253b847ba0bf2bea74ae35978dce91814ac57dfbe6e42301d20",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0xbF0F4f639cDd010F38CeBEd546783BD71c9e5Ea0",
    "transactionIndex": 1,
    "gasUsed": "4365926",
    "logsBloom": "0x
    "blockHash": "0x036db316481ae93490df3c839cfa36bee3964e42089ab74954555d4c71b948fd",
    "transactionHash": "0xa27dc1d178b31253b847ba0bf2bea74ae35978dce91814ac57dfbe6e42301d20",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5207453,
        "transactionHash": "0xa27dc1d178b31253b847ba0bf2bea74ae35978dce91814ac57dfbe6e42301d20",
        "address": "0xbF0F4f639cDd010F38CeBEd546783BD71c9e5Ea0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054baa998771639628ffc0206c3b916c466b79c89"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x036db316481ae93490df3c839cfa36bee3964e42089ab74954555d4c71b948fd"
      }
    ],
    "blockNumber": 5207453,
    "cumulativeGasUsed": "4391759",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "5"
  ],
  "solcInputHash": "3cee2b597bf4e48fcecdc19ae67f5906",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedAssetId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAssetId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RouterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RouterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"}],\"name\":\"TransactionPrepared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"addAssetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"addRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"fulfill\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"getAmountFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"getRouterBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interpreter\",\"outputs\":[{\"internalType\":\"contract IFulfillInterpreter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"issuedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"outstandingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"invariantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"}],\"name\":\"prepare\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"removeAssetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"removeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"variantTransactionData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Connext <support@connext.network>\",\"kind\":\"dev\",\"methods\":{\"addAssetId(address)\":{\"params\":{\"assetId\":\"AssetId to add\"}},\"addLiquidity(uint256,address,address)\":{\"params\":{\"amount\":\"The amount of liquidity to add for the router\",\"assetId\":\"The address (or `address(0)` if native asset) of the                asset you're adding liquidity for\",\"router\":\"The router you are adding liquidity on behalf of\"}},\"addRouter(address)\":{\"params\":{\"router\":\"Router address to add\"}},\"cancel((address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes)\":{\"params\":{\"relayerFee\":\"The fee that should go to the relayer when they are                   calling the function for the user\",\"signature\":\"The user's signature that allows a transaction to be                  cancelled by a relayer\",\"txData\":\"All of the data (invariant and variant) for a crosschain               transaction. The variant data provided is checked against               what was stored when the `prepare` function was called.\"}},\"fulfill((address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes)\":{\"params\":{\"callData\":\"The calldata to be sent to and executed by the                  `FulfillHelper`\",\"relayerFee\":\"The fee that should go to the relayer when they are                   calling the function on the receiving chain for the user\",\"signature\":\"The users signature on the transaction id + fee that                  can be used by the router to unlock the transaction on                   the sending chain\",\"txData\":\"All of the data (invariant and variant) for a crosschain               transaction. The variant data provided is checked against               what was stored when the `prepare` function was called.\"}},\"getAmountFromShares(address,uint256)\":{\"params\":{\"assetId\":\"Asset identifier you want amount of\",\"shares\":\"Number of shares you want converted to an amount of asset\"}},\"getRouterBalance(address,address)\":{\"params\":{\"assetId\":\"Asset for percentage\",\"router\":\"Router you want balance of\"}},\"prepare((address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes)\":{\"params\":{\"amount\":\"The amount of the transaction on this chain\",\"bidSignature\":\"The signature of the bidder on the encoded bid for                     this transaction. Only used within the function for                     event emission. The validity of the bid and                     bidSignature are enforced offchain\",\"encodedBid\":\"The encoded bid that was accepted by the user for this                   crosschain transfer. It is supplied as a param to the                   function but is only used in event emission\",\"encryptedCallData\":\"The calldata to be executed when the tx is                          fulfilled. Used in the function to allow the user                          to reconstruct the tx from events. Hash is stored                          onchain to prevent shenanigans.\",\"expiry\":\"The block.timestamp when the transaction will no longer be               fulfillable and is freely cancellable on this chain\",\"invariantData\":\"The data for a crosschain transaction that will                      not change between sending and receiving chains.                      The hash of this data is used as the key to store                       the inforamtion that does change between chains                       (amount, expiry,preparedBlock) for verification\"}},\"removeAssetId(address)\":{\"params\":{\"assetId\":\"AssetId to remove\"}},\"removeLiquidity(uint256,address,address)\":{\"params\":{\"assetId\":\"The address (or `address(0)` if native asset) of the                asset you're removing liquidity for\",\"recipient\":\"The address that will receive the liquidity being removed\",\"shares\":\"The amount of liquidity to remove for the router in shares\"}},\"removeRouter(address)\":{\"params\":{\"router\":\"Router address to remove\"}}},\"stateVariables\":{\"MAX_TIMEOUT\":{\"details\":\"Maximum timeout (will be the highest on the sending chain)\"},\"MIN_TIMEOUT\":{\"details\":\"Minimum timeout (will be the lowest on the receiving chain)\"},\"approvedAssets\":{\"details\":\"Mapping of allowed assetIds on same chain as contract\"},\"approvedRouters\":{\"details\":\"Mapping of allowed router addresses. Must be added to both      sending and receiving chains when forwarding a transfer.\"},\"chainId\":{\"details\":\"The chain id of the contract, is passed in to avoid any evm issues\"},\"interpreter\":{\"details\":\"The address of the external contract that will execute crosschain      calldata\"},\"issuedShares\":{\"details\":\"Mapping of contract depositor to shares of specific asset.      Incremented whenever funds sebt to the contract, or when a      router fulfills a transfer.\"},\"outstandingShares\":{\"details\":\"Mapping of total issued shares in contract per asset.      This is incremented any time funds are sent to the      contract, and decremented when they are sent from       the contract.\"},\"variantTransactionData\":{\"details\":\"Mapping of hash of `InvariantTransactionData` to the hash      of the `VariantTransactionData`\"}},\"title\":\"TransactionManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"addAssetId(address)\":{\"notice\":\"Used to add assets on same chain as contract that can         be transferred.\"},\"addLiquidity(uint256,address,address)\":{\"notice\":\"This is used by any router to increase their available         liquidity for a given asset.\"},\"addRouter(address)\":{\"notice\":\"Used to add routers that can transact crosschain\"},\"cancel((address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes)\":{\"notice\":\"Any crosschain transaction can be cancelled after it has been         created to prevent indefinite lock up of funds. After the         transaction has expired, anyone can cancel it. Before the         expiry, only the recipient of the funds on the given chain is         able to cancel. On the sending chain, this means only the router         is able to cancel before the expiry, while only the user can         prematurely cancel on the receiving chain.\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"fulfill((address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes)\":{\"notice\":\"This function completes a crosschain transaction. When called on         the receiving chain, the user reveals their signature on the         transactionId and is sent the amount corresponding to the number         of shares the router locked when calling `prepare`. The router          then uses this signature to unlock the corresponding funds on the          receiving chain, which are then added back to their available          liquidity. The user includes a relayer fee since it is not          assumed they will have gas on the receiving chain. This function          *must* be called before the transaction expiry has elapsed.\"},\"getAmountFromShares(address,uint256)\":{\"notice\":\"Gets an amount from a given number of shares\"},\"getRouterBalance(address,address)\":{\"notice\":\"Gets amounts from router issued shares\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"prepare((address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes)\":{\"notice\":\"This function creates a crosschain transaction. When called on         the sending chain, the user is expected to lock up funds. When         called on the receiving chain, the router deducts the transfer         amount from the available liquidity. The majority of the         information about a given transfer does not change between chains,         with three notable exceptions: `amount`, `expiry`, and          `preparedBlock`. The `amount` and `expiry` are decremented         between sending and receiving chains to provide an incentive for          the router to complete the transaction and time for the router to         fulfill the transaction on the sending chain after the unlocking         signature is revealed, respectively.\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"removeAssetId(address)\":{\"notice\":\"Used to remove assets on same chain as contract that can         be transferred.\"},\"removeLiquidity(uint256,address,address)\":{\"notice\":\"This is used by any router to decrease their available         liquidity for a given asset.\"},\"removeRouter(address)\":{\"notice\":\"Used to remove routers that can transact crosschain\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by         checking if current owner is address(0)\"}},\"notice\":\"This contract holds the logic to facilitate crosschain transactions.         Transactions go through three phases in the happy case:         1. Route Auction (offchain): User broadcasts to our network          signalling their desired route. Routers respond with sealed bids          containing commitments to fulfilling the transaction within a          certain time and price range.         2. Prepare: Once the auction is completed, the transaction can be          prepared. The user submits a transaction to `TransactionManager`          contract on sender-side chain containing router's signed bid. This          transaction locks up the users funds on the sending chain. Upon          detecting an event containing their signed bid from the chain,          router submits the same transaction to `TransactionManager` on the          receiver-side chain, and locks up a corresponding amount of          liquidity. The amount locked on the receiving chain is `sending          amount - auction fee` so the router is incentivized to complete the          transaction.         3. Fulfill: Upon detecting the `TransactionPrepared` event on the          receiver-side chain, the user signs a message and sends it to a          relayer, who will earn a fee for submission. The relayer (which may          be the router) then submits the message to the `TransactionManager`          to complete their transaction on receiver-side chain and claim the          funds locked by the router. A relayer is used here to allow users          to submit transactions with arbitrary calldata on the receiving          chain without needing gas to do so. The router then submits the          same signed message and completes transaction on sender-side,          unlocking the original `amount`.         If a transaction is not fulfilled within a fixed timeout, it          reverts and can be reclaimed by the party that called `prepare` on          each chain (initiator). Additionally, transactions can be cancelled          unilaterally by the person owed funds on that chain (router for          sending chain, user for receiving chain) prior to expiry.         NOTE on internal accounting:         To properly handle the cases where a token is rebasing/inflationary/         deflationary, we think of funds sent to the contracts as claiming         \\\"shares\\\" of the total balance of the contract, rather than tracking         raw balances. This allows routers to keep earning inflation rewards         when providing liquidity aTokens, for example. Shares are         created and issued when the contract receives funds, and burned when         the contract disburses funds. During a crosschain transaction, they         are deducted from the routers issued shares.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransactionManager.sol\":\"TransactionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"contracts/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism, \\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the \\n * modifier `onlyOwner`, which can be applied to your functions to restrict \\n * their use to the owner.\\n * \\n * @dev The majority of this code was taken from the openzeppelin Ownable \\n * contract\\n *\\n */\\nabstract contract ProposedOwnable {\\n  address private _owner;\\n\\n  address private _proposed;\\n\\n  uint256 private _proposedTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n    * @notice Initializes the contract setting the deployer as the initial \\n    * owner.\\n    */\\n  constructor() {\\n    _setOwner(msg.sender);\\n  }\\n\\n  /**\\n    * @notice Returns the address of the current owner.\\n    */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n    * @notice Returns the address of the proposed owner.\\n    */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n    * @notice Returns the address of the proposed owner.\\n    */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedTimestamp;\\n  }\\n\\n  /**\\n    * @notice Returns the delay period before a new owner can be accepted.\\n    */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n    * @notice Throws if called by any account other than the owner.\\n    */\\n  modifier onlyOwner() {\\n      require(owner() == msg.sender, \\\"#OO:029\\\");\\n      _;\\n  }\\n\\n  /**\\n    * @notice Sets the timestamp for an owner to be proposed, and sets the\\n    * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n    * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n    * Can only be called by the current owner.\\n    */\\n  function acceptProposedOwner() public virtual onlyOwner {\\n    require((block.timestamp - _proposedTimestamp) > _delay, \\\"#APO:030\\\");\\n    _setOwner(_proposed);\\n  }\\n\\n  function _setOwner(address newOwner) private {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(_proposed);\\n  }\\n}\",\"keccak256\":\"0x394ba55fe0d88883e21f77bbea860b70b4cd124b1709cb8c833ff1037af69d02\",\"license\":\"UNLICENSED\"},\"contracts/TransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/IFulfillInterpreter.sol\\\";\\nimport \\\"./interfaces/ITransactionManager.sol\\\";\\nimport \\\"./interpreters/FulfillInterpreter.sol\\\";\\nimport \\\"./libraries/Asset.sol\\\";\\nimport \\\"./libraries/WadRayMath.sol\\\";\\nimport \\\"./ProposedOwnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n\\n/**\\n *\\n * @title TransactionManager\\n * @author Connext <support@connext.network>\\n * @notice This contract holds the logic to facilitate crosschain transactions.\\n *         Transactions go through three phases in the happy case:\\n *\\n *         1. Route Auction (offchain): User broadcasts to our network \\n *         signalling their desired route. Routers respond with sealed bids \\n *         containing commitments to fulfilling the transaction within a \\n *         certain time and price range.\\n *\\n *         2. Prepare: Once the auction is completed, the transaction can be \\n *         prepared. The user submits a transaction to `TransactionManager` \\n *         contract on sender-side chain containing router's signed bid. This \\n *         transaction locks up the users funds on the sending chain. Upon \\n *         detecting an event containing their signed bid from the chain, \\n *         router submits the same transaction to `TransactionManager` on the \\n *         receiver-side chain, and locks up a corresponding amount of \\n *         liquidity. The amount locked on the receiving chain is `sending \\n *         amount - auction fee` so the router is incentivized to complete the \\n *         transaction.\\n *\\n *         3. Fulfill: Upon detecting the `TransactionPrepared` event on the \\n *         receiver-side chain, the user signs a message and sends it to a \\n *         relayer, who will earn a fee for submission. The relayer (which may \\n *         be the router) then submits the message to the `TransactionManager` \\n *         to complete their transaction on receiver-side chain and claim the \\n *         funds locked by the router. A relayer is used here to allow users \\n *         to submit transactions with arbitrary calldata on the receiving \\n *         chain without needing gas to do so. The router then submits the \\n *         same signed message and completes transaction on sender-side, \\n *         unlocking the original `amount`.\\n *\\n *         If a transaction is not fulfilled within a fixed timeout, it \\n *         reverts and can be reclaimed by the party that called `prepare` on \\n *         each chain (initiator). Additionally, transactions can be cancelled \\n *         unilaterally by the person owed funds on that chain (router for \\n *         sending chain, user for receiving chain) prior to expiry.\\n *\\n *         NOTE on internal accounting:\\n *         To properly handle the cases where a token is rebasing/inflationary/\\n *         deflationary, we think of funds sent to the contracts as claiming\\n *         \\\"shares\\\" of the total balance of the contract, rather than tracking\\n *         raw balances. This allows routers to keep earning inflation rewards\\n *         when providing liquidity aTokens, for example. Shares are\\n *         created and issued when the contract receives funds, and burned when\\n *         the contract disburses funds. During a crosschain transaction, they\\n *         are deducted from the routers issued shares.\\n */\\n\\ncontract TransactionManager is ReentrancyGuard, ProposedOwnable, ITransactionManager {\\n  /**\\n   * @dev To preserve precision when performing shares math\\n   */\\n  using WadRayMath for uint256;\\n\\n  /**\\n   * @dev Mapping of contract depositor to shares of specific asset.\\n   *      Incremented whenever funds sebt to the contract, or when a\\n   *      router fulfills a transfer.\\n   */\\n  mapping(address => mapping(address => uint256)) public issuedShares;\\n\\n  /**\\n   * @dev Mapping of total issued shares in contract per asset.\\n   *      This is incremented any time funds are sent to the\\n   *      contract, and decremented when they are sent from \\n   *      the contract.\\n   */\\n  mapping(address => uint256) public outstandingShares;\\n\\n  /**\\n   * @dev Mapping of allowed router addresses. Must be added to both\\n   *      sending and receiving chains when forwarding a transfer.\\n   */\\n  mapping(address => bool) public approvedRouters;\\n\\n  /**\\n   * @dev Mapping of allowed assetIds on same chain as contract\\n   */\\n  mapping(address => bool) public approvedAssets;\\n\\n  /**\\n   * @dev Mapping of hash of `InvariantTransactionData` to the hash\\n   *      of the `VariantTransactionData`\\n   */\\n  mapping(bytes32 => bytes32) public variantTransactionData;\\n\\n  /**\\n   * @dev The chain id of the contract, is passed in to avoid any evm issues\\n   */\\n  uint256 public immutable chainId;\\n\\n  /**\\n   * @dev Minimum timeout (will be the lowest on the receiving chain)\\n   */\\n  uint256 public constant MIN_TIMEOUT = 1 days; // 24 hours\\n\\n  /**\\n   * @dev Maximum timeout (will be the highest on the sending chain)\\n   */\\n  uint256 public constant MAX_TIMEOUT = 30 days; // 720 hours\\n\\n  /**\\n   * @dev The address of the external contract that will execute crosschain\\n   *      calldata\\n   */\\n  IFulfillInterpreter public immutable interpreter;\\n\\n  constructor(uint256 _chainId) {\\n    chainId = _chainId;\\n    interpreter = new FulfillInterpreter(address(this));\\n  }\\n\\n  /**\\n   * @notice Gets amounts from router issued shares\\n   * @param router Router you want balance of\\n   * @param assetId Asset for percentage\\n   */\\n  function getRouterBalance(address router, address assetId) external view override returns (uint256) {\\n    return getAmountFromIssuedShares(\\n      issuedShares[router][assetId],\\n      outstandingShares[assetId],\\n      Asset.getOwnBalance(assetId)\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets an amount from a given number of shares\\n   * @param assetId Asset identifier you want amount of\\n   * @param shares Number of shares you want converted to an amount of asset\\n   */\\n  function getAmountFromShares(address assetId, uint256 shares) external view override returns (uint256) {\\n    return getAmountFromIssuedShares(\\n      shares,\\n      outstandingShares[assetId],\\n      Asset.getOwnBalance(assetId)\\n    );\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   *         checking if current owner is address(0)\\n   */\\n  function renounced() public view override returns (bool) {\\n    return owner() == address(0);\\n  }\\n\\n  /**\\n   * @notice Used to add routers that can transact crosschain\\n   * @param router Router address to add\\n   */\\n  function addRouter(address router) external override onlyOwner {\\n    // Sanity check: not empty\\n    require(router != address(0), \\\"#AR:001\\\");\\n\\n    // Sanity check: needs approval\\n    require(approvedRouters[router] == false, \\\"#AR:032\\\");\\n\\n    // Update mapping\\n    approvedRouters[router] = true;\\n\\n    // Emit event\\n    emit RouterAdded(router, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to remove routers that can transact crosschain\\n   * @param router Router address to remove\\n   */\\n  function removeRouter(address router) external override onlyOwner {\\n    // Sanity check: not empty\\n    require(router != address(0), \\\"#RR:001\\\");\\n\\n    // Sanity check: needs removal\\n    require(approvedRouters[router] == true, \\\"#RR:033\\\");\\n\\n    // Update mapping\\n    approvedRouters[router] = false;\\n\\n    // Emit event\\n    emit RouterRemoved(router, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to add assets on same chain as contract that can\\n   *         be transferred.\\n   * @param assetId AssetId to add\\n   */\\n  function addAssetId(address assetId) external override onlyOwner {\\n    // Sanity check: needs approval\\n    require(approvedAssets[assetId] == false, \\\"#AA:032\\\");\\n\\n    // Update mapping\\n    approvedAssets[assetId] = true;\\n\\n    // Emit event\\n    emit AssetAdded(assetId, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to remove assets on same chain as contract that can\\n   *         be transferred.\\n   * @param assetId AssetId to remove\\n   */\\n  function removeAssetId(address assetId) external override onlyOwner {\\n    // Sanity check: already approval\\n    require(approvedAssets[assetId] == true, \\\"#RA:033\\\");\\n\\n    // Update mapping\\n    approvedAssets[assetId] = false;\\n\\n    // Emit event\\n    emit AssetRemoved(assetId, msg.sender);\\n  }\\n\\n  /**\\n   * @notice This is used by any router to increase their available\\n   *         liquidity for a given asset.\\n   * @param amount The amount of liquidity to add for the router\\n   * @param assetId The address (or `address(0)` if native asset) of the\\n   *                asset you're adding liquidity for\\n   * @param router The router you are adding liquidity on behalf of\\n   */\\n  function addLiquidity(uint256 amount, address assetId, address router) external payable nonReentrant override {\\n    // Sanity check: router is sensible\\n    require(router != address(0), \\\"#AL:001\\\");\\n\\n    // Sanity check: nonzero amounts\\n    require(amount > 0, \\\"#AL:002\\\");\\n\\n    // Store renounced() result in memory for gas\\n    bool isRenounced = renounced();\\n\\n    // Router is approved\\n    require(isRenounced || approvedRouters[router], \\\"#AL:003\\\");\\n\\n    // Asset is approved\\n    require(isRenounced || approvedAssets[assetId], \\\"#AL:004\\\");\\n\\n    // Validate correct amounts are transferred\\n    if (Asset.isNativeAsset(assetId)) {\\n      require(msg.value == amount, \\\"#AL:005\\\");\\n    } else {\\n      require(msg.value == 0, \\\"#AL:006\\\");\\n      uint256 preTransfer = Asset.getOwnBalance(assetId);\\n      Asset.transferFromERC20(assetId, msg.sender, address(this), amount);\\n      amount = Asset.getOwnBalance(assetId) - preTransfer;\\n    }\\n\\n    // NOTE: handle funds *after* getting true amount to address fee on transfer\\n    // cases\\n    handleFundsSentToContracts(amount, assetId, router);\\n\\n    // Emit event\\n    emit LiquidityAdded(router, assetId, amount, msg.sender);\\n  }\\n\\n  /**\\n   * @notice This is used by any router to decrease their available\\n   *         liquidity for a given asset.\\n   * @param shares The amount of liquidity to remove for the router in shares\\n   * @param assetId The address (or `address(0)` if native asset) of the\\n   *                asset you're removing liquidity for\\n   * @param recipient The address that will receive the liquidity being removed\\n   */\\n  function removeLiquidity(\\n    uint256 shares,\\n    address assetId,\\n    address payable recipient\\n  ) external override {\\n    // Sanity check: recipient is sensible\\n    require(recipient != address(0), \\\"#RL:007\\\");\\n\\n    // Sanity check: nonzero shares\\n    require(shares > 0, \\\"#RL:035\\\");\\n\\n    // Get stored router shares\\n    uint256 routerShares = issuedShares[msg.sender][assetId];\\n\\n    // Get stored outstanding shares\\n    uint256 outstanding = outstandingShares[assetId];\\n\\n    // Sanity check: owns enough shares\\n    require(routerShares >= shares, \\\"#RL:018\\\");\\n\\n    // Convert shares to amount\\n    uint256 amount = getAmountFromIssuedShares(\\n      shares,\\n      outstanding,\\n      Asset.getOwnBalance(assetId)\\n    );\\n\\n    // Update router issued shares\\n    // NOTE: unchecked due to require above\\n    unchecked {\\n      issuedShares[msg.sender][assetId] = routerShares - shares;\\n    }\\n\\n    // Update the total shares for asset\\n    outstandingShares[assetId] = outstanding - shares;\\n\\n    // Transfer from contract to specified recipient\\n    Asset.transferAsset(assetId, recipient, amount);\\n\\n    // Emit event\\n    emit LiquidityRemoved(\\n      msg.sender,\\n      assetId,\\n      shares,\\n      amount,\\n      recipient\\n    );\\n  }\\n\\n  /**\\n   * @notice This function creates a crosschain transaction. When called on\\n   *         the sending chain, the user is expected to lock up funds. When\\n   *         called on the receiving chain, the router deducts the transfer\\n   *         amount from the available liquidity. The majority of the\\n   *         information about a given transfer does not change between chains,\\n   *         with three notable exceptions: `amount`, `expiry`, and \\n   *         `preparedBlock`. The `amount` and `expiry` are decremented\\n   *         between sending and receiving chains to provide an incentive for \\n   *         the router to complete the transaction and time for the router to\\n   *         fulfill the transaction on the sending chain after the unlocking\\n   *         signature is revealed, respectively.\\n   * @param invariantData The data for a crosschain transaction that will\\n   *                      not change between sending and receiving chains.\\n   *                      The hash of this data is used as the key to store \\n   *                      the inforamtion that does change between chains \\n   *                      (amount, expiry,preparedBlock) for verification\\n   * @param amount The amount of the transaction on this chain\\n   * @param expiry The block.timestamp when the transaction will no longer be\\n   *               fulfillable and is freely cancellable on this chain\\n   * @param encryptedCallData The calldata to be executed when the tx is\\n   *                          fulfilled. Used in the function to allow the user\\n   *                          to reconstruct the tx from events. Hash is stored\\n   *                          onchain to prevent shenanigans.\\n   * @param encodedBid The encoded bid that was accepted by the user for this\\n   *                   crosschain transfer. It is supplied as a param to the\\n   *                   function but is only used in event emission\\n   * @param bidSignature The signature of the bidder on the encoded bid for\\n   *                     this transaction. Only used within the function for\\n   *                     event emission. The validity of the bid and\\n   *                     bidSignature are enforced offchain\\n   */\\n  function prepare(\\n    InvariantTransactionData calldata invariantData,\\n    uint256 amount,\\n    uint256 expiry,\\n    bytes calldata encryptedCallData,\\n    bytes calldata encodedBid,\\n    bytes calldata bidSignature\\n  ) external payable override nonReentrant returns (TransactionData memory) {\\n    // Sanity check: user is sensible\\n    require(invariantData.user != address(0), \\\"#P:009\\\");\\n\\n    // Sanity check: router is sensible\\n    require(invariantData.router != address(0), \\\"#P:001\\\");\\n\\n    // Router is approved *on both chains*\\n    // NOTE: renounced() not cached due to stack too deep\\n    require(renounced() || approvedRouters[invariantData.router], \\\"#P:003\\\");\\n\\n    // Sanity check: sendingChainFallback is sensible\\n    require(invariantData.sendingChainFallback != address(0), \\\"#P:010\\\");\\n\\n    // Sanity check: valid fallback\\n    require(invariantData.receivingAddress != address(0), \\\"#P:026\\\");\\n\\n    // Make sure the chains are different\\n    require(invariantData.sendingChainId != invariantData.receivingChainId, \\\"#P:011\\\");\\n\\n    // Make sure the chains are relevant\\n    require(invariantData.sendingChainId == chainId || invariantData.receivingChainId == chainId, \\\"#P:012\\\");\\n\\n    // Make sure the expiry is greater than min\\n    require((expiry - block.timestamp) >= MIN_TIMEOUT, \\\"#P:013\\\");\\n\\n    // Make sure the expiry is lower than max\\n    require((expiry - block.timestamp) <= MAX_TIMEOUT, \\\"#P:014\\\");\\n\\n    // Make sure the hash is not a duplicate\\n    // NOTE: keccak256(abi.encode(invariantData)) not cached due to stack \\n    // too deep\\n    require(variantTransactionData[keccak256(abi.encode(invariantData))] == bytes32(0), \\\"#P:015\\\");\\n\\n    // NOTE: the `encodedBid` and `bidSignature` are simply passed through\\n    //       to the contract emitted event to ensure the availability of\\n    //       this information. Their validity is asserted offchain, and\\n    //       is out of scope of this contract. They are used as inputs so\\n    //       in the event of a router or user crash, they may recover the\\n    //       correct bid information without requiring an offchain store.\\n\\n    // Declare transfer shares\\n    uint256 shares;\\n\\n    // First determine if this is sender side or receiver side\\n    if (invariantData.sendingChainId == chainId) {\\n      // Sanity check: amount is sensible\\n      // Only check on sending chain to enforce router fees. Transactions could\\n      // be 0-valued on receiving chain if it is just a value-less call to some\\n      // `IFulfillHelper`\\n      require(amount > 0, \\\"#P:002\\\");\\n\\n      // Assets are approved\\n      // NOTE: Cannot check this on receiving chain because of differing\\n      // chain contexts\\n      require(renounced() || approvedAssets[invariantData.sendingAssetId], \\\"#P:004\\\");\\n\\n      // This is sender side prepare. The user is beginning the process of \\n      // submitting an onchain tx after accepting some bid. They should\\n      // lock their funds in the contract for the router to claim after\\n      // they have revealed their signature on the receiving chain via\\n      // submitting a corresponding `fulfill` tx\\n\\n      // Validate correct amounts on msg and transfer from user to\\n      // contract\\n      if (Asset.isNativeAsset(invariantData.sendingAssetId)) {\\n        require(msg.value == amount, \\\"#P:005\\\");\\n      } else {\\n        require(msg.value == 0, \\\"#P:006\\\");\\n        uint256 preTransfer = Asset.getOwnBalance(invariantData.sendingAssetId);\\n        Asset.transferFromERC20(invariantData.sendingAssetId, msg.sender, address(this), amount);\\n        amount = Asset.getOwnBalance(invariantData.sendingAssetId) - preTransfer;\\n      }\\n\\n      // NOTE: handle internal changes *after* funds transferred to handle\\n      // fee on transfer cases\\n\\n      // Set the shares\\n      shares = amount;\\n\\n      // Handle internal accounting\\n      handleFundsSentToContracts(amount, invariantData.sendingAssetId, invariantData.user);\\n\\n      // Store the transaction variants\\n      variantTransactionData[keccak256(abi.encode(invariantData))] = hashVariantTransactionData(shares, expiry, block.number); \\n    } else {\\n      // This is receiver side prepare. The router has proposed a bid on the\\n      // transfer which the user has accepted. They can now lock up their\\n      // own liquidity on th receiving chain, which the user can unlock by\\n      // calling `fulfill`. When creating the `amount` and `expiry` on the\\n      // receiving chain, the router should have decremented both. The\\n      // expiry should be decremented to ensure the router has time to\\n      // complete the sender-side transaction after the user completes the\\n      // receiver-side transactoin. The amount should be decremented to act as\\n      // a fee to incentivize the router to complete the transaction properly.\\n\\n      // Check that the callTo is a contract\\n      // NOTE: This cannot happen on the sending chain (different chain \\n      // contexts), so a user could mistakenly create a transfer that must be\\n      // cancelled if this is incorrect\\n      require(invariantData.callTo == address(0) || Address.isContract(invariantData.callTo), \\\"#P:031\\\");\\n\\n      // Check that the asset is approved\\n      // NOTE: This cannot happen on both chains because of differing chain \\n      // contexts. May be possible for user to create transaction that is not\\n      // prepare-able on the receiver chain.\\n      require(renounced() || approvedAssets[invariantData.receivingAssetId], \\\"#P:004\\\");\\n\\n      // Check that the caller is the router\\n      require(msg.sender == invariantData.router, \\\"#P:016\\\");\\n\\n      // Check that the router isnt accidentally locking funds in the contract\\n      require(msg.value == 0, \\\"#P:017\\\");\\n\\n      // Sanity check: contract has funds > amount on it\\n      // This will handle the 0-value case\\n      require(Asset.getOwnBalance(invariantData.receivingAssetId) >= amount, \\\"#P:008\\\");\\n\\n      // Calculate the shares from the amount\\n      shares = getIssuedSharesFromAmount(\\n        amount,\\n        outstandingShares[invariantData.receivingAssetId],\\n        Asset.getOwnBalance(invariantData.receivingAssetId)\\n      );\\n\\n      // Check that router has liquidity\\n      require(issuedShares[invariantData.router][invariantData.receivingAssetId] >= shares, \\\"#P:018\\\");\\n\\n      // Store the transaction variants\\n      variantTransactionData[keccak256(abi.encode(invariantData))] = hashVariantTransactionData(shares, expiry, block.number);\\n\\n      // Decrement the router liquidity\\n      // NOTE: using unchecked because underflow protected against with require\\n      unchecked {\\n        issuedShares[invariantData.router][invariantData.receivingAssetId] -= shares;\\n      }\\n    }\\n\\n    // Emit event\\n    TransactionData memory txData = TransactionData({\\n      user: invariantData.user,\\n      router: invariantData.router,\\n      sendingAssetId: invariantData.sendingAssetId,\\n      receivingAssetId: invariantData.receivingAssetId,\\n      sendingChainFallback: invariantData.sendingChainFallback,\\n      callTo: invariantData.callTo,\\n      receivingAddress: invariantData.receivingAddress,\\n      callDataHash: invariantData.callDataHash,\\n      transactionId: invariantData.transactionId,\\n      sendingChainId: invariantData.sendingChainId,\\n      receivingChainId: invariantData.receivingChainId,\\n      shares: shares,\\n      expiry: expiry,\\n      preparedBlockNumber: block.number\\n    });\\n\\n    emit TransactionPrepared(\\n      invariantData.user,\\n      invariantData.router,\\n      invariantData.transactionId,\\n      txData,\\n      amount,\\n      msg.sender,\\n      encryptedCallData,\\n      encodedBid,\\n      bidSignature\\n    );\\n    return txData;\\n  }\\n\\n\\n\\n  /**\\n   * @notice This function completes a crosschain transaction. When called on\\n   *         the receiving chain, the user reveals their signature on the\\n   *         transactionId and is sent the amount corresponding to the number\\n   *         of shares the router locked when calling `prepare`. The router \\n   *         then uses this signature to unlock the corresponding funds on the \\n   *         receiving chain, which are then added back to their available \\n   *         liquidity. The user includes a relayer fee since it is not \\n   *         assumed they will have gas on the receiving chain. This function \\n   *         *must* be called before the transaction expiry has elapsed.\\n   * @param txData All of the data (invariant and variant) for a crosschain\\n   *               transaction. The variant data provided is checked against\\n   *               what was stored when the `prepare` function was called.\\n   * @param relayerFee The fee that should go to the relayer when they are\\n   *                   calling the function on the receiving chain for the user\\n   * @param signature The users signature on the transaction id + fee that\\n   *                  can be used by the router to unlock the transaction on \\n   *                  the sending chain\\n   * @param callData The calldata to be sent to and executed by the \\n   *                 `FulfillHelper`\\n   */\\n  function fulfill(\\n    TransactionData calldata txData,\\n    uint256 relayerFee,\\n    bytes calldata signature, // signature on fee + digest\\n    bytes calldata callData\\n  ) external override nonReentrant returns (TransactionData memory) {\\n    // Get the hash of the invariant tx data. This hash is the same\\n    // between sending and receiving chains. The variant data is stored\\n    // in the contract when `prepare` is called within the mapping.\\n    bytes32 digest = hashInvariantTransactionData(txData);\\n\\n    // Make sure that the variant data matches what was stored\\n    require(\\n      variantTransactionData[digest] == hashVariantTransactionData(\\n        txData.shares,\\n        txData.expiry,\\n        txData.preparedBlockNumber\\n      ),\\n      \\\"#F:019\\\"\\n    );\\n\\n    // Make sure the expiry has not elapsed\\n    require(txData.expiry >= block.timestamp, \\\"#F:020\\\");\\n\\n    // Make sure the transaction wasn't already completed\\n    require(txData.preparedBlockNumber > 0, \\\"#F:021\\\");\\n\\n    // Validate the user has signed\\n    require(recoverSignature(txData.transactionId, relayerFee, \\\"fulfill\\\", signature) == txData.user, \\\"#F:022\\\");\\n\\n    // Check provided callData matches stored hash\\n    require(keccak256(callData) == txData.callDataHash, \\\"#F:024\\\");\\n\\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\\n    // mapping is explicitly *not* zeroed out so users who come online without\\n    // a store can tell the difference between a transaction that has not been\\n    // prepared, and a transaction that was already completed on the receiver\\n    // chain.\\n    variantTransactionData[digest] = hashVariantTransactionData(txData.shares, txData.expiry, 0);\\n\\n    uint256 amount;\\n    if (txData.sendingChainId == chainId) {\\n      // The router is completing the transaction, they should receive the users\\n      // issued shares for the transfer\\n\\n      // Make sure that the user is not accidentally fulfilling the transaction\\n      // on the sending chain\\n      require(msg.sender == txData.router, \\\"#F:016\\\");\\n\\n      // Calculate the fulfilled amount from the percent\\n      // NOTE: here only used for the event emission\\n      amount = getAmountFromIssuedShares(\\n        txData.shares,\\n        outstandingShares[txData.sendingAssetId],\\n        Asset.getOwnBalance(txData.sendingAssetId)\\n      );\\n\\n      // Update the issued shares for the user (router is claiming those funds)\\n      issuedShares[txData.user][txData.sendingAssetId] -= txData.shares;\\n\\n      // Complete tx to router for original sending amount\\n      issuedShares[txData.router][txData.sendingAssetId] += txData.shares;\\n    } else {\\n      // The user is completing the transaction, they should get the\\n      // amount representing the shares the transfer was created for, less\\n      // the relayer fee\\n\\n      // Calculate the fulfilled amount from the percent\\n      amount = getAmountFromIssuedShares(\\n        txData.shares,\\n        outstandingShares[txData.receivingAssetId],\\n        Asset.getOwnBalance(txData.receivingAssetId)\\n      );\\n\\n      // Sanity check: fee <= amount. Allow `=` in case of only wanting\\n      // to execute 0-value crosschain tx, so only providing the fee\\n      require(relayerFee <= amount, \\\"#F:023\\\");\\n\\n      // NOTE: here you are on the recieiving chain, and the issued shares\\n      // for the router were already decremented on `prepare`, so only the\\n      // authorized shares must be updated\\n\\n      // Update authorized shares\\n      outstandingShares[txData.receivingAssetId] -= txData.shares;\\n\\n      // Get the amount to send\\n      uint256 toSend;\\n      unchecked {\\n        toSend = amount - relayerFee;\\n      }\\n\\n      // Send the relayer the fee\\n      if (relayerFee > 0) {\\n        Asset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee);\\n      }\\n\\n      // Handle receiver chain external calls if needed\\n      if (txData.callTo == address(0)) {\\n        // No external calls, send directly to receiving address\\n        if (toSend > 0) {\\n          Asset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend);\\n        }\\n      } else {\\n        // Handle external calls with a fallback to the receiving\\n        // address in case the call fails so the funds dont remain\\n        // locked.\\n\\n        // First, transfer the funds to the helper if needed\\n\\n        // Cache in mem for gas\\n        // bool isNativeAsset = Asset.isNativeAsset(txData.receivingAssetId);\\n        if (!Asset.isNativeAsset(txData.receivingAssetId) && toSend > 0) {\\n          Asset.transferERC20(txData.receivingAssetId, address(interpreter), toSend);\\n        }\\n\\n        // Next, call `execute` on the helper. Helpers should internally\\n        // track funds to make sure no one user is able to take all funds\\n        // for tx, and handle the case of reversions\\n        interpreter.execute{ value: Asset.isNativeAsset(txData.receivingAssetId) ? toSend : 0}(\\n          txData.transactionId,\\n          payable(txData.callTo),\\n          txData.receivingAssetId,\\n          payable(txData.receivingAddress),\\n          toSend,\\n          callData\\n        );\\n      }\\n    }\\n\\n    // Emit event\\n    // NOTE: amount == amount transferred (so 0 on router)\\n    emit TransactionFulfilled(\\n      txData.user,\\n      txData.router,\\n      txData.transactionId,\\n      txData,\\n      amount,\\n      relayerFee,\\n      signature,\\n      callData,\\n      msg.sender\\n    );\\n\\n    return txData;\\n  }\\n\\n  /**\\n   * @notice Any crosschain transaction can be cancelled after it has been\\n   *         created to prevent indefinite lock up of funds. After the\\n   *         transaction has expired, anyone can cancel it. Before the\\n   *         expiry, only the recipient of the funds on the given chain is\\n   *         able to cancel. On the sending chain, this means only the router\\n   *         is able to cancel before the expiry, while only the user can\\n   *         prematurely cancel on the receiving chain.\\n   * @param txData All of the data (invariant and variant) for a crosschain\\n   *               transaction. The variant data provided is checked against\\n   *               what was stored when the `prepare` function was called.\\n   * @param relayerFee The fee that should go to the relayer when they are\\n   *                   calling the function for the user\\n   * @param signature The user's signature that allows a transaction to be\\n   *                  cancelled by a relayer\\n   */\\n  function cancel(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature)\\n    external\\n    override\\n    nonReentrant\\n    returns (TransactionData memory)\\n  {\\n    // Make sure params match against stored data\\n    // Also checks that there is an active transfer here\\n    // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\\n\\n    // Get the hash of the invariant tx data. This hash is the same\\n    // between sending and receiving chains. The variant data is stored\\n    // in the contract when `prepare` is called within the mapping.\\n    bytes32 digest = hashInvariantTransactionData(txData);\\n\\n    // Verify the variant data is correct\\n    require(variantTransactionData[digest] == hashVariantTransactionData(txData.shares, txData.expiry, txData.preparedBlockNumber), \\\"#C:019\\\");\\n\\n    // Make sure the transaction wasn't already completed\\n    require(txData.preparedBlockNumber > 0, \\\"#C:021\\\");\\n\\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\\n    // mapping is explicitly *not* zeroed out so users who come online without\\n    // a store can tell the difference between a transaction that has not been\\n    // prepared, and a transaction that was already completed on the receiver\\n    // chain.\\n    variantTransactionData[digest] = hashVariantTransactionData(txData.shares, txData.expiry, 0);\\n\\n    // Return the appropriate locked funds and reset shares\\n    // Declare the amount\\n    uint256 amount;\\n    if (txData.sendingChainId == chainId) {\\n      // Calculate the equivalent amount\\n      amount = getAmountFromIssuedShares(\\n        txData.shares,\\n        outstandingShares[txData.sendingAssetId],\\n        Asset.getOwnBalance(txData.sendingAssetId)\\n      );\\n\\n      // Sender side, funds must be returned to the user\\n      if (txData.expiry >= block.timestamp) {\\n        // Timeout has not expired and tx may only be cancelled by router\\n        // NOTE: no need to validate the signature here, since you are requiring\\n        // the router must be the sender when the cancellation is during the\\n        // fulfill-able window\\n        require(msg.sender == txData.router, \\\"#C:025\\\");\\n\\n        // Update the issued shares for the user\\n        issuedShares[txData.user][txData.sendingAssetId] -= txData.shares;\\n\\n        // Update the outstanding shares\\n        outstandingShares[txData.sendingAssetId] -= txData.shares;\\n\\n        // Return totality of locked funds to provided fallback\\n        Asset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), amount);\\n      } else {\\n        // Sanity check relayer fee\\n        require(relayerFee <= amount, \\\"#C:023\\\");\\n\\n        // Update the issued shares for the user\\n        issuedShares[txData.user][txData.sendingAssetId] -= txData.shares;\\n\\n        // Update the outstanding shares\\n        outstandingShares[txData.sendingAssetId] -= txData.shares;\\n\\n        // When the user could be unlocking funds through a relayer, validate\\n        // their signature and payout the relayer.\\n        if (relayerFee > 0) {\\n          require(msg.sender == txData.user || recoverSignature(txData.transactionId, relayerFee, \\\"cancel\\\", signature) == txData.user, \\\"#C:022\\\");\\n\\n          Asset.transferAsset(txData.sendingAssetId, payable(msg.sender), relayerFee);\\n        }\\n\\n        // Get the amount to refund the user\\n        uint256 toRefund;\\n        unchecked {\\n          toRefund = amount - relayerFee; \\n        }\\n\\n        // Return locked funds to sending chain fallback\\n        if (toRefund > 0) {\\n          Asset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), toRefund);\\n        }\\n      }\\n\\n    } else {\\n      // Receiver side, router liquidity is returned\\n      if (txData.expiry >= block.timestamp) {\\n        // Timeout has not expired and tx may only be cancelled by user\\n        // Validate signature\\n        require(msg.sender == txData.user || recoverSignature(txData.transactionId, relayerFee, \\\"cancel\\\", signature) == txData.user, \\\"#C:022\\\");\\n\\n        // NOTE: there is no incentive here for relayers to submit this on\\n        // behalf of the user (i.e. fee not respected) because the user has not\\n        // locked funds on this contract.\\n      }\\n\\n      // Calculate the equivalent amount\\n      // NOTE: no funds are transferred, this is only for event emission\\n      amount = getAmountFromIssuedShares(\\n        txData.shares,\\n        outstandingShares[txData.receivingAssetId],\\n        Asset.getOwnBalance(txData.receivingAssetId)\\n      );\\n\\n      // Return liquidity to router\\n      issuedShares[txData.router][txData.receivingAssetId] += txData.shares;\\n    }\\n\\n    // Emit event\\n    emit TransactionCancelled(txData.user, txData.router, txData.transactionId, txData, amount, relayerFee, msg.sender);\\n\\n    // Return\\n    return txData;\\n  }\\n\\n  //////////////////////////\\n  /// Private functions ///\\n  //////////////////////////\\n\\n  /**\\n   * @notice Gets an amount from a given issued and authorized shares\\n   * @param _issuedShares Ownership to convert for a given user\\n   * @param _outstandingShares Total shares for \\n   * @param value Total balance to claim portion of\\n   */\\n  function getAmountFromIssuedShares(\\n    uint256 _issuedShares,\\n    uint256 _outstandingShares,\\n    uint256 value\\n  ) internal pure returns (uint256) {\\n    if (value == 0 || _issuedShares == 0) {\\n      return 0;\\n    }\\n    return _issuedShares\\n      .wadToRay()\\n      .rayDiv(_outstandingShares)\\n      .rayMul(value)\\n      .rayToWad();\\n  }\\n\\n  /**\\n   * @notice Converts an amount to a given number of issued shares\\n   * @param amount Amount you wish to convert\\n   * @param _outstandingShares Total number of shares authorized\\n   * @param value Total value you want ownership of\\n   */\\n  function getIssuedSharesFromAmount(\\n    uint256 amount,\\n    uint256 _outstandingShares,\\n    uint256 value\\n  ) internal pure returns (uint256) {\\n    if (amount == 0 || _outstandingShares == 0) {\\n      return 0;\\n    }\\n    return amount\\n      .wadToRay()\\n      .rayDiv(value)\\n      .rayMul(_outstandingShares)\\n      .rayToWad();\\n  }\\n\\n  /** \\n   * @notice Increments issued and outstanding shares when funds are sent to\\n   *         this contract\\n   * @param amount Amount sent to contract\\n   * @param assetId Asset sent to contract\\n   * @param user Person who sent the funds/is claiming funds on the contract\\n   */\\n  function handleFundsSentToContracts(\\n    uint256 amount,\\n    address assetId,\\n    address user\\n  ) internal {\\n    // Increment user issued shares\\n    issuedShares[user][assetId] += amount;\\n\\n    // Increment authorized shares\\n    outstandingShares[assetId] += amount;\\n  }\\n\\n  /**\\n   * @notice Recovers the signer from the signature provided to the `fulfill`\\n   *         function. Returns the address recovered\\n   * @param transactionId Transaction identifier of tx being fulfilled\\n   * @param relayerFee The fee paid to the relayer for submitting the fulfill\\n   *                   tx on behalf of the user.\\n   * @param functionIdentifier The function the signature is being used for.\\n   *                           Either `fulfill` or `cancel`\\n   * @param signature The signature you are recovering the signer from\\n   */\\n  function recoverSignature(\\n    bytes32 transactionId,\\n    uint256 relayerFee,\\n    string memory functionIdentifier,\\n    bytes calldata signature\\n  ) internal pure returns (address) {\\n    // Create the signed payload\\n    SignedData memory payload = SignedData({\\n      transactionId: transactionId,\\n      relayerFee: relayerFee,\\n      functionIdentifier: functionIdentifier\\n    });\\n\\n    // Recover\\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(abi.encode(payload))), signature);\\n  }\\n\\n  /**\\n   * @notice Returns the hash of only the invariant portions of a given\\n   *         crosschain transaction\\n   * @param txData TransactionData to hash\\n   */\\n  function hashInvariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {\\n    InvariantTransactionData memory invariant = InvariantTransactionData({\\n      user: txData.user,\\n      router: txData.router,\\n      sendingAssetId: txData.sendingAssetId,\\n      receivingAssetId: txData.receivingAssetId,\\n      sendingChainFallback: txData.sendingChainFallback,\\n      callTo: txData.callTo,\\n      receivingAddress: txData.receivingAddress,\\n      sendingChainId: txData.sendingChainId,\\n      receivingChainId: txData.receivingChainId,\\n      callDataHash: txData.callDataHash,\\n      transactionId: txData.transactionId\\n    });\\n    return keccak256(abi.encode(invariant));\\n  }\\n\\n  /**\\n   * @notice Returns the hash of only the variant portions of a given\\n   *         crosschain transaction\\n   * @param shares shares to hash\\n   * @param expiry expiry to hash\\n   * @param preparedBlockNumber preparedBlockNumber to hash\\n   */\\n  function hashVariantTransactionData(\\n    uint256 shares,\\n    uint256 expiry,\\n    uint256 preparedBlockNumber\\n  ) internal pure returns (bytes32) {\\n    VariantTransactionData memory variant = VariantTransactionData({\\n      shares: shares,\\n      expiry: expiry,\\n      preparedBlockNumber: preparedBlockNumber\\n    });\\n    return keccak256(abi.encode(variant));\\n  }\\n}\\n\",\"keccak256\":\"0x87ff23ff8c8fe85eba8aecd8987d029e8d1f13f06ee1eeb043087097a2580d3d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IFulfillInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\ninterface IFulfillInterpreter {\\n\\n  event Executed(\\n    bytes32 indexed transactionId,\\n    address payable callTo,\\n    address assetId,\\n    address payable fallbackAddress,\\n    uint256 amount,\\n    bytes callData,\\n    bytes returnData,\\n    bool success\\n  );\\n\\n  function getTransactionManager() external returns (address);\\n\\n  function execute(\\n    bytes32 transactionId,\\n    address payable callTo,\\n    address assetId,\\n    address payable fallbackAddress,\\n    uint256 amount,\\n    bytes calldata callData\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x2eeb3d45a6478c5b521091dac087adc3435d87215bac9b029b96996952ec068f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\ninterface ITransactionManager {\\n  // Structs\\n\\n  // Holds all data that is constant between sending and\\n  // receiving chains. The hash of this is what gets signed\\n  // to ensure the signature can be used on both chains.\\n  struct InvariantTransactionData {\\n    address user;\\n    address router;\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address sendingChainFallback; // funds sent here on cancel\\n    address receivingAddress;\\n    address callTo;\\n    uint256 sendingChainId;\\n    uint256 receivingChainId;\\n    bytes32 callDataHash; // hashed to prevent free option\\n    bytes32 transactionId;\\n  }\\n\\n  // Holds all data that varies between sending and receiving\\n  // chains. The hash of this is stored onchain to ensure the\\n  // information passed in is valid.\\n  struct VariantTransactionData {\\n    uint256 shares;\\n    uint256 expiry;\\n    uint256 preparedBlockNumber;\\n  }\\n\\n  // All Transaction data, constant and variable\\n  struct TransactionData {\\n    address user;\\n    address router;\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address sendingChainFallback;\\n    address receivingAddress;\\n    address callTo;\\n    bytes32 callDataHash;\\n    bytes32 transactionId;\\n    uint256 sendingChainId;\\n    uint256 receivingChainId;\\n    uint256 shares;\\n    uint256 expiry;\\n    uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\\n  }\\n\\n  // The structure of the signed data for fulfill\\n  struct SignedData {\\n    bytes32 transactionId;\\n    uint256 relayerFee;\\n    string functionIdentifier; // \\\"fulfill\\\" or \\\"cancel\\\"\\n  }\\n\\n  // Adding/removing asset events\\n  event RouterAdded(address indexed addedRouter, address indexed caller);\\n\\n  event RouterRemoved(address indexed removedRouter, address indexed caller);\\n\\n  // Adding/removing router events\\n  event AssetAdded(address indexed addedAssetId, address indexed caller);\\n\\n  event AssetRemoved(address indexed removedAssetId, address indexed caller);\\n\\n  // Liquidity events\\n  event LiquidityAdded(\\n    address indexed router,\\n    address indexed assetId,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event LiquidityRemoved(\\n    address indexed router,\\n    address indexed assetId,\\n    uint256 shares,\\n    uint256 amount,\\n    address recipient\\n  );\\n\\n  // Transaction events\\n  event TransactionPrepared(\\n    address indexed user,\\n    address indexed router,\\n    bytes32 indexed transactionId,\\n    TransactionData txData,\\n    uint256 amount,\\n    address caller,\\n    bytes encryptedCallData,\\n    bytes encodedBid,\\n    bytes bidSignature\\n  );\\n\\n  event TransactionFulfilled(\\n    address indexed user,\\n    address indexed router,\\n    bytes32 indexed transactionId,\\n    TransactionData txData,\\n    uint256 amount,\\n    uint256 relayerFee,\\n    bytes signature,\\n    bytes callData,\\n    address caller\\n  );\\n\\n  event TransactionCancelled(\\n    address indexed user,\\n    address indexed router,\\n    bytes32 indexed transactionId,\\n    TransactionData txData,\\n    uint256 amount,\\n    uint256 relayerFee,\\n    address caller\\n  );\\n\\n  // Getters + helper methods\\n  function getRouterBalance(address assetId, address router) external returns (uint256);\\n\\n  function getAmountFromShares(address assetId, uint256 shares) external returns (uint256);\\n\\n  function renounced() external returns (bool);\\n\\n  // Owner only methods\\n  function addRouter(address router) external;\\n\\n  function removeRouter(address router) external;\\n\\n  function addAssetId(address assetId) external;\\n\\n  function removeAssetId(address assetId) external;\\n\\n  // Router only methods\\n  function addLiquidity(uint256 amount, address assetId, address router) external payable;\\n\\n  function removeLiquidity(\\n    uint256 shares,\\n    address assetId,\\n    address payable recipient\\n  ) external;\\n\\n  // Methods for crosschain transfers\\n  // called in the following order (in happy case)\\n  // 1. prepare by user on sending chain\\n  // 2. prepare by router on receiving chain\\n  // 3. fulfill by user on receiving chain\\n  // 4. fulfill by router on sending chain\\n  function prepare(\\n    InvariantTransactionData calldata txData,\\n    uint256 amount,\\n    uint256 expiry,\\n    bytes calldata encryptedCallData,\\n    bytes calldata encodedBid,\\n    bytes calldata bidSignature\\n  ) external payable returns (TransactionData memory);\\n\\n  function fulfill(\\n    TransactionData calldata txData,\\n    uint256 relayerFee,\\n    bytes calldata signature,\\n    bytes calldata callData\\n  ) external returns (TransactionData memory);\\n\\n  function cancel(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature) external returns (TransactionData memory);\\n}\\n\",\"keccak256\":\"0x206c87276ee9a581480df933626602573b4318e45f1633d2507387b045e56b9e\",\"license\":\"UNLICENSED\"},\"contracts/interpreters/FulfillInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IFulfillInterpreter.sol\\\";\\nimport \\\"../libraries/Asset.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title FulfillInterpreter\\n * @author Connext <support@connext.network>\\n * @notice This library contains an `execute` function that is callabale by\\n *         an associated TransactionManager contract. This is used to execute\\n *         arbitrary calldata on a receiving chain.\\n */\\ncontract FulfillInterpreter is ReentrancyGuard, IFulfillInterpreter {\\n  address private _transactionManager;\\n\\n  constructor(address transactionManager) {\\n    _transactionManager = transactionManager;\\n  }\\n\\n  /**\\n   * @notice Errors if the sender is not the transaction manager\\n   */\\n  modifier onlyTransactionManager {\\n    require(msg.sender == _transactionManager, \\\"#OTM:027\\\");\\n    _;\\n  }\\n\\n  /** \\n   * @notice Returns the transaction manager address (only address that can \\n   *         call the `execute` function)\\n   * @return The address of the associated transaction manager\\n   */\\n  function getTransactionManager() override external view returns (address) {\\n    return _transactionManager;\\n  }\\n\\n  /** \\n   * @notice Executes some arbitrary call data on a given address. The\\n   *         call data executes can be payable, and will have `amount` sent\\n   *         along with the function (or approved to the contract). If the\\n   *         call fails, rather than reverting, funds are sent directly to \\n   *         some provided fallbaack address\\n   * @param transactionId Unique identifier of transaction id that necessitated\\n   *        calldata execution\\n   * @param callTo The address to execute the calldata on\\n   * @param assetId The assetId of the funds to approve to the contract or\\n   *                send along with the call\\n   * @param fallbackAddress The address to send funds to if the `call` fails\\n   * @param amount The amount to approve or send with the call\\n   * @param callData The data to execute\\n   */\\n  function execute(\\n    bytes32 transactionId,\\n    address payable callTo,\\n    address assetId,\\n    address payable fallbackAddress,\\n    uint256 amount,\\n    bytes calldata callData\\n  ) override external payable nonReentrant onlyTransactionManager {\\n    // If it is not ether, approve the callTo\\n    // We approve here rather than transfer since many external contracts\\n    // simply require an approval, and it is unclear if they can handle \\n    // funds transferred directly to them (i.e. Uniswap)\\n    bool isEther = Asset.isNativeAsset(assetId);\\n    if (!isEther) {\\n      Asset.increaseERC20Allowance(assetId, callTo, amount);\\n    }\\n\\n    // Try to execute the callData\\n    // the low level call will return `false` if its execution reverts\\n    (bool success, bytes memory returnData) = callTo.call{value: isEther ? amount : 0}(callData);\\n\\n    if (!success) {\\n      // If it fails, transfer to fallback\\n      Asset.transferAsset(assetId, fallbackAddress, amount);\\n      // Decrease allowance\\n      if (!isEther) {\\n        Asset.decreaseERC20Allowance(assetId, callTo, amount);\\n      }\\n    }\\n\\n    // Emit event\\n    emit Executed(\\n      transactionId,\\n      callTo,\\n      assetId,\\n      fallbackAddress,\\n      amount,\\n      callData,\\n      returnData,\\n      success\\n    );\\n  }\\n}\",\"keccak256\":\"0x36f96996beadad4d714c75d52c606b9821b99d826017936123af4f2813432c0a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title Asset\\n * @author Connext <support@connext.network>\\n * @notice This library contains helpers for dealing with onchain transfers\\n *         of assets, including accounting for the native asset `assetId`\\n *         conventions and any noncompliant ERC20 transfers\\n */\\nlibrary Asset {\\n    /** \\n     * @dev All native assets use the empty address for their asset id\\n     *      by convention\\n     */\\n    address constant NATIVE_ASSETID = address(0);\\n\\n    /** \\n     * @notice Determines whether the given assetId is the native asset\\n     * @param assetId The asset identifier to evaluate\\n     * @return Boolean indicating if the asset is the native asset\\n     */\\n    function isNativeAsset(address assetId) internal pure returns (bool) {\\n      return assetId == NATIVE_ASSETID;\\n    }\\n\\n    /** \\n     * @notice Gets the balance of the inheriting contract for the given asset\\n     * @param assetId The asset identifier to get the balance of\\n     * @return Balance held by contracts using this library\\n     */\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n      return\\n        isNativeAsset(assetId)\\n          ? address(this).balance\\n          : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    /** \\n     * @notice Transfers ether from the inheriting contract to a given\\n     *         recipient\\n     * @param recipient Address to send ether to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferEther(address payable recipient, uint256 amount)\\n        internal\\n    {\\n      (bool success,) = recipient.call{value: amount}(\\\"\\\");\\n      require(success, \\\"#TE:028\\\");\\n    }\\n\\n    /** \\n     * @notice Transfers tokens from the inheriting contract to a given\\n     *         recipient\\n     * @param assetId Token address to transfer\\n     * @param recipient Address to send ether to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n      SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\n    }\\n\\n    /** \\n     * @notice Transfers tokens from a sender to a given recipient\\n     * @param assetId Token address to transfer\\n     * @param from Address of sender/owner\\n     * @param to Address of recipient/spender\\n     * @param amount Amount to transfer from owner to spender\\n     */\\n    function transferFromERC20(\\n      address assetId,\\n      address from,\\n      address to,\\n      uint256 amount\\n    ) internal {\\n      SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\\n    }\\n\\n    /** \\n     * @notice Increases the allowance of a token to a spender\\n     * @param assetId Token address of asset to increase allowance of\\n     * @param spender Account whos allowance is increased\\n     * @param amount Amount to increase allowance by\\n     */\\n    function increaseERC20Allowance(\\n      address assetId,\\n      address spender,\\n      uint256 amount\\n    ) internal {\\n      require(!isNativeAsset(assetId), \\\"#IA:034\\\");\\n      SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Decreases the allowance of a token to a spender\\n     * @param assetId Token address of asset to decrease allowance of\\n     * @param spender Account whos allowance is decreased\\n     * @param amount Amount to decrease allowance by\\n     */\\n    function decreaseERC20Allowance(\\n      address assetId,\\n      address spender,\\n      uint256 amount\\n    ) internal {\\n      require(!isNativeAsset(assetId), \\\"#DA:034\\\");\\n      SafeERC20.safeDecreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Wrapper function to transfer a given asset (native or erc20) to\\n     *         some recipient. Should handle all non-compliant return value\\n     *         tokens as well by using the SafeERC20 contract by open zeppelin.\\n     * @param assetId Asset id for transfer (address(0) for native asset, \\n     *                token address for erc20s)\\n     * @param recipient Address to send asset to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal {\\n      isNativeAsset(assetId)\\n        ? transferEther(recipient, amount)\\n        : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe6d31ed8f82692762be722a9d8bf7ab1b2145cd97afad231fe7997812ff44a4a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfWAD) / b, \\\"wadMul: MULTIPLICATION_OVERFLOW\\\");\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"wadDiv: ZERO_DIVISION\\\");\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, \\\"wadDiv: MULTIPLICATION_OVERFLOW\\\");\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, \\\"rayMul: MULTIPLICATION_OVERFLOW\\\");\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"rayDiv: ZERO_DIVISION\\\");\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, \\\"rayDiv: MULTIPLICATION_OVERFLOW\\\");\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, \\\"rayToWad: ADDITION_OVERFLOW\\\");\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    require(result / WAD_RAY_RATIO == a, \\\"wadToRay: MULTIPLICATION_OVERFLOW\\\");\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xf9870ce1fb938b80b852bd58276c576595c0ac1da24f139e31cf17f872d069e5\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80638da5cb5b116100ec578063c5b350df1161008a578063d232c22011610064578063d232c2201461050b578063de38eb3a14610520578063f31abcc414610537578063fd32af2f1461055757600080fd5b8063c5b350df146104a0578063cc2bd6bd146104b5578063d1851c92146104ed57600080fd5b8063aa1470eb116100c6578063aa1470eb14610420578063b1d2618d14610440578063b1f8100d14610460578063b4238e841461048057600080fd5b80638da5cb5b1461039e57806397eb0088146103bc5780639a8a0592146103ec57600080fd5b8063445b1e4b116101595780635d63de0e116101335780635d63de0e1461030e5780635e6798561461033b5780636a42b8f8146103685780636ae0b1541461037e57600080fd5b8063445b1e4b146102a45780634910630a146102e4578063543ad1df146102f757600080fd5b806324ca984e146101a157806327f3cff2146101c35780632893a612146101f657806334e9393c146102235780633a35cf17146102435780633cf52ffb1461028f575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004613614565b61056a565b005b3480156101cf57600080fd5b506101e36101de366004613668565b61068d565b6040519081526020015b60405180910390f35b34801561020257600080fd5b506102166102113660046137ef565b6106c3565b6040516101ed9190613f7f565b34801561022f57600080fd5b506101c161023e366004613614565b610e00565b34801561024f57600080fd5b506102777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101ed565b34801561029b57600080fd5b506003546101e3565b3480156102b057600080fd5b506102d46102bf366004613614565b60066020526000908152604090205460ff1681565b60405190151581526020016101ed565b6101c16102f2366004613973565b610eda565b34801561030357600080fd5b506101e36201518081565b34801561031a57600080fd5b506101e3610329366004613614565b60056020526000908152604090205481565b34801561034757600080fd5b506101e36103563660046136b3565b60086020526000908152604090205481565b34801561037457600080fd5b5062093a806101e3565b34801561038a57600080fd5b506101c1610399366004613614565b61114f565b3480156103aa57600080fd5b506001546001600160a01b0316610277565b3480156103c857600080fd5b506102d46103d7366004613614565b60076020526000908152604090205460ff1681565b3480156103f857600080fd5b506101e37f000000000000000000000000000000000000000000000000000000000000000081565b34801561042c57600080fd5b506101e361043b366004613630565b61126a565b34801561044c57600080fd5b506101c161045b366004613614565b6112aa565b34801561046c57600080fd5b506101c161047b366004613614565b611385565b34801561048c57600080fd5b5061021661049b366004613793565b6113ca565b3480156104ac57600080fd5b506101c1611ac3565b3480156104c157600080fd5b506101e36104d0366004613630565b600460209081526000928352604080842090915290825290205481565b3480156104f957600080fd5b506002546001600160a01b0316610277565b34801561051757600080fd5b506102d4611b5d565b34801561052c57600080fd5b506101e362278d0081565b34801561054357600080fd5b506101c1610552366004613973565b611b81565b6102166105653660046136cb565b611d22565b3361057d6001546001600160a01b031690565b6001600160a01b0316146105ac5760405162461bcd60e51b81526004016105a390613c96565b60405180910390fd5b6001600160a01b0381166105ec5760405162461bcd60e51b81526020600482015260076024820152662341523a30303160c81b60448201526064016105a3565b6001600160a01b03811660009081526006602052604090205460ff161561063f5760405162461bcd60e51b815260206004820152600760248201526611a0a91d18199960c91b60448201526064016105a3565b6001600160a01b038116600081815260066020526040808220805460ff19166001179055513392917fbc68405e644da2aaf25623ce2199da82c6dfd2e1de102b400eba6a091704d4f491a350565b6001600160a01b0382166000908152600560205260408120546106ba9083906106b586612841565b6128d5565b90505b92915050565b6106cb613531565b600260005414156106ee5760405162461bcd60e51b81526004016105a390613cb7565b600260009081556106fe8861291e565b905061071a8861016001358961018001358a6101a00135612a5c565b6000828152600860205260409020541461075f5760405162461bcd60e51b815260206004820152600660248201526523463a30313960d01b60448201526064016105a3565b42886101800135101561079d5760405162461bcd60e51b8152602060048201526006602482015265023463a3032360d41b60448201526064016105a3565b6000886101a00135116107db5760405162461bcd60e51b815260206004820152600660248201526523463a30323160d01b60448201526064016105a3565b6107e86020890189613614565b6001600160a01b03166108228961010001358960405180604001604052806007815260200166199d5b199a5b1b60ca1b8152508a8a612aa7565b6001600160a01b0316146108615760405162461bcd60e51b815260206004820152600660248201526511a31d18191960d11b60448201526064016105a3565b8760e001358484604051610876929190613c08565b6040518091039020146108b45760405162461bcd60e51b815260206004820152600660248201526508d18e8c0c8d60d21b60448201526064016105a3565b6108ca8861016001358961018001356000612a5c565b6000828152600860205260408120919091556101208901357f00000000000000000000000000000000000000000000000000000000000000001415610ac65761091960408a0160208b01613614565b6001600160a01b0316336001600160a01b0316146109625760405162461bcd60e51b815260206004820152600660248201526511a31d18189b60d11b60448201526064016105a3565b6109bb6101608a01356005600061097f60608e0160408f01613614565b6001600160a01b03166001600160a01b03168152602001908152602001600020546106b58c60400160208101906109b69190613614565b612841565b9050610160890135600460006109d460208d018d613614565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008b6040016020810190610a099190613614565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610a389190614095565b909155505061016089013560046000610a5760408d0160208e01613614565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008b6040016020810190610a8c9190613614565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610abb919061403e565b90915550610d659050565b610b106101608a013560056000610ae360808e0160608f01613614565b6001600160a01b031681526020810191909152604001600020546106b56109b660808e0160608f01613614565b905080881115610b4b5760405162461bcd60e51b815260206004820152600660248201526523463a30323360d01b60448201526064016105a3565b61016089013560056000610b6560808d0160608e01613614565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b949190614095565b90915550508781038815610bbc57610bbc610bb560808c0160608d01613614565b338b612b85565b6000610bce60e08c0160c08d01613614565b6001600160a01b03161415610c11578015610c0c57610c0c610bf660808c0160608d01613614565b610c0660c08d0160a08e01613614565b83612b85565b610d63565b610c31610c2460808c0160608d01613614565b6001600160a01b03161590565b158015610c3e5750600081115b15610c7d57610c7d610c5660808c0160608d01613614565b7f000000000000000000000000000000000000000000000000000000000000000083612bae565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663cf9a3604610cbf610c2460808e0160608f01613614565b610cca576000610ccc565b825b8c61010001358d60c0016020810190610ce59190613614565b8e6060016020810190610cf89190613614565b8f60a0016020810190610d0b9190613614565b878d8d6040518963ffffffff1660e01b8152600401610d309796959493929190613c34565b6000604051808303818588803b158015610d4957600080fd5b505af1158015610d5d573d6000803e3d6000fd5b50505050505b505b610100890135610d7b60408b0160208c01613614565b6001600160a01b0316610d9160208c018c613614565b6001600160a01b03167fce3ecb72337f221c8404337f9c51d173d4bd90335c704371c9977e641d9102ba8c858d8d8d8d8d33604051610dd7989796959493929190613f19565b60405180910390a4610dee368a90038a018a61387b565b60016000559998505050505050505050565b33610e136001546001600160a01b031690565b6001600160a01b031614610e395760405162461bcd60e51b81526004016105a390613c96565b6001600160a01b03811660009081526007602052604090205460ff1615610e8c5760405162461bcd60e51b815260206004820152600760248201526611a0a09d18199960c91b60448201526064016105a3565b6001600160a01b038116600081815260076020526040808220805460ff19166001179055513392917f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d979091891a350565b60026000541415610efd5760405162461bcd60e51b81526004016105a390613cb7565b60026000556001600160a01b038116610f425760405162461bcd60e51b815260206004820152600760248201526623414c3a30303160c81b60448201526064016105a3565b60008311610f7c5760405162461bcd60e51b815260206004820152600760248201526611a0a61d18181960c91b60448201526064016105a3565b6000610f86611b5d565b90508080610fac57506001600160a01b03821660009081526006602052604090205460ff165b610fe25760405162461bcd60e51b815260206004820152600760248201526623414c3a30303360c81b60448201526064016105a3565b808061100657506001600160a01b03831660009081526007602052604090205460ff165b61103c5760405162461bcd60e51b815260206004820152600760248201526608d0530e8c0c0d60ca1b60448201526064016105a3565b6001600160a01b038316611088578334146110835760405162461bcd60e51b815260206004820152600760248201526623414c3a30303560c81b60448201526064016105a3565b6110f1565b34156110c05760405162461bcd60e51b815260206004820152600760248201526611a0a61d18181b60c91b60448201526064016105a3565b60006110cb84612841565b90506110d984333088612bb9565b806110e385612841565b6110ed9190614095565b9450505b6110fc848484612bcb565b604080518581523360208201526001600160a01b0380861692908516917f4bd28ccd068c4853d24d35f727ef2a3fea11ce55e8d93461e45f785818e1e139910160405180910390a3505060016000555050565b336111626001546001600160a01b031690565b6001600160a01b0316146111885760405162461bcd60e51b81526004016105a390613c96565b6001600160a01b0381166111c85760405162461bcd60e51b81526020600482015260076024820152662352523a30303160c81b60448201526064016105a3565b6001600160a01b03811660009081526006602052604090205460ff16151560011461121f5760405162461bcd60e51b81526020600482015260076024820152662352523a30333360c81b60448201526064016105a3565b6001600160a01b038116600081815260066020526040808220805460ff19169055513392917fbee3e974bb6a6f44f20096ede047c191eef60322e65e4ee4bd3392230a8716d591a350565b6001600160a01b03808316600090815260046020908152604080832093851683529281528282205460059091529181205490916106ba916106b585612841565b336112bd6001546001600160a01b031690565b6001600160a01b0316146112e35760405162461bcd60e51b81526004016105a390613c96565b6001600160a01b03811660009081526007602052604090205460ff16151560011461133a5760405162461bcd60e51b81526020600482015260076024820152662352413a30333360c81b60448201526064016105a3565b6001600160a01b038116600081815260076020526040808220805460ff19169055513392917f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea91a350565b336113986001546001600160a01b031690565b6001600160a01b0316146113be5760405162461bcd60e51b81526004016105a390613c96565b6113c781612c39565b50565b6113d2613531565b600260005414156113f55760405162461bcd60e51b81526004016105a390613cb7565b600260009081556114058661291e565b9050611421866101600135876101800135886101a00135612a5c565b600082815260086020526040902054146114665760405162461bcd60e51b815260206004820152600660248201526523433a30313960d01b60448201526064016105a3565b6000866101a00135116114a45760405162461bcd60e51b815260206004820152600660248201526523433a30323160d01b60448201526064016105a3565b6114ba8661016001358761018001356000612a5c565b6000828152600860205260408120919091556101208701357f000000000000000000000000000000000000000000000000000000000000000014156118b25761154d6101608801356005600061151660608c0160408d01613614565b6001600160a01b03166001600160a01b03168152602001908152602001600020546106b58a60400160208101906109b69190613614565b905042876101800135106116ab5761156b6040880160208901613614565b6001600160a01b0316336001600160a01b0316146115b45760405162461bcd60e51b815260206004820152600660248201526523433a30323560d01b60448201526064016105a3565b610160870135600460006115cb60208b018b613614565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008960400160208101906116009190613614565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461162f9190614095565b90915550506101608701356005600061164e60608b0160408c01613614565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461167d9190614095565b909155506116a690506116966060890160408a01613614565b610c0660a08a0160808b01613614565b611a32565b808611156116e45760405162461bcd60e51b815260206004820152600660248201526523433a30323360d01b60448201526064016105a3565b610160870135600460006116fb60208b018b613614565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008960400160208101906117309190613614565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461175f9190614095565b90915550506101608701356005600061177e60608b0160408c01613614565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546117ad9190614095565b9091555050851561187f576117c56020880188613614565b6001600160a01b0316336001600160a01b0316148061183057506117ec6020880188613614565b6001600160a01b0316611825886101000135886040518060400160405280600681526020016518d85b98d95b60d21b8152508989612aa7565b6001600160a01b0316145b6118655760405162461bcd60e51b815260206004820152600660248201526511a19d18191960d11b60448201526064016105a3565b61187f6118786060890160408a01613614565b3388612b85565b8581038187146118ac576118ac61189c60608a0160408b01613614565b610c0660a08b0160808c01613614565b50611a32565b428761018001351061196b576118cb6020880188613614565b6001600160a01b0316336001600160a01b0316148061193657506118f26020880188613614565b6001600160a01b031661192b886101000135886040518060400160405280600681526020016518d85b98d95b60d21b8152508989612aa7565b6001600160a01b0316145b61196b5760405162461bcd60e51b815260206004820152600660248201526511a19d18191960d11b60448201526064016105a3565b6119b56101608801356005600061198860808c0160608d01613614565b6001600160a01b031681526020810191909152604001600020546106b56109b660808c0160608d01613614565b9050610160870135600460006119d160408b0160208c01613614565b6001600160a01b0316815260208101919091526040016000908120906119fd60808b0160608c01613614565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254611a2c919061403e565b90915550505b610100870135611a486040890160208a01613614565b6001600160a01b0316611a5e60208a018a613614565b6001600160a01b03167f16a46118f00eb1cd3a5ee173620be331fe1b52a70edb57b8caa7b40fdf14b9988a858b33604051611a9c9493929190613ee3565b60405180910390a4611ab33688900388018861387b565b6001600055979650505050505050565b33611ad66001546001600160a01b031690565b6001600160a01b031614611afc5760405162461bcd60e51b81526004016105a390613c96565b62093a8060035442611b0e9190614095565b11611b465760405162461bcd60e51b815260206004820152600860248201526702341504f3a3033360c41b60448201526064016105a3565b600254611b5b906001600160a01b0316612c87565b565b600080611b726001546001600160a01b031690565b6001600160a01b031614905090565b6001600160a01b038116611bc15760405162461bcd60e51b815260206004820152600760248201526623524c3a30303760c81b60448201526064016105a3565b60008311611bfb5760405162461bcd60e51b815260206004820152600760248201526623524c3a30333560c81b60448201526064016105a3565b3360009081526004602090815260408083206001600160a01b038616845282528083205460059092529091205484821015611c625760405162461bcd60e51b8152602060048201526007602482015266046a498746062760cb1b60448201526064016105a3565b6000611c7286836106b588612841565b3360009081526004602090815260408083206001600160a01b038a168452909152902087850390559050611ca68683614095565b6001600160a01b038616600090815260056020526040902055611cca858583612b85565b60408051878152602081018390526001600160a01b038681168284015291519187169133917fd18855db300cdd1baf52060b0a20e0775fdd88922464565b49afc0bf7a28266d919081900360600190a3505050505050565b611d2a613531565b60026000541415611d4d5760405162461bcd60e51b81526004016105a390613cb7565b60026000908155611d6160208c018c613614565b6001600160a01b03161415611da15760405162461bcd60e51b815260206004820152600660248201526523503a30303960d01b60448201526064016105a3565b6000611db360408c0160208d01613614565b6001600160a01b03161415611df35760405162461bcd60e51b815260206004820152600660248201526523503a30303160d01b60448201526064016105a3565b611dfb611b5d565b80611e33575060066000611e1560408d0160208e01613614565b6001600160a01b0316815260208101919091526040016000205460ff165b611e685760405162461bcd60e51b815260206004820152600660248201526523503a30303360d01b60448201526064016105a3565b6000611e7a60a08c0160808d01613614565b6001600160a01b03161415611eba5760405162461bcd60e51b8152602060048201526006602482015265023503a3031360d41b60448201526064016105a3565b6000611ecc60c08c0160a08d01613614565b6001600160a01b03161415611f0c5760405162461bcd60e51b815260206004820152600660248201526511a81d18191b60d11b60448201526064016105a3565b8961010001358a60e001351415611f4e5760405162461bcd60e51b815260206004820152600660248201526523503a30313160d01b60448201526064016105a3565b7f00000000000000000000000000000000000000000000000000000000000000008a60e001351480611fa457507f00000000000000000000000000000000000000000000000000000000000000008a6101000135145b611fd95760405162461bcd60e51b815260206004820152600660248201526511a81d18189960d11b60448201526064016105a3565b62015180611fe7428a614095565b101561201e5760405162461bcd60e51b815260206004820152600660248201526523503a30313360d01b60448201526064016105a3565b62278d0061202c428a614095565b11156120635760405162461bcd60e51b815260206004820152600660248201526508d40e8c0c4d60d21b60448201526064016105a3565b6000801b600860008c60405160200161207c9190613cee565b60405160208183030381529060405280519060200120815260200190815260200160002054146120d75760405162461bcd60e51b815260206004820152600660248201526523503a30313560d01b60448201526064016105a3565b60007f00000000000000000000000000000000000000000000000000000000000000008b60e00135141561230b5760008a1161213e5760405162461bcd60e51b815260206004820152600660248201526511a81d18181960d11b60448201526064016105a3565b612146611b5d565b8061217e57506007600061216060608e0160408f01613614565b6001600160a01b0316815260208101919091526040016000205460ff165b6121b35760405162461bcd60e51b815260206004820152600660248201526508d40e8c0c0d60d21b60448201526064016105a3565b6121c6610c2460608d0160408e01613614565b15612208578934146122035760405162461bcd60e51b815260206004820152600660248201526523503a30303560d01b60448201526064016105a3565b612296565b341561223f5760405162461bcd60e51b815260206004820152600660248201526511a81d18181b60d11b60448201526064016105a3565b60006122546109b660608e0160408f01613614565b905061227161226960608e0160408f01613614565b33308e612bb9565b806122888d60400160208101906109b69190613614565b6122929190614095565b9a50505b50886122be816122ac60608e0160408f01613614565b6122b960208f018f613614565b612bcb565b6122c9818a43612a5c565b600860008d6040516020016122de9190613cee565b60405160208183030381529060405280519060200120815260200190815260200160002081905550612680565b600061231d60e08d0160c08e01613614565b6001600160a01b03161480612346575061234661234060e08d0160c08e01613614565b3b151590565b61237b5760405162461bcd60e51b815260206004820152600660248201526523503a30333160d01b60448201526064016105a3565b612383611b5d565b806123bb57506007600061239d60808e0160608f01613614565b6001600160a01b0316815260208101919091526040016000205460ff165b6123f05760405162461bcd60e51b815260206004820152600660248201526508d40e8c0c0d60d21b60448201526064016105a3565b61240060408c0160208d01613614565b6001600160a01b0316336001600160a01b0316146124495760405162461bcd60e51b815260206004820152600660248201526511a81d18189b60d11b60448201526064016105a3565b34156124805760405162461bcd60e51b815260206004820152600660248201526523503a30313760d01b60448201526064016105a3565b896124946109b660808e0160608f01613614565b10156124cb5760405162461bcd60e51b8152602060048201526006602482015265046a0746060760d31b60448201526064016105a3565b6125228a600560008e60600160208101906124e69190613614565b6001600160a01b03166001600160a01b031681526020019081526020016000205461251d8e60600160208101906109b69190613614565b612cd9565b905080600460008d602001602081019061253c9190613614565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008d60600160208101906125719190613614565b6001600160a01b03166001600160a01b031681526020019081526020016000205410156125c95760405162461bcd60e51b8152602060048201526006602482015265046a0746062760d31b60448201526064016105a3565b6125d4818a43612a5c565b600860008d6040516020016125e99190613cee565b6040516020818303038152906040528051906020012081526020019081526020016000208190555080600460008d60200160208101906126299190613614565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008d606001602081019061265e9190613614565b6001600160a01b03168152602081019190915260400160002080549190910390555b604080516101c081019091526000908061269d60208f018f613614565b6001600160a01b031681526020018d60200160208101906126be9190613614565b6001600160a01b031681526020018d60400160208101906126df9190613614565b6001600160a01b031681526020018d60600160208101906127009190613614565b6001600160a01b031681526020018d60800160208101906127219190613614565b6001600160a01b031681526020018d60a00160208101906127429190613614565b6001600160a01b031681526020018d60c00160208101906127639190613614565b6001600160a01b031681526020018d610120013581526020018d610140013581526020018d60e0013581526020018d610100013581526020018381526020018b81526020014381525090508b61014001358c60200160208101906127c79190613614565b6001600160a01b03166127dd60208f018f613614565b6001600160a01b03167fcbc2c69a1b1dee5839dd466510efd353bfaf312252daa79d8907663184c0c15b848f338f8f8f8f8f8f60405161282599989796959493929190613f8e565b60405180910390a460016000559b9a5050505050505050505050565b60006001600160a01b038216156128ce576040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561289157600080fd5b505afa1580156128a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c9919061395b565b6106bd565b4792915050565b60008115806128e2575083155b156128ef57506000612917565b61291461290f836129098661290389612d03565b90612d7c565b90612e78565b612f45565b90505b9392505050565b60408051610160810190915260009081908061293d6020860186613614565b6001600160a01b0316815260200184602001602081019061295e9190613614565b6001600160a01b0316815260200161297c6060860160408701613614565b6001600160a01b0316815260200161299a6080860160608701613614565b6001600160a01b031681526020016129b860a0860160808701613614565b6001600160a01b031681526020016129d660c0860160a08701613614565b6001600160a01b031681526020016129f460e0860160c08701613614565b6001600160a01b03168152602001846101200135815260200184610140013581526020018460e001358152602001846101000135815250905080604051602001612a3e9190613dce565b60405160208183030381529060405280519060200120915050919050565b60408051606080820183528582526020808301958652918301938452825180830196909652935185830152915184840152805180850390930183526080909301909252805191012090565b6000806040518060600160405280888152602001878152602001868152509050612b7a612b3e82604051602001612ade9190613eb4565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612fc592505050565b979650505050505050565b6001600160a01b03831615612ba457612b9f838383612bae565b505050565b612b9f8282613069565b612b9f8383836130f6565b612bc584848484613159565b50505050565b6001600160a01b03808216600090815260046020908152604080832093861683529290529081208054859290612c0290849061403e565b90915550506001600160a01b03821660009081526005602052604081208054859290612c2f90849061403e565b9091555050505050565b42600355600280546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000831580612ce6575082155b15612cf357506000612917565b61291461290f8461290985612903895b600080612d14633b9aca0084614076565b905082612d25633b9aca0083614056565b146106bd5760405162461bcd60e51b815260206004820152602160248201527f776164546f5261793a204d554c5449504c49434154494f4e5f4f564552464c4f6044820152605760f81b60648201526084016105a3565b600081612dc35760405162461bcd60e51b81526020600482015260156024820152743930bca234bb1d102d22a927afa224ab24a9a4a7a760591b60448201526064016105a3565b6000612dd0600284614056565b90506b033b2e3c9fd0803ce8000000612deb82600019614095565b612df59190614056565b841115612e445760405162461bcd60e51b815260206004820152601f60248201527f7261794469763a204d554c5449504c49434154494f4e5f4f564552464c4f570060448201526064016105a3565b8281612e5c6b033b2e3c9fd0803ce800000087614076565b612e66919061403e565b612e709190614056565b949350505050565b6000821580612e85575081155b15612e92575060006106bd565b81612eaa60026b033b2e3c9fd0803ce8000000614056565b612eb690600019614095565b612ec09190614056565b831115612f0f5760405162461bcd60e51b815260206004820152601f60248201527f7261794d756c3a204d554c5449504c49434154494f4e5f4f564552464c4f570060448201526064016105a3565b6b033b2e3c9fd0803ce8000000612f27600282614056565b612f318486614076565b612f3b919061403e565b6106ba9190614056565b600080612f576002633b9aca00614056565b90506000612f65848361403e565b905081811015612fb75760405162461bcd60e51b815260206004820152601b60248201527f726179546f5761643a204144444954494f4e5f4f564552464c4f57000000000060448201526064016105a3565b612e70633b9aca0082614056565b6000815160411415612ff95760208201516040830151606084015160001a612fef86828585613191565b93505050506106bd565b815160401415613021576020820151604083015161301885838361333a565b925050506106bd565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105a3565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146130b6576040519150601f19603f3d011682016040523d82523d6000602084013e6130bb565b606091505b5050905080612b9f5760405162461bcd60e51b8152602060048201526007602482015266046a88a746064760cb1b60448201526064016105a3565b6040516001600160a01b038316602482015260448101829052612b9f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613364565b6040516001600160a01b0380851660248301528316604482015260648101829052612bc59085906323b872dd60e01b90608401613122565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561320e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105a3565b8360ff16601b148061322357508360ff16601c145b61327a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105a3565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156132ce573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166133315760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105a3565b95945050505050565b60006001600160ff1b03821660ff83901c601b0161335a86828785613191565b9695505050505050565b60006133b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134369092919063ffffffff16565b805190915015612b9f57808060200190518101906133d79190613693565b612b9f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105a3565b6060612914848460008585843b61348f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105a3565b600080866001600160a01b031685876040516134ab9190613c18565b60006040518083038185875af1925050503d80600081146134e8576040519150601f19603f3d011682016040523d82523d6000602084013e6134ed565b606091505b5091509150612b7a82828660608315613507575081612917565b8251156135175782518084602001fd5b8160405162461bcd60e51b81526004016105a39190613c83565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081019190915290565b80356135b0816140ee565b919050565b60008083601f8401126135c6578182fd5b50813567ffffffffffffffff8111156135dd578182fd5b6020830191508360208285010111156135f557600080fd5b9250929050565b60006101c0828403121561360e578081fd5b50919050565b600060208284031215613625578081fd5b8135612917816140ee565b60008060408385031215613642578081fd5b823561364d816140ee565b9150602083013561365d816140ee565b809150509250929050565b6000806040838503121561367a578182fd5b8235613685816140ee565b946020939093013593505050565b6000602082840312156136a4578081fd5b81518015158114612917578182fd5b6000602082840312156136c4578081fd5b5035919050565b6000806000806000806000806000898b036102008112156136ea578586fd5b610160808212156136f9578687fd5b8b9a508a013598505061018089013596506101a089013567ffffffffffffffff80821115613725578687fd5b6137318d838e016135b5565b90985096506101c08c013591508082111561374a578586fd5b6137568d838e016135b5565b90965094506101e08c013591508082111561376f578384fd5b5061377c8c828d016135b5565b915080935050809150509295985092959850929598565b60008060008061020085870312156137a9578384fd5b6137b386866135fc565b93506101c085013592506101e085013567ffffffffffffffff8111156137d7578283fd5b6137e3878288016135b5565b95989497509550505050565b6000806000806000806102208789031215613808578182fd5b61381288886135fc565b95506101c087013594506101e087013567ffffffffffffffff80821115613837578384fd5b6138438a838b016135b5565b909650945061020089013591508082111561385c578384fd5b5061386989828a016135b5565b979a9699509497509295939492505050565b60006101c0828403121561388d578081fd5b613895614006565b61389e836135a5565b81526138ac602084016135a5565b60208201526138bd604084016135a5565b60408201526138ce606084016135a5565b60608201526138df608084016135a5565b60808201526138f060a084016135a5565b60a082015261390160c084016135a5565b60c082015260e08381013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a0928301359281019290925250919050565b60006020828403121561396c578081fd5b5051919050565b600080600060608486031215613987578081fd5b833592506020840135613999816140ee565b915060408401356139a9816140ee565b809150509250925092565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526139f58160208601602086016140ac565b601f01601f19169290920160200192915050565b613a2382613a16836135a5565b6001600160a01b03169052565b613a2f602082016135a5565b6001600160a01b03166020830152613a49604082016135a5565b6001600160a01b03166040830152613a63606082016135a5565b6001600160a01b03166060830152613a7d608082016135a5565b6001600160a01b03166080830152613a9760a082016135a5565b6001600160a01b031660a0830152613ab160c082016135a5565b6001600160a01b031660c083015260e08181013590830152610100808201359083015261012080820135908301526101408082013590830152610160808201359083015261018080820135908301526101a090810135910152565b80516001600160a01b031682526020810151613b3360208401826001600160a01b03169052565b506040810151613b4e60408401826001600160a01b03169052565b506060810151613b6960608401826001600160a01b03169052565b506080810151613b8460808401826001600160a01b03169052565b5060a0810151613b9f60a08401826001600160a01b03169052565b5060c0810151613bba60c08401826001600160a01b03169052565b5060e08181015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a090810151910152565b8183823760009101908152919050565b60008251613c2a8184602087016140ac565b9190910192915050565b8781526001600160a01b0387811660208301528681166040830152851660608201526080810184905260c060a08201819052600090613c7690830184866139b4565b9998505050505050505050565b6020815260006106ba60208301846139dd565b602080825260079082015266234f4f3a30323960c81b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6101608101613d0082613a16856135a5565b613d0c602084016135a5565b6001600160a01b03166020830152613d26604084016135a5565b6001600160a01b03166040830152613d40606084016135a5565b6001600160a01b03166060830152613d5a608084016135a5565b6001600160a01b03166080830152613d7460a084016135a5565b6001600160a01b031660a0830152613d8e60c084016135a5565b6001600160a01b031660c083015260e083810135908301526101008084013590830152610120808401359083015261014092830135929091019190915290565b81516001600160a01b0316815261016081016020830151613dfa60208401826001600160a01b03169052565b506040830151613e1560408401826001600160a01b03169052565b506060830151613e3060608401826001600160a01b03169052565b506080830151613e4b60808401826001600160a01b03169052565b5060a0830151613e6660a08401826001600160a01b03169052565b5060c0830151613e8160c08401826001600160a01b03169052565b5060e083810151908301526101008084015190830152610120808401519083015261014092830151929091019190915290565b60208152815160208201526020820151604082015260006040830151606080840152612e7060808401826139dd565b6102208101613ef28287613a09565b6101c08201949094526101e08101929092526001600160a01b031661020090910152919050565b6000610260613f28838c613a09565b896101c0840152886101e084015280610200840152613f4a818401888a6139b4565b9050828103610220840152613f608186886139b4565b91505060018060a01b0383166102408301529998505050505050505050565b6101c081016106bd8284613b0c565b6000610260613f9d838d613b0c565b6101c083018b90526001600160a01b038a166101e08401526102008301819052613fca818401898b6139b4565b9050828103610220840152613fe08187896139b4565b9050828103610240840152613ff68185876139b4565b9c9b505050505050505050505050565b6040516101c0810167ffffffffffffffff8111828210171561403857634e487b7160e01b600052604160045260246000fd5b60405290565b60008219821115614051576140516140d8565b500190565b60008261407157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614090576140906140d8565b500290565b6000828210156140a7576140a76140d8565b500390565b60005b838110156140c75781810151838201526020016140af565b83811115612bc55750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146113c757600080fdfea26469706673582212208d0462f62a03096b37349be4ad25c2460f87bfa7a585ec65b97384c28b2f155f64736f6c63430008040033",
  "devdoc": {
    "author": "Connext <support@connext.network>",
    "kind": "dev",
    "methods": {
      "addAssetId(address)": {
        "params": {
          "assetId": "AssetId to add"
        }
      },
      "addLiquidity(uint256,address,address)": {
        "params": {
          "amount": "The amount of liquidity to add for the router",
          "assetId": "The address (or `address(0)` if native asset) of the                asset you're adding liquidity for",
          "router": "The router you are adding liquidity on behalf of"
        }
      },
      "addRouter(address)": {
        "params": {
          "router": "Router address to add"
        }
      },
      "cancel((address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes)": {
        "params": {
          "relayerFee": "The fee that should go to the relayer when they are                   calling the function for the user",
          "signature": "The user's signature that allows a transaction to be                  cancelled by a relayer",
          "txData": "All of the data (invariant and variant) for a crosschain               transaction. The variant data provided is checked against               what was stored when the `prepare` function was called."
        }
      },
      "fulfill((address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes)": {
        "params": {
          "callData": "The calldata to be sent to and executed by the                  `FulfillHelper`",
          "relayerFee": "The fee that should go to the relayer when they are                   calling the function on the receiving chain for the user",
          "signature": "The users signature on the transaction id + fee that                  can be used by the router to unlock the transaction on                   the sending chain",
          "txData": "All of the data (invariant and variant) for a crosschain               transaction. The variant data provided is checked against               what was stored when the `prepare` function was called."
        }
      },
      "getAmountFromShares(address,uint256)": {
        "params": {
          "assetId": "Asset identifier you want amount of",
          "shares": "Number of shares you want converted to an amount of asset"
        }
      },
      "getRouterBalance(address,address)": {
        "params": {
          "assetId": "Asset for percentage",
          "router": "Router you want balance of"
        }
      },
      "prepare((address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes)": {
        "params": {
          "amount": "The amount of the transaction on this chain",
          "bidSignature": "The signature of the bidder on the encoded bid for                     this transaction. Only used within the function for                     event emission. The validity of the bid and                     bidSignature are enforced offchain",
          "encodedBid": "The encoded bid that was accepted by the user for this                   crosschain transfer. It is supplied as a param to the                   function but is only used in event emission",
          "encryptedCallData": "The calldata to be executed when the tx is                          fulfilled. Used in the function to allow the user                          to reconstruct the tx from events. Hash is stored                          onchain to prevent shenanigans.",
          "expiry": "The block.timestamp when the transaction will no longer be               fulfillable and is freely cancellable on this chain",
          "invariantData": "The data for a crosschain transaction that will                      not change between sending and receiving chains.                      The hash of this data is used as the key to store                       the inforamtion that does change between chains                       (amount, expiry,preparedBlock) for verification"
        }
      },
      "removeAssetId(address)": {
        "params": {
          "assetId": "AssetId to remove"
        }
      },
      "removeLiquidity(uint256,address,address)": {
        "params": {
          "assetId": "The address (or `address(0)` if native asset) of the                asset you're removing liquidity for",
          "recipient": "The address that will receive the liquidity being removed",
          "shares": "The amount of liquidity to remove for the router in shares"
        }
      },
      "removeRouter(address)": {
        "params": {
          "router": "Router address to remove"
        }
      }
    },
    "stateVariables": {
      "MAX_TIMEOUT": {
        "details": "Maximum timeout (will be the highest on the sending chain)"
      },
      "MIN_TIMEOUT": {
        "details": "Minimum timeout (will be the lowest on the receiving chain)"
      },
      "approvedAssets": {
        "details": "Mapping of allowed assetIds on same chain as contract"
      },
      "approvedRouters": {
        "details": "Mapping of allowed router addresses. Must be added to both      sending and receiving chains when forwarding a transfer."
      },
      "chainId": {
        "details": "The chain id of the contract, is passed in to avoid any evm issues"
      },
      "interpreter": {
        "details": "The address of the external contract that will execute crosschain      calldata"
      },
      "issuedShares": {
        "details": "Mapping of contract depositor to shares of specific asset.      Incremented whenever funds sebt to the contract, or when a      router fulfills a transfer."
      },
      "outstandingShares": {
        "details": "Mapping of total issued shares in contract per asset.      This is incremented any time funds are sent to the      contract, and decremented when they are sent from       the contract."
      },
      "variantTransactionData": {
        "details": "Mapping of hash of `InvariantTransactionData` to the hash      of the `VariantTransactionData`"
      }
    },
    "title": "TransactionManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "addAssetId(address)": {
        "notice": "Used to add assets on same chain as contract that can         be transferred."
      },
      "addLiquidity(uint256,address,address)": {
        "notice": "This is used by any router to increase their available         liquidity for a given asset."
      },
      "addRouter(address)": {
        "notice": "Used to add routers that can transact crosschain"
      },
      "cancel((address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes)": {
        "notice": "Any crosschain transaction can be cancelled after it has been         created to prevent indefinite lock up of funds. After the         transaction has expired, anyone can cancel it. Before the         expiry, only the recipient of the funds on the given chain is         able to cancel. On the sending chain, this means only the router         is able to cancel before the expiry, while only the user can         prematurely cancel on the receiving chain."
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "fulfill((address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes)": {
        "notice": "This function completes a crosschain transaction. When called on         the receiving chain, the user reveals their signature on the         transactionId and is sent the amount corresponding to the number         of shares the router locked when calling `prepare`. The router          then uses this signature to unlock the corresponding funds on the          receiving chain, which are then added back to their available          liquidity. The user includes a relayer fee since it is not          assumed they will have gas on the receiving chain. This function          *must* be called before the transaction expiry has elapsed."
      },
      "getAmountFromShares(address,uint256)": {
        "notice": "Gets an amount from a given number of shares"
      },
      "getRouterBalance(address,address)": {
        "notice": "Gets amounts from router issued shares"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "prepare((address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes)": {
        "notice": "This function creates a crosschain transaction. When called on         the sending chain, the user is expected to lock up funds. When         called on the receiving chain, the router deducts the transfer         amount from the available liquidity. The majority of the         information about a given transfer does not change between chains,         with three notable exceptions: `amount`, `expiry`, and          `preparedBlock`. The `amount` and `expiry` are decremented         between sending and receiving chains to provide an incentive for          the router to complete the transaction and time for the router to         fulfill the transaction on the sending chain after the unlocking         signature is revealed, respectively."
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "removeAssetId(address)": {
        "notice": "Used to remove assets on same chain as contract that can         be transferred."
      },
      "removeLiquidity(uint256,address,address)": {
        "notice": "This is used by any router to decrease their available         liquidity for a given asset."
      },
      "removeRouter(address)": {
        "notice": "Used to remove routers that can transact crosschain"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by         checking if current owner is address(0)"
      }
    },
    "notice": "This contract holds the logic to facilitate crosschain transactions.         Transactions go through three phases in the happy case:         1. Route Auction (offchain): User broadcasts to our network          signalling their desired route. Routers respond with sealed bids          containing commitments to fulfilling the transaction within a          certain time and price range.         2. Prepare: Once the auction is completed, the transaction can be          prepared. The user submits a transaction to `TransactionManager`          contract on sender-side chain containing router's signed bid. This          transaction locks up the users funds on the sending chain. Upon          detecting an event containing their signed bid from the chain,          router submits the same transaction to `TransactionManager` on the          receiver-side chain, and locks up a corresponding amount of          liquidity. The amount locked on the receiving chain is `sending          amount - auction fee` so the router is incentivized to complete the          transaction.         3. Fulfill: Upon detecting the `TransactionPrepared` event on the          receiver-side chain, the user signs a message and sends it to a          relayer, who will earn a fee for submission. The relayer (which may          be the router) then submits the message to the `TransactionManager`          to complete their transaction on receiver-side chain and claim the          funds locked by the router. A relayer is used here to allow users          to submit transactions with arbitrary calldata on the receiving          chain without needing gas to do so. The router then submits the          same signed message and completes transaction on sender-side,          unlocking the original `amount`.         If a transaction is not fulfilled within a fixed timeout, it          reverts and can be reclaimed by the party that called `prepare` on          each chain (initiator). Additionally, transactions can be cancelled          unilaterally by the person owed funds on that chain (router for          sending chain, user for receiving chain) prior to expiry.         NOTE on internal accounting:         To properly handle the cases where a token is rebasing/inflationary/         deflationary, we think of funds sent to the contracts as claiming         \"shares\" of the total balance of the contract, rather than tracking         raw balances. This allows routers to keep earning inflation rewards         when providing liquidity aTokens, for example. Shares are         created and issued when the contract receives funds, and burned when         the contract disburses funds. During a crosschain transaction, they         are deducted from the routers issued shares.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1417,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1419,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_proposed",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1421,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_proposedTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1596,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "issuedShares",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1601,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "outstandingShares",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1606,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "approvedRouters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1611,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "approvedAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1616,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "variantTransactionData",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}