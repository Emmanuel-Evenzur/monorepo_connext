{
  "address": "0x373ba9aa0f48b27A977F73423039E6dE341a0C7C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrapped",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "source",
          "type": "address"
        }
      ],
      "name": "AggregatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "PriceRecordUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aggregators",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getPriceFromChainlink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getPriceFromDex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getPriceFromOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPriceOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceRecords",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        }
      ],
      "name": "setAggregators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setDexPriceInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapped",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x538561ba022c2f06af05c93a975654953833507400cea07275e6c6bceb76f110",
  "receipt": {
    "to": null,
    "from": "0x155B15a7e9Ff0e34cEaF2439589D5C661ADC9493",
    "contractAddress": "0x373ba9aa0f48b27A977F73423039E6dE341a0C7C",
    "transactionIndex": 283,
    "gasUsed": "904765",
    "logsBloom": "0x
    "blockHash": "0x4f32beaeff660d500eafeb40f1a21f263894ee22967dd2668710dfb227f476b3",
    "transactionHash": "0x538561ba022c2f06af05c93a975654953833507400cea07275e6c6bceb76f110",
    "logs": [],
    "blockNumber": 13549026,
    "cumulativeGasUsed": "18491121",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
  ],
  "solcInputHash": "d6472a6c2bd70968f704817a186deda3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapped\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"AggregatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"PriceRecordUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aggregators\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceFromChainlink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceFromDex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceFromOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPriceOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"setAggregators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setDexPriceInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregators(address)\":{\"notice\":\"Chainlink Aggregators\"},\"isPriceOracle()\":{\"notice\":\"Indicator that this is a PriceOracle contract (for inspection)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConnextPriceOracle.sol\":\"ConnextPriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/ConnextPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n    function description() external view returns (string memory);\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId) external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData() external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\\n\\ncontract ConnextPriceOracle is PriceOracle {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20Extended;\\n    address public admin;\\n\\n    address public wrapped;\\n\\n    /// @notice Chainlink Aggregators\\n    mapping(address => AggregatorV3Interface) public aggregators;    \\n\\n    struct PriceInfo {\\n        address token;              // Address of token contract, TOKEN\\n        address baseToken;          // Address of base token contract, BASETOKEN\\n        address lpToken;            // Address of TOKEN-BASETOKEN pair contract\\n        bool active;                // Active status of price record 0 \\n    }\\n\\n    mapping(address => PriceInfo) public priceRecords;\\n    \\n    event NewAdmin(address oldAdmin, address newAdmin);\\n    event PriceRecordUpdated(address token, address baseToken, address lpToken, bool _active);\\n    event AggregatorUpdated(address tokenAddress, address source);\\n\\n    constructor(address _wrapped) {\\n        wrapped = _wrapped;\\n        admin = msg.sender;\\n    }\\n\\n    function getTokenPrice(address _tokenAddress) public view override returns (uint256) {\\n        address tokenAddress = _tokenAddress;\\n        if (_tokenAddress == address(0)) {\\n            tokenAddress = wrapped;\\n        }\\n        uint256 tokenPrice = getPriceFromOracle(tokenAddress);\\n        if (tokenPrice == 0) {\\n            tokenPrice = getPriceFromDex(tokenAddress);\\n        } \\n        return tokenPrice;\\n    }\\n\\n    function getPriceFromDex(address _tokenAddress) public view returns (uint256) {\\n        PriceInfo storage priceInfo = priceRecords[_tokenAddress];\\n        if (priceInfo.active) {\\n            uint256 rawTokenAmount = IERC20Extended(priceInfo.token).balanceOf(priceInfo.lpToken);\\n            uint256 tokenDecimalDelta = 18-uint256(IERC20Extended(priceInfo.token).decimals());\\n            uint256 tokenAmount = rawTokenAmount.mul(10**tokenDecimalDelta);\\n            uint256 rawBaseTokenAmount = IERC20Extended(priceInfo.baseToken).balanceOf(priceInfo.lpToken);\\n            uint256 baseTokenDecimalDelta = 18-uint256(IERC20Extended(priceInfo.baseToken).decimals());\\n            uint256 baseTokenAmount = rawBaseTokenAmount.mul(10**baseTokenDecimalDelta);\\n            uint256 baseTokenPrice = getPriceFromOracle(priceInfo.baseToken);\\n            uint256 tokenPrice = baseTokenPrice.mul(baseTokenAmount).div(tokenAmount);\\n\\n            return tokenPrice;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getPriceFromOracle(address _tokenAddress) public view returns (uint256) {\\n        uint256 chainLinkPrice = getPriceFromChainlink(_tokenAddress);\\n        return chainLinkPrice;\\n    }\\n\\n    function getPriceFromChainlink(address _tokenAddress) public view returns (uint256) {\\n        AggregatorV3Interface aggregator = aggregators[_tokenAddress];\\n        if (address(aggregator) != address(0)) {\\n            ( , int answer, , , ) = aggregator.latestRoundData();\\n\\n            // It's fine for price to be 0. We have two price feeds.\\n            if (answer == 0) {\\n                return 0;\\n            }\\n\\n            // Extend the decimals to 1e18.\\n            uint retVal = uint(answer);\\n            uint price = retVal.mul(10**(18 - uint(aggregator.decimals())));\\n\\n            return price;            \\n        }\\n        return 0;        \\n    }\\n\\n    function setDexPriceInfo(address _token, address _baseToken, address _lpToken, bool _active) public {\\n        require(msg.sender == admin, \\\"only admin can set DEX price\\\");\\n        PriceInfo storage priceInfo = priceRecords[_token];\\n        uint256 baseTokenPrice = getPriceFromOracle(_baseToken);\\n        require(baseTokenPrice > 0, \\\"invalid base token\\\");\\n        priceInfo.token = _token;\\n        priceInfo.baseToken = _baseToken;\\n        priceInfo.lpToken = _lpToken;\\n        priceInfo.active = _active;\\n        emit PriceRecordUpdated(_token, _baseToken, _lpToken, _active);\\n    }\\n\\n    function setAdmin(address newAdmin) external {\\n        require(msg.sender == admin, \\\"only admin can set new admin\\\");\\n        address oldAdmin = admin;\\n        admin = newAdmin;\\n\\n        emit NewAdmin(oldAdmin, newAdmin);\\n    }\\n\\n    function setAggregators(address[] calldata tokenAddresses, address[] calldata sources) external {\\n        require(msg.sender == admin, \\\"only the admin may set the aggregators\\\");\\n        for (uint i = 0; i < tokenAddresses.length; i++) {\\n            aggregators[tokenAddresses[i]] = AggregatorV3Interface(sources[i]);\\n            emit AggregatorUpdated(tokenAddresses[i], sources[i]);\\n        }\\n    } \\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }    \\n\\n\\n}\",\"keccak256\":\"0x7582000013a58e823ce03fbc2d1d7c8f7d6b94863c3eed2bc30c00938ae7edab\",\"license\":\"MIT\"},\"contracts/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the price of a token\\n      * @param token The token to get the price of\\n      * @return The asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getTokenPrice(address token) external virtual view returns (uint);\\n}\",\"keccak256\":\"0xdd97cdf81f3fc68ab901c35de0f8a53600e1c9708e8a3403b25de4bfcdad9854\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Extended {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2221eec491a2ef92f0e92b5740ae0171cc1b12e417e8a3b54ec542c3605c8681\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610f2a380380610f2a83398101604081905261002f9161005d565b600180546001600160a01b039092166001600160a01b0319928316179055600080549091163317905561008b565b60006020828403121561006e578081fd5b81516001600160a01b0381168114610084578182fd5b9392505050565b610e908061009a6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806366331bba1161007157806366331bba1461016e578063704b6c0214610186578063856d562d14610199578063a2a870a9146101ac578063d02641a014610229578063f851a4401461023c57600080fd5b8063112cdab9146100b95780631994b4fd146100ff5780633f9fb505146101145780634c8e42a11461012757806350e70d4814610148578063538e573c1461015b575b600080fd5b6100e26100c7366004610b84565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61011261010d366004610b9e565b61024f565b005b610112610122366004610bf7565b6103bf565b61013a610135366004610b84565b610599565b6040519081526020016100f6565b6001546100e2906001600160a01b031681565b61013a610169366004610b84565b61087f565b610176600181565b60405190151581526020016100f6565b610112610194366004610b84565b610892565b61013a6101a7366004610b84565b61094d565b6101f46101ba366004610b84565b6003602052600090815260409020805460018201546002909201546001600160a01b0391821692821691811690600160a01b900460ff1684565b6040516100f694939291906001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b61013a610237366004610b84565b610aa1565b6000546100e2906001600160a01b031681565b6000546001600160a01b031633146102ae5760405162461bcd60e51b815260206004820152601c60248201527f6f6e6c792061646d696e2063616e20736574204445582070726963650000000060448201526064015b60405180910390fd5b6001600160a01b0384166000908152600360205260408120906102d08561087f565b9050600081116103175760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b2103130b9b2903a37b5b2b760711b60448201526064016102a5565b81546001600160a01b038781166001600160a01b031992831681178555600185018054898416941684179055600285018054871515600160a01b81026001600160a81b0319909216948a16948517919091179091556040805192835260208301949094529281019190915260608101919091527f896c992bf7fd70df3a83c741812b6b20c1da89e5efeaefa1fde40987c7e91a129060800160405180910390a1505050505050565b6000546001600160a01b031633146104285760405162461bcd60e51b815260206004820152602660248201527f6f6e6c79207468652061646d696e206d617920736574207468652061676772656044820152656761746f727360d01b60648201526084016102a5565b60005b838110156105925782828281811061045357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906104689190610b84565b6002600087878581811061048c57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906104a19190610b84565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790557f89baabef7dfd0683c0ac16fd2a8431c51b49fbe654c3f7b5ef19763e2ccd88f285858381811061051357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105289190610b84565b84848481811061054857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061055d9190610b84565b604080516001600160a01b0393841681529290911660208301520160405180910390a18061058a81610e29565b91505061042b565b5050505050565b6001600160a01b03811660009081526003602052604081206002810154600160a01b900460ff161561087657805460028201546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a082319060240160206040518083038186803b15801561061257600080fd5b505afa158015610626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064a9190610c60565b905060008260000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561069e57600080fd5b505afa1580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d69190610cc7565b6106e49060ff166012610e12565b905060006106fd6106f683600a610d4b565b8490610ae3565b600185015460028601546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a082319060240160206040518083038186803b15801561074e57600080fd5b505afa158015610762573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107869190610c60565b905060008560010160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107da57600080fd5b505afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190610cc7565b6108209060ff166012610e12565b905060006108326106f683600a610d4b565b600188015490915060009061084f906001600160a01b031661087f565b90506000610867866108618486610ae3565b90610af8565b9b9a5050505050505050505050565b50600092915050565b60008061088b8361094d565b9392505050565b6000546001600160a01b031633146108ec5760405162461bcd60e51b815260206004820152601c60248201527f6f6e6c792061646d696e2063616e20736574206e65772061646d696e0000000060448201526064016102a5565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a15050565b6001600160a01b038082166000908152600260205260408120549091168015610876576000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109ab57600080fd5b505afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e39190610c78565b50505091505080600014156109fc575060009392505050565b60008190506000610a97846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3f57600080fd5b505afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190610cc7565b610a859060ff166012610e12565b610a9090600a610d4b565b8390610ae3565b9695505050505050565b6000816001600160a01b038116610ac057506001546001600160a01b03165b6000610acb8261087f565b90508061088b57610adb82610599565b949350505050565b6000610aef8284610df3565b90505b92915050565b6000610aef8284610ce8565b80356001600160a01b0381168114610b1b57600080fd5b919050565b60008083601f840112610b31578182fd5b50813567ffffffffffffffff811115610b48578182fd5b6020830191508360208260051b8501011115610b6357600080fd5b9250929050565b805169ffffffffffffffffffff81168114610b1b57600080fd5b600060208284031215610b95578081fd5b610aef82610b04565b60008060008060808587031215610bb3578283fd5b610bbc85610b04565b9350610bca60208601610b04565b9250610bd860408601610b04565b915060608501358015158114610bec578182fd5b939692955090935050565b60008060008060408587031215610c0c578384fd5b843567ffffffffffffffff80821115610c23578586fd5b610c2f88838901610b20565b90965094506020870135915080821115610c47578384fd5b50610c5487828801610b20565b95989497509550505050565b600060208284031215610c71578081fd5b5051919050565b600080600080600060a08688031215610c8f578081fd5b610c9886610b6a565b9450602086015193506040860151925060608601519150610cbb60808701610b6a565b90509295509295909350565b600060208284031215610cd8578081fd5b815160ff8116811461088b578182fd5b600082610d0357634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610d43578160001904821115610d2957610d29610e44565b80851615610d3657918102915b93841c9390800290610d0d565b509250929050565b6000610aef8383600082610d6157506001610af2565b81610d6e57506000610af2565b8160018114610d845760028114610d8e57610daa565b6001915050610af2565b60ff841115610d9f57610d9f610e44565b50506001821b610af2565b5060208310610133831016604e8410600b8410161715610dcd575081810a610af2565b610dd78383610d08565b8060001904821115610deb57610deb610e44565b029392505050565b6000816000190483118215151615610e0d57610e0d610e44565b500290565b600082821015610e2457610e24610e44565b500390565b6000600019821415610e3d57610e3d610e44565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212200c30fb7966f65ed60576f20aed3d475ac6053124b21c2dce5167e1ac587ab9d664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806366331bba1161007157806366331bba1461016e578063704b6c0214610186578063856d562d14610199578063a2a870a9146101ac578063d02641a014610229578063f851a4401461023c57600080fd5b8063112cdab9146100b95780631994b4fd146100ff5780633f9fb505146101145780634c8e42a11461012757806350e70d4814610148578063538e573c1461015b575b600080fd5b6100e26100c7366004610b84565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61011261010d366004610b9e565b61024f565b005b610112610122366004610bf7565b6103bf565b61013a610135366004610b84565b610599565b6040519081526020016100f6565b6001546100e2906001600160a01b031681565b61013a610169366004610b84565b61087f565b610176600181565b60405190151581526020016100f6565b610112610194366004610b84565b610892565b61013a6101a7366004610b84565b61094d565b6101f46101ba366004610b84565b6003602052600090815260409020805460018201546002909201546001600160a01b0391821692821691811690600160a01b900460ff1684565b6040516100f694939291906001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b61013a610237366004610b84565b610aa1565b6000546100e2906001600160a01b031681565b6000546001600160a01b031633146102ae5760405162461bcd60e51b815260206004820152601c60248201527f6f6e6c792061646d696e2063616e20736574204445582070726963650000000060448201526064015b60405180910390fd5b6001600160a01b0384166000908152600360205260408120906102d08561087f565b9050600081116103175760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b2103130b9b2903a37b5b2b760711b60448201526064016102a5565b81546001600160a01b038781166001600160a01b031992831681178555600185018054898416941684179055600285018054871515600160a01b81026001600160a81b0319909216948a16948517919091179091556040805192835260208301949094529281019190915260608101919091527f896c992bf7fd70df3a83c741812b6b20c1da89e5efeaefa1fde40987c7e91a129060800160405180910390a1505050505050565b6000546001600160a01b031633146104285760405162461bcd60e51b815260206004820152602660248201527f6f6e6c79207468652061646d696e206d617920736574207468652061676772656044820152656761746f727360d01b60648201526084016102a5565b60005b838110156105925782828281811061045357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906104689190610b84565b6002600087878581811061048c57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906104a19190610b84565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790557f89baabef7dfd0683c0ac16fd2a8431c51b49fbe654c3f7b5ef19763e2ccd88f285858381811061051357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105289190610b84565b84848481811061054857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061055d9190610b84565b604080516001600160a01b0393841681529290911660208301520160405180910390a18061058a81610e29565b91505061042b565b5050505050565b6001600160a01b03811660009081526003602052604081206002810154600160a01b900460ff161561087657805460028201546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a082319060240160206040518083038186803b15801561061257600080fd5b505afa158015610626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064a9190610c60565b905060008260000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561069e57600080fd5b505afa1580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d69190610cc7565b6106e49060ff166012610e12565b905060006106fd6106f683600a610d4b565b8490610ae3565b600185015460028601546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a082319060240160206040518083038186803b15801561074e57600080fd5b505afa158015610762573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107869190610c60565b905060008560010160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107da57600080fd5b505afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190610cc7565b6108209060ff166012610e12565b905060006108326106f683600a610d4b565b600188015490915060009061084f906001600160a01b031661087f565b90506000610867866108618486610ae3565b90610af8565b9b9a5050505050505050505050565b50600092915050565b60008061088b8361094d565b9392505050565b6000546001600160a01b031633146108ec5760405162461bcd60e51b815260206004820152601c60248201527f6f6e6c792061646d696e2063616e20736574206e65772061646d696e0000000060448201526064016102a5565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a15050565b6001600160a01b038082166000908152600260205260408120549091168015610876576000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109ab57600080fd5b505afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e39190610c78565b50505091505080600014156109fc575060009392505050565b60008190506000610a97846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3f57600080fd5b505afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190610cc7565b610a859060ff166012610e12565b610a9090600a610d4b565b8390610ae3565b9695505050505050565b6000816001600160a01b038116610ac057506001546001600160a01b03165b6000610acb8261087f565b90508061088b57610adb82610599565b949350505050565b6000610aef8284610df3565b90505b92915050565b6000610aef8284610ce8565b80356001600160a01b0381168114610b1b57600080fd5b919050565b60008083601f840112610b31578182fd5b50813567ffffffffffffffff811115610b48578182fd5b6020830191508360208260051b8501011115610b6357600080fd5b9250929050565b805169ffffffffffffffffffff81168114610b1b57600080fd5b600060208284031215610b95578081fd5b610aef82610b04565b60008060008060808587031215610bb3578283fd5b610bbc85610b04565b9350610bca60208601610b04565b9250610bd860408601610b04565b915060608501358015158114610bec578182fd5b939692955090935050565b60008060008060408587031215610c0c578384fd5b843567ffffffffffffffff80821115610c23578586fd5b610c2f88838901610b20565b90965094506020870135915080821115610c47578384fd5b50610c5487828801610b20565b95989497509550505050565b600060208284031215610c71578081fd5b5051919050565b600080600080600060a08688031215610c8f578081fd5b610c9886610b6a565b9450602086015193506040860151925060608601519150610cbb60808701610b6a565b90509295509295909350565b600060208284031215610cd8578081fd5b815160ff8116811461088b578182fd5b600082610d0357634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610d43578160001904821115610d2957610d29610e44565b80851615610d3657918102915b93841c9390800290610d0d565b509250929050565b6000610aef8383600082610d6157506001610af2565b81610d6e57506000610af2565b8160018114610d845760028114610d8e57610daa565b6001915050610af2565b60ff841115610d9f57610d9f610e44565b50506001821b610af2565b5060208310610133831016604e8410600b8410161715610dcd575081810a610af2565b610dd78383610d08565b8060001904821115610deb57610deb610e44565b029392505050565b6000816000190483118215151615610e0d57610e0d610e44565b500290565b600082821015610e2457610e24610e44565b500390565b6000600019821415610e3d57610e3d610e44565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212200c30fb7966f65ed60576f20aed3d475ac6053124b21c2dce5167e1ac587ab9d664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "aggregators(address)": {
        "notice": "Chainlink Aggregators"
      },
      "isPriceOracle()": {
        "notice": "Indicator that this is a PriceOracle contract (for inspection)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1889,
        "contract": "contracts/ConnextPriceOracle.sol:ConnextPriceOracle",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1891,
        "contract": "contracts/ConnextPriceOracle.sol:ConnextPriceOracle",
        "label": "wrapped",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1897,
        "contract": "contracts/ConnextPriceOracle.sol:ConnextPriceOracle",
        "label": "aggregators",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)1878)"
      },
      {
        "astId": 1911,
        "contract": "contracts/ConnextPriceOracle.sol:ConnextPriceOracle",
        "label": "priceRecords",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PriceInfo)1906_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)1878": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(AggregatorV3Interface)1878)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)1878"
      },
      "t_mapping(t_address,t_struct(PriceInfo)1906_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ConnextPriceOracle.PriceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceInfo)1906_storage"
      },
      "t_struct(PriceInfo)1906_storage": {
        "encoding": "inplace",
        "label": "struct ConnextPriceOracle.PriceInfo",
        "members": [
          {
            "astId": 1899,
            "contract": "contracts/ConnextPriceOracle.sol:ConnextPriceOracle",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1901,
            "contract": "contracts/ConnextPriceOracle.sol:ConnextPriceOracle",
            "label": "baseToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1903,
            "contract": "contracts/ConnextPriceOracle.sol:ConnextPriceOracle",
            "label": "lpToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1905,
            "contract": "contracts/ConnextPriceOracle.sol:ConnextPriceOracle",
            "label": "active",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}