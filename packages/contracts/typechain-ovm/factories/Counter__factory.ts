/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "incrementAndSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "setShouldRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shouldRevert",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260006001610010610053565b5050348015610027576000806100246100b5565b50505b50600080600181610036610120565b8160ff0219169083151502179061004b610053565b50505061016c565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b60005b60408110156100b057600082820152602001610099565b505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156100ed5780860151828201604001526020016100d2565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610099565b610ad28061017b6000396000f3fe60806040526004361061004a5760003560e01c806306661abd146100585780636813d78714610088578063d09de08a146100c8578063d2eee78a146100e6578063d3072d8214610125575b6000806100556107f0565b50505b34801561006d5760008061006a6107f0565b50505b50610076610157565b60405190815260200160405180910390f35b34801561009d5760008061009a6107f0565b50505b506100c6600480360360208110156100bd576000806100ba6107f0565b50505b50351515610164565b005b3480156100dd576000806100da6107f0565b50505b506100c661018d565b6100c660048036036060811015610105576000806101026107f0565b50505b506001600160a01b0381358116916020810135909116906040013561021e565b34801561013a576000806101376107f0565b50505b50610143610352565b604051901515815260200160405180910390f35b600161016161085b565b81565b80600060018161017261085b565b8160ff021916908315150217906101876108b6565b50505050565b60008061019861085b565b906101000a900460ff16156101fc5760405162461bcd60e51b815260206004820152601f60248201527f696e6372656d656e743a2073686f756c645265766572742069732074727565006044820152606401604051809103906101f96107f0565b50505b6001806000828261020b61085b565b0192505081906102196108b6565b505050565b6102278361036a565b15610278578034146102735760405162461bcd60e51b8152600401808060200182810382526024815260200180610a8460249139604001915050604051809103906102706107f0565b50505b61033f565b34156102d35760405162461bcd60e51b815260206004820152601e60248201527f696e6372656d656e74416e6453656e643a204554485f574954485f45524300006044820152606401604051809103906102d06107f0565b50505b61033f835a6102e0610904565b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156103365760008282015260200161031f565b50505084610377565b61034761018d565b610219838383610383565b60008061035d61085b565b906101000a900460ff1681565b6001600160a01b03161590565b610187848484846103aa565b61038c8361036a565b6103a05761039b838383610413565b610219565b610219828261041e565b610187846323b872dd60e01b8585856040516001600160a01b0393841660248201529190921660448201526064810191909152608401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b031690911790526104ca565b61021983838361058a565b6000826001600160a01b03168260405160006040518083038185875a61044261094a565b505050505050925050503d8060008114610478576040513d603f01601f191681016040523d815291503d6000602084013e61047d565b606091505b50509050806102195760405162461bcd60e51b8152602060048201526008602482015267046a89c82746064760c31b6044820152606401604051809103906104c36107f0565b5050505050565b6000610515826040516040808201905260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201526001600160a01b03861691906105e6565b905060008151111561021957602081018151602081101561053e5760008061053b6107f0565b50505b81019080805192506102199150505760405162461bcd60e51b815260040180806020018281038252602a815260200180610aa8602a9139604001915050604051809103906104c36107f0565b6102198363a9059cbb60e01b84846040516001600160a01b0390921660248301526044820152606401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b031690911790526104ca565b60606105f184610717565b61064a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401604051809103906106476107f0565b50505b600080856001600160a01b0316856040518082805190602001908083835b602083106106875780518252601f199092019160209182019101610668565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865a6106c161094a565b5050505050509150503d80600081146106f6576040513d603f01601f191681016040523d815291503d6000602084013e6106fb565b606091505b509150915061070b82828661072c565b925050505b9392505050565b60008082610723610a37565b15159392505050565b6060831561073b575081610710565b60008351111561075c57825180846020016107546107f0565b505050610710565b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107a657808201518382015260200161078e565b50505050905090810190601f1680156107d35780820380516001836020036101000a031916815260200191505b5092505050604051809103906107e76107f0565b50509392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561082857808601518282016040015260200161080d565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156102195760008282015260200161089f565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b60008152602061089f565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061089f565b6385979f76598160e01b815261097d565b80808311156109675750815b92915050565b8080831015610967575090919050565b836004820152846024820152606060448201528760648201526084810160005b898110156109b557808901518282015260200161099d565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af15059610a0a8e3d61096d565b8d01610a16818761095b565b5b82811015610a2b5760008152602001610a17565b50929d50505050505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061089f56fe696e6372656d656e74416e6453656e643a20494e56414c49445f4554485f414d4f554e545361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564";

export class Counter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(overrides || {}) as Promise<Counter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
