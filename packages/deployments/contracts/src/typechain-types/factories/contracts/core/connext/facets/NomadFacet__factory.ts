/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  NomadFacet,
  NomadFacetInterface,
} from "../../../../../contracts/core/connext/facets/NomadFacet";

const _abi = [
  {
    inputs: [],
    name: "BaseConnextFacet__getAdoptedAsset_notWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__nonReentrant_reentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyBridgeRouter_notBridgeRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__whenNotPaused_paused",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__reconcile_alreadyReconciled",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__reconcile_noPortalRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__reconcile_notConnext",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__setBridgeRouter_invalidBridge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldBridgeRouter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newBridgeRouter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "BridgeRouterUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "originDomain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "routers",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "Reconciled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_origin",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_sender",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_localToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes",
      },
    ],
    name: "onReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105db806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063048494fe14610030575b600080fd5b61004361003e366004610359565b610045565b005b851580610067575063ffffffff87166000908152601260205260409020548614155b156100855760405163293e406f60e01b815260040160405180910390fd5b600061009082610467565b60008181526009602052604090205490915060ff16156100c357604051630b7907a560e11b815260040160405180910390fd5b6000818152600960209081526040808320805460ff19166001179055600a82528083208054825181850281018501909352808352919290919083018282801561013557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610117575b5050506000858152602560209081526040808320546024909252822054949550909361016493509091506104a4565b82519091508115801590610179575080600114155b1561019757604051636c32bf4760e11b815260040160405180910390fd5b80156102dd5760006101a982886104d2565b905060005b6101b96001846104e6565b81101561024157816000600b0160008784815181106101da576101da6104fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461023491906104a4565b90915550506001016101ae565b50600061024e8389610513565b61025890836104a4565b905080600b60008761026b6001886104e6565b8151811061027b5761027b6104fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102d591906104a4565b909155505050505b837f0e5f1128fa87ef75539a5e012b42695000db91072e7500fb2723ccbb37d0803c8c858a8a33604051610315959493929190610527565b60405180910390a25050505050505050505050565b803563ffffffff8116811461033e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a03121561037457600080fd5b61037d8861032a565b9650602088013595506103926040890161032a565b94506060880135935060808801356001600160a01b03811681146103b557600080fd5b925060a0880135915060c088013567ffffffffffffffff808211156103d957600080fd5b818a0191508a601f8301126103ed57600080fd5b8135818111156103ff576103ff610343565b604051601f8201601f19908116603f0116810190838211818310171561042757610427610343565b816040528281528d602084870101111561044057600080fd5b82602086016020830137600060208483010152809550505050505092959891949750929550565b80516020808301519190811015610488576000198160200360031b1b821691505b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156104b7576104b761048e565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826104e1576104e16104bc565b500490565b6000828210156104f8576104f861048e565b500390565b634e487b7160e01b600052603260045260246000fd5b600082610522576105226104bc565b500690565b600060a0820163ffffffff88168352602060a08185015281885180845260c086019150828a01935060005b818110156105775784516001600160a01b031683529383019391830191600101610552565b50506001600160a01b039788166040860152606085019690965250505092166080909201919091529291505056fea2646970667358221220b2e631911b9a70f4348a07667b610c2addee1ae6ef9bd40e27a3d7b78b1e9a0664736f6c634300080f0033";

type NomadFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NomadFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NomadFacet__factory extends ContractFactory {
  constructor(...args: NomadFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NomadFacet> {
    return super.deploy(overrides || {}) as Promise<NomadFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NomadFacet {
    return super.attach(address) as NomadFacet;
  }
  override connect(signer: Signer): NomadFacet__factory {
    return super.connect(signer) as NomadFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NomadFacetInterface {
    return new utils.Interface(_abi) as NomadFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NomadFacet {
    return new Contract(address, _abi, signerOrProvider) as NomadFacet;
  }
}
