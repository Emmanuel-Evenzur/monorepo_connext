/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  SendOutboundRootResolver,
  SendOutboundRootResolverInterface,
} from "../../../../../contracts/core/messaging/connectors/SendOutboundRootResolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_connector",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CONNECTOR",
    outputs: [
      {
        internalType: "contract IConnector",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checker",
    outputs: [
      {
        internalType: "bool",
        name: "canExec",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "execPayload",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516102f83803806102f883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516102686100906000396000818160400152609d01526102686000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a5f875441461003b578063cf5303cf1461007f575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b610087610095565b6040516100769291906101dc565b6000606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166365eaf11b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011d91906101ff565b604080516020810183905291925063104c8d4b60e31b910160408051601f198184030181529082905261015291602401610218565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152600194909350915050565b6000815180845260005b818110156101b557602081850181015186830182015201610199565b818111156101c7576000602083870101525b50601f01601f19169290920160200192915050565b82151581526040602082015260006101f7604083018461018f565b949350505050565b60006020828403121561021157600080fd5b5051919050565b60208152600061022b602083018461018f565b939250505056fea26469706673582212202e21b0d0ff7a266f59c29257bd4d354d346e67b73c39817b7f764571afed445d64736f6c634300080f0033";

type SendOutboundRootResolverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SendOutboundRootResolverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SendOutboundRootResolver__factory extends ContractFactory {
  constructor(...args: SendOutboundRootResolverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _connector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SendOutboundRootResolver> {
    return super.deploy(
      _connector,
      overrides || {}
    ) as Promise<SendOutboundRootResolver>;
  }
  override getDeployTransaction(
    _connector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_connector, overrides || {});
  }
  override attach(address: string): SendOutboundRootResolver {
    return super.attach(address) as SendOutboundRootResolver;
  }
  override connect(signer: Signer): SendOutboundRootResolver__factory {
    return super.connect(signer) as SendOutboundRootResolver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SendOutboundRootResolverInterface {
    return new utils.Interface(_abi) as SendOutboundRootResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SendOutboundRootResolver {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SendOutboundRootResolver;
  }
}
