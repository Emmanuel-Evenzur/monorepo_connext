/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ConnextDiamond,
  ConnextDiamondInterface,
  IDiamondCut,
} from "../../../../../contracts/core/connext/helpers/ConnextDiamond";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_contractOwner",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "initContract",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "initData",
            type: "bytes",
          },
        ],
        internalType: "struct ConnextDiamond.Initialization[]",
        name: "_initializations",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ConnextDiamond__fallback_facetNotExit",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040526114f88038038091610017826080610be4565b60803960608112610aa65761002c6080610c07565b60a051916001600160401b038311610aa65760808101609f84011215610aa657826080015161005a81610c1b565b936100686040519586610be4565b81855260208501906080840160a0600585901b83010111610aa65760a08101915b60a0600585901b8301018310610ac057505060c0519150506001600160401b038111610aa65760800181608001601f82011215610aa6578051906100cc82610c1b565b926100da6040519485610be4565b82845260208085019360051b83010191816080018311610aa65760208101935b8385106109e657876001600160a01b0387818a1680610986575b50604051602081016001600160401b0381118282101761097057604052600093848252604051602081019061015c8161014e868686610cbf565b03601f198101835282610be4565b5190206000805160206114b8833981519152546108d1575b50818151865b8181106104125750507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673916101b460405192839283610cbf565b0390a15161020957805191835b8381106101d65760405160b590816113e38239f35b816101e18285610c70565b51511660206101f08386610c70565b5101519080610274575051610209576001905b016101c1565b60405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d707479000000006064820152608490fd5b8151156103a75786918291308103610352575b602082519201905af43d1561034a573d906102a182610c32565b916102af6040519384610be4565b82523d87602084013e5b156102c75750600190610203565b8051156102f65760405162461bcd60e51b8152602060048201529081906102f2906024830190610c9a565b0390fd5b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b6064820152608490fd5b6060906102b9565b6103a260405161036181610bc9565b602881527f4c69624469616d6f6e644375743a205f696e6974206164647265737320686173602082015267206e6f20636f646560c01b6040820152826113b5565b610287565b60405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f7420616464726573732830290000006064820152608490fd5b90915060206104218285610c70565b51015160038110156108bd578061058a57508561043e8285610c70565b515116604061044d8386610c70565b5101519061045d82511515610dbf565b610468811515610e1f565b6001600160a01b03811660009081526000805160206114d883398151915260205260409020546001600160601b0316801561057c575b8251928a915b8483106104bd5750505050506001905b0190839161017a565b8b8b60406001600160e01b03196104d48787610c70565b51169283815260008051602061149883398151915260205220541661051157816105048660019461050994610fcc565b610e80565b9201916104a4565b60405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c72656164792065786973747300000000000000000000006064820152608490fd5b61058582610ed5565b61049e565b6001908082036106ef5750866105a08386610c70565b51511660406105af8487610c70565b510151908151916105c1831515610dbf565b6105cc821515610e1f565b6001600160a01b03821660009081526000805160206114d883398151915260205260409020546001600160601b03169081156106e1575b8b915b84831061061b575050505050506001906104b4565b8c8c60406001600160e01b03196106328787610c70565b511692838152600080516020611498833981519152602052205416918583146106765761050486828461066961066e968d986110bc565b610fcc565b920191610606565b60405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e00000000000000006064820152608490fd5b6106ea83610ed5565b610603565b60020361086857866107018386610c70565b51511660406107108487610c70565b5101519061072082511515610dbf565b6107fd57805190895b82811061073c57505050506001906104b4565b6001600160e01b031961074f8284610c70565b511690635df91ac760e11b821415806107ec575b156107945761078e828c60408f899681526000805160206114988339815191526020522054166110bc565b01610729565b60405162461bcd60e51b815260206004820152602a60248201527f4c69624469616d6f6e644375743a2043616e6e6f742072656d6f7665206375746044820152692073656c6563746f727360b01b6064820152608490fd5b506307e4c70760e21b821415610763565b60405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d7573742062652061646472657373283029000000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b6064820152608490fd5b634e487b7160e01b88526021600452602488fd5b8086527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1321908160205260408720548015159081610965575b501561092057865260205284604081205585610174565b60405162461bcd60e51b815260206004820152601d60248201527f4c69624469616d6f6e643a2064656c6179206e6f7420656c61707365640000006044820152606490fd5b905042101588610909565b634e487b7160e01b600052604160045260246000fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320908154818582167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600160a01b03191617905583610114565b84516001600160401b038111610aa6578201604060608286030112610aa65760408051919082016001600160401b03811183821017610aab57604052610a2e60208201610c07565b82526040810151906001600160401b038211610aa657019184608001603f84011215610aa657602083015191610a6383610c32565b610a706040519182610be4565b8381528660800160408587010111610aa657610a9760209594869560408785019101610c4d565b838201528152019401936100fa565b600080fd5b60246000634e487b7160e01b81526041600452fd5b82516001600160401b038111610aa657820160808101906060908703601f190112610aa65760405190606082016001600160401b03811183821017610aab57604052610b0e60208201610c07565b825260408101516003811015610aa65760208301526060810151906001600160401b038211610aa6570186608001603f82011215610aa657602081015190610b5582610c1b565b91610b636040519384610be4565b808352602083018960800160408360051b85010111610aa65760408301905b60408360051b8501018210610ba857505050506040820152815260209283019201610089565b81516001600160e01b031981168103610aa657815260209182019101610b82565b606081019081106001600160401b0382111761097057604052565b601f909101601f19168101906001600160401b0382119082101761097057604052565b51906001600160a01b0382168203610aa657565b6001600160401b0381116109705760051b60200190565b6001600160401b03811161097057601f01601f191660200190565b60005b838110610c605750506000910152565b8181015183820152602001610c50565b8051821015610c845760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b90602091610cb381518092818552858086019101610c4d565b601f01601f1916010190565b919091606092838201848352815180915260809485840191868160051b860101966020809501936000915b838310610d1357505050505050906000610d109493928201526040818403910152610c9a565b90565b909192939498607f198882030183528951908681019060018060a01b038351168152888301516003811015610da95784828b9594939286809401528a604080960151958201528451809452019201906000905b808210610d855750505090806001929b01930193019194939290610cea565b82516001600160e01b03191684528a94938401939092019160019190910190610d66565b634e487b7160e01b600052602160045260246000fd5b15610dc657565b60405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b6064820152608490fd5b15610e2657565b60405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201526b65206164647265737328302960a01b6064820152608490fd5b6001600160601b03908116908114610e985760010190565b634e487b7160e01b600052601160045260246000fd5b6000805160206114b88339815191528054821015610c845760005260206000200190600090565b610f21604051610ee481610bc9565b602481527f4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20602082015263636f646560e01b6040820152826113b5565b6000805160206114b883398151915280546001600160a01b03831660009081526000805160206114d8833981519152602052604090206001018190559190680100000000000000008310156109705782610f83916001610fa795019055610eae565b90919082549060031b9160018060a01b039283811b93849216901b16911916179055565b565b9190918054831015610c8457600052601c60206000208360031c019260021b1690565b6001600160e01b03198116600081815260008051602061149883398151915260208190526040822080546001600160a01b031660a09690961b6001600160a01b031916959095179094559194939092906001600160a01b03168083526000805160206114d883398151915260205260408320805491949190680100000000000000008210156110a8579661106d826040979899600161108f95018155610fa9565b90919082549060031b9163ffffffff831b92839160e01c901b16911916179055565b82526020522080546001600160a01b0319169091179055565b634e487b7160e01b85526041600452602485fd5b9091906001600160a01b03908116801561134a573081146112ee5763ffffffff60e01b809416600092818452600080516020611498833981519152926020918483526040948587205460a01c908388526000805160206114d88339815191529586865287892054926000199b8c85019485116112da57908991888c898c8980870361126c575b505090525050508787525087892080548015611258578c01906111658282610fa9565b63ffffffff82549160031b1b19169055558852845286868120551561118f575b5050505050509050565b6000805160206114b8833981519152805489810190811161124457838852858552826001888a20015491808303611212575b50505080549889156111fe57600197989901916111dd83610eae565b909182549160031b1b19169055558552528220015580388080808080611185565b634e487b7160e01b88526031600452602488fd5b61121b90610eae565b90549060031b1c1661123081610f8384610eae565b8852858552600187892001553882816111c1565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b8b52603160045260248bfd5b6112cd978461106d9361128b8a94876112a19952828a52848420610fa9565b90549060031b1c60e01b97889683525220610fa9565b168b52838852898b2080546001600160a01b031660a09290921b6001600160a01b031916919091179055565b873880888c898c89611142565b634e487b7160e01b8b52601160045260248bfd5b60405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b6064820152608490fd5b60405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e27742065786973740000000000000000006064820152608490fd5b3b156113be5750565b60405162461bcd60e51b8152602060048201529081906102f2906024830190610c9a56fe60806040523615607d57600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c60205260408120546001600160a01b03168015606c57818091368280378136915af43d82803e156068573d90f35b3d90fd5b638249a7f160e01b60805260046080fd5b00fea264697066735822122047ae6ece4d4a3399d29f34086fb46fd92a947529f4ef2c74caef457df56c0c4464736f6c63430008110033c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131cc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131ec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d";

type ConnextDiamondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnextDiamondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnextDiamond__factory extends ContractFactory {
  constructor(...args: ConnextDiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _contractOwner: PromiseOrValue<string>,
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _initializations: ConnextDiamond.InitializationStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnextDiamond> {
    return super.deploy(
      _contractOwner,
      _diamondCut,
      _initializations,
      overrides || {}
    ) as Promise<ConnextDiamond>;
  }
  override getDeployTransaction(
    _contractOwner: PromiseOrValue<string>,
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _initializations: ConnextDiamond.InitializationStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _contractOwner,
      _diamondCut,
      _initializations,
      overrides || {}
    );
  }
  override attach(address: string): ConnextDiamond {
    return super.attach(address) as ConnextDiamond;
  }
  override connect(signer: Signer): ConnextDiamond__factory {
    return super.connect(signer) as ConnextDiamond__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnextDiamondInterface {
    return new utils.Interface(_abi) as ConnextDiamondInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnextDiamond {
    return new Contract(address, _abi, signerOrProvider) as ConnextDiamond;
  }
}
