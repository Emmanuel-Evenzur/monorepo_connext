/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  InboxFacet,
  InboxFacetInterface,
} from "../../../../../contracts/core/connext/facets/InboxFacet";

const _abi = [
  {
    inputs: [],
    name: "BaseConnextFacet__getAdoptedAsset_notWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__nonReentrant_reentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyBridgeRouter_notBridgeRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__whenNotPaused_paused",
    type: "error",
  },
  {
    inputs: [],
    name: "InboxFacet__handle_notTransfer",
    type: "error",
  },
  {
    inputs: [],
    name: "InboxFacet__onlyRemoteRouter_notRemote",
    type: "error",
  },
  {
    inputs: [],
    name: "InboxFacet__onlyReplica_notReplica",
    type: "error",
  },
  {
    inputs: [],
    name: "InboxFacet__reconcile_alreadyReconciled",
    type: "error",
  },
  {
    inputs: [],
    name: "InboxFacet__reconcile_noPortalRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "InboxFacet__reconcile_notConnext",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint64",
        name: "originAndNonce",
        type: "uint64",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "liquidityProvider",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Receive",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "originDomain",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "local",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "routers",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "Reconciled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_origin",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "_nonce",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_sender",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "handle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611479806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ab2dc3f514610030575b600080fd5b61004361003e366004611168565b610045565b005b61004e3361013c565b61006b5760405163761c560f60e11b815260040160405180910390fd5b838261007782826101b1565b610094576040516346b4a0e960e01b815260040160405180910390fd5b60006100ae6100a385836101db565b62ffffff19166101ff565b905060006100c162ffffff198316610218565b905060006100d462ffffff19841661024d565b90506100e562ffffff1982166102a5565b61010257604051632af392f960e11b815260040160405180910390fd5b6000806101118b8b86866102b2565b9150915061012f6101278462ffffff19166105b6565b8c84846105cb565b5050505050505050505050565b602754604051635190bc5360e01b81526001600160a01b0383811660048301526000921690635190bc5390602401602060405180830381865afa158015610187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ab9190611244565b92915050565b63ffffffff8216600090815260126020526040812054821480156101d457508115155b9392505050565b8151600090602084016101f664ffffffffff8516828461086b565b95945050505050565b60006101ab61020d836108b2565b62ffffff19166108e4565b600081600261022f815b62ffffff19841690610944565b5061024562ffffff198516600060246001610a1d565b949350505050565b600081600261025b81610222565b5060006102766024601887901c6001600160601b0316611292565b9050600061028386610a8d565b60ff16905061029b62ffffff19871660248484610a1d565b9695505050505050565b60006101ab826003610aa2565b6004546000908190819064010000000090046001600160a01b031663b869d89a6102e162ffffff198816610b01565b6102f062ffffff198916610b23565b6040516001600160e01b031960e085901b16815263ffffffff92909216600483015260248201526044016020604051808303816000875af1158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d91906112a9565b9050600061037062ffffff198616610b45565b9050806000036103f057306001600160a01b03831667ffffffff0000000060208b901b1663ffffffff8a161760408051600081526020810186905267ffffffffffffffff92909216917f9f9a97db84f39202ca3b409b63f7ccf7d3fd810e176573c7483088b6f181bbbb910160405180910390a4509150600090506105ad565b6004805460405163c86415cb60e01b81526001600160a01b03858116938201939093526401000000009091049091169063c86415cb90602401602060405180830381865afa158015610446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046a9190611244565b61053d576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038316906340c10f1990604401600060405180830381600087803b1580156104b657600080fd5b505af11580156104ca573d6000803e3d6000fd5b50505050816001600160a01b031663cc2ab7c76104ec8762ffffff1916610b5a565b6040518263ffffffff1660e01b815260040161050a91815260200190565b600060405180830381600087803b15801561052457600080fd5b505af1158015610538573d6000803e3d6000fd5b505050505b306001600160a01b03831667ffffffff0000000060208b901b1663ffffffff8a161760408051600081526020810186905267ffffffffffffffff92909216917f9f9a97db84f39202ca3b409b63f7ccf7d3fd810e176573c7483088b6f181bbbb910160405180910390a490925090505b94509492505050565b60006101ab62ffffff19831660416020610b6b565b60008481526009602052604090205460ff16156105fb57604051638f6bc06f60e01b815260040160405180910390fd5b6000848152600960209081526040808320805460ff19166001179055600a82528083208054825181850281018501909352808352919290919083018282801561066d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161064f575b5050506000888152602560209081526040808320546024909252822054949550909361069c93509091506112d2565b825190915081158015906106b1575080600114155b156106cf5760405163d3bd901560e01b815260040160405180910390fd5b80156108155760006106e18286611300565b905060005b6106f1600184611292565b81101561077957816000600b01600087848151811061071257610712611314565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020600082825461076c91906112d2565b90915550506001016106e6565b506000610786838761132a565b61079090836112d2565b905080600b6000876107a3600188611292565b815181106107b3576107b3611314565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020600082825461080d91906112d2565b909155505050505b846001600160a01b03168663ffffffff16887f30bf44531c04b96173a40012c90db840a147cf7d50a3e160f5227f1af2faa3a086883360405161085a9392919061133e565b60405180910390a450505050505050565b60008061087883856112d2565b9050604051811115610888575060005b8060000361089d5762ffffff199150506101d4565b5050606092831b9190911790911b1760181b90565b60006108bd82610cc7565b156108da576301000000600160d81b038216600160d91b176101ab565b62ffffff196101ab565b60006108ef82610cea565b6109405760405162461bcd60e51b815260206004820152601960248201527f56616c696469747920617373657274696f6e206661696c65640000000000000060448201526064015b60405180910390fd5b5090565b60006109508383610d27565b610a1657600061096f6109638560d81c90565b64ffffffffff16610d4a565b91505060006109848464ffffffffff16610d4a565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b815260040161093791906113a2565b5090919050565b600080610a338660781c6001600160601b031690565b6001600160601b03169050610a4786610df8565b84610a5287846112d2565b610a5c91906112d2565b1115610a6f5762ffffff19915050610245565b610a7985826112d2565b905061029b8364ffffffffff16828661086b565b60006101ab62ffffff19831660246001610e31565b6000816003811115610ab657610ab6611266565b60ff16610ac284610e61565b60ff161480156101d45750816003811115610adf57610adf611266565b610ae884610e75565b6003811115610af957610af9611266565b149392505050565b6000816001610b0f81610222565b5061024562ffffff19851660006004610e31565b6000816001610b3181610222565b5061024562ffffff19851660046020610b6b565b60006101ab62ffffff19831660016020610e31565b60006101ab62ffffff198316602160205b60008160ff16600003610b80575060006101d4565b610b938460181c6001600160601b031690565b6001600160601b0316610ba960ff8416856112d2565b1115610c0d57610bf4610bc58560781c6001600160601b031690565b6001600160601b0316610be18660181c6001600160601b031690565b6001600160601b0316858560ff16610e90565b60405162461bcd60e51b815260040161093791906113a2565b60208260ff161115610c875760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610937565b600882026000610ca08660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000601882901c6001600160601b0316610ce3606160246112d2565b1492915050565b6000610cf68260d81c90565b64ffffffffff1664ffffffffff03610d1057506000919050565b6000610d1b83610df8565b60405110199392505050565b60008164ffffffffff16610d3b8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff161115610d9f576000610d698260086113f7565b60ff1685901c9050610d7a81610fba565b61ffff16841793508160ff16601014610d9557601084901b93505b5060001901610d50565b50600f5b60ff8160ff161015610df2576000610dbc8260086113f7565b60ff1685901c9050610dcd81610fba565b61ffff16831792508160ff16600014610de857601083901b92505b5060001901610da3565b50915091565b6000610e0d8260181c6001600160601b031690565b610e208360781c6001600160601b031690565b016001600160601b03169050919050565b6000610e3e826020611420565b610e499060086113f7565b60ff16610e57858585610b6b565b901c949350505050565b60006101ab62ffffff198316826001610e31565b600060d882901c60ff1660038111156101ab576101ab611266565b60606000610e9d86610d4a565b9150506000610eab86610d4a565b9150506000610eb986610d4a565b9150506000610ec786610d4a565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b6000610fcc60048360ff16901c610fec565b60ff1661ffff919091161760081b610fe382610fec565b60ff1617919050565b600060f08083179060ff821690036110075750603092915050565b8060ff1660f10361101b5750603192915050565b8060ff1660f20361102f5750603292915050565b8060ff1660f3036110435750603392915050565b8060ff1660f4036110575750603492915050565b8060ff1660f50361106b5750603592915050565b8060ff1660f60361107f5750603692915050565b8060ff1660f7036110935750603792915050565b8060ff1660f8036110a75750603892915050565b8060ff1660f9036110bb5750603992915050565b8060ff1660fa036110cf5750606192915050565b8060ff1660fb036110e35750606292915050565b8060ff1660fc036110f75750606392915050565b8060ff1660fd0361110b5750606492915050565b8060ff1660fe0361111f5750606592915050565b8060ff1660ff036111335750606692915050565b50919050565b803563ffffffff8116811461114d57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561117e57600080fd5b61118785611139565b935061119560208601611139565b925060408501359150606085013567ffffffffffffffff808211156111b957600080fd5b818701915087601f8301126111cd57600080fd5b8135818111156111df576111df611152565b604051601f8201601f19908116603f0116810190838211818310171561120757611207611152565b816040528281528a602084870101111561122057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60006020828403121561125657600080fd5b815180151581146101d457600080fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156112a4576112a461127c565b500390565b6000602082840312156112bb57600080fd5b81516001600160a01b03811681146101d457600080fd5b600082198211156112e5576112e561127c565b500190565b634e487b7160e01b600052601260045260246000fd5b60008261130f5761130f6112ea565b500490565b634e487b7160e01b600052603260045260246000fd5b600082611339576113396112ea565b500690565b606080825284519082018190526000906020906080840190828801845b828110156113805781516001600160a01b03168452928401929084019060010161135b565b50505090830194909452506001600160a01b0391909116604090910152919050565b600060208083528351808285015260005b818110156113cf578581018301518582016040015282016113b3565b818111156113e1576000604083870101525b50601f01601f1916929092016040019392505050565b600060ff821660ff84168160ff04811182151516156114185761141861127c565b029392505050565b600060ff821660ff84168082101561143a5761143a61127c565b9003939250505056fea2646970667358221220c305813c6658456c712c42d3abb3ef2d7622a1a6a2324e9dc72b724f2776616e64736f6c634300080f0033";

type InboxFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InboxFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InboxFacet__factory extends ContractFactory {
  constructor(...args: InboxFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<InboxFacet> {
    return super.deploy(overrides || {}) as Promise<InboxFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): InboxFacet {
    return super.attach(address) as InboxFacet;
  }
  override connect(signer: Signer): InboxFacet__factory {
    return super.connect(signer) as InboxFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InboxFacetInterface {
    return new utils.Interface(_abi) as InboxFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InboxFacet {
    return new Contract(address, _abi, signerOrProvider) as InboxFacet;
  }
}
