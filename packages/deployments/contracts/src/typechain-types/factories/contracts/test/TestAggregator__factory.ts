/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestAggregator,
  TestAggregatorInterface,
} from "../../../contracts/test/TestAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "TestAggregator_Stopped",
    type: "error",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
    ],
    name: "updateMockAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_updateAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "_answeredInRound",
        type: "uint80",
      },
    ],
    name: "updateMockData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461012957601f61059138819003918201601f19168301916001600160401b0383118484101761012e57808492602094604052833981010312610129575160ff81168091036101295760ff1990600091601281845416178355600180548181811c9116801561011f575b602082101461010b57601f81116100df575b5060327f436861696e6c696e6b20546573742041676772656761746f72000000000000000181558060025560018060501b0319818160035416176003558160045560065416176006558254161790554260055560405161044c90816101458239f35b81855281601f60208720920160051c8201915b82811061010057505061007d565b8681550182906100f2565b634e487b7160e01b85526022600452602485fd5b90607f169061006b565b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816307da68f514610387578163313ce5671461036a5750806354fd4d501461034b578063575ac1e61461033157806364052980146102d25780637284e416146101755780639a6fc8f5146101155763feaf968c1461007b57600080fd5b346101115782600319360112610111576006549160ff8360501c166101045790610100916100c56001600160501b03956100bf60ff886003541695549254166103cc565b906103f3565b60055491519586951692859293608092959460a08501966001600160501b038094168652602086015260006040860152606085015216910152565b0390f35b516330a0505160e01b8152fd5b8280fd5b50919034610171576020366003190112610171576101316103b1565b906006549260ff8460501c1661016157906100c561010093926100bf60ff6001600160501b0398549254166103cc565b81516330a0505160e01b81528590fd5b5080fd5b50903461011157826003193601126101115780518360019485549081871c8783169788156102c8575b6020938483108a146102b557848798999a8489529182600014610299575050600114610246575b5050601f801995869203011683019583871067ffffffffffffffff881117610233575085929391838652818452845191828186015281955b83871061021b5750508394508582601f949501015201168101030190f35b868101820151898801890152958101958895506101fd565b634e487b7160e01b835260419052602482fd5b8085528492507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410610283575050508301810138806101c5565b805488850186015287965092840192810161026e565b925093505060ff191682860152151560051b84010138806101c5565b634e487b7160e01b865260228952602486fd5b90607f169061019e565b838234610171576080366003190112610171576102ed6103b1565b606435916001600160501b0380841680940361032d576001600160501b031992168260035416176003556024359055604435600555600654161760065580f35b8480fd5b838234610171576020366003190112610171578035905580f35b5050346101715781600319360112610171576020906002549051908152f35b84903461017157816003193601126101715760ff60209254168152f35b84346103ae57806003193601126103ae576006805460ff60501b1916600160501b17905580f35b80fd5b600435906001600160501b03821682036103c757565b600080fd5b60ff16604d81116103dd57600a0a90565b634e487b7160e01b600052601160045260246000fd5b818102929160008212600160ff1b8214166103dd5781840514901517156103dd5756fea2646970667358221220b82289009accd3aa6a27e83cec30ea526e065bf248050ee901a21d16b2ec1e8264736f6c63430008110033";

type TestAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestAggregator__factory extends ContractFactory {
  constructor(...args: TestAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestAggregator> {
    return super.deploy(_decimals, overrides || {}) as Promise<TestAggregator>;
  }
  override getDeployTransaction(
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_decimals, overrides || {});
  }
  override attach(address: string): TestAggregator {
    return super.attach(address) as TestAggregator;
  }
  override connect(signer: Signer): TestAggregator__factory {
    return super.connect(signer) as TestAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAggregatorInterface {
    return new utils.Interface(_abi) as TestAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAggregator {
    return new Contract(address, _abi, signerOrProvider) as TestAggregator;
  }
}
