/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  UpgradeBeacon,
  UpgradeBeaconInterface,
} from "../../../../contracts/shared/upgrade/UpgradeBeacon";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_initialImplementation",
        type: "address",
      },
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgrade",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
] as const;

const _bytecode =
  "0x60a0601f61029938819003918201601f19168301916001600160401b038311848410176101365780849260409485528339810103126101315761004d60206100468361014c565b920161014c565b6000546001600160a01b03838116939082168414610101573b156100bc576001600160a01b0319168217600090815560405192907ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d9080a26080526101389081610161823960805181600a0152f35b60405162461bcd60e51b815260206004820152601860248201527f696d706c656d656e746174696f6e2021636f6e747261637400000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526008602482015267217570677261646560c01b6044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101315756fe6001600160a01b03337f000000000000000000000000000000000000000000000000000000000000000082161461003c5760005460005260206000f35b60003581600054169181168092146100d957803b1561009b57600080546001600160a01b0319166001600160a01b039092169190911790557ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d600080a2005b62461bcd60e51b6080526020608452601860a4527f696d706c656d656e746174696f6e2021636f6e7472616374000000000000000060c45260646080fd5b62461bcd60e51b6080526020608452600860a45267217570677261646560c01b60c45260646080fdfea2646970667358221220c476995ce15ad64ef1a76a3eb0f861ab755154d83b2926dfcd5bf573f0dbe26d64736f6c63430008110033";

type UpgradeBeaconConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UpgradeBeaconConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UpgradeBeacon__factory extends ContractFactory {
  constructor(...args: UpgradeBeaconConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _initialImplementation: PromiseOrValue<string>,
    _controller: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<UpgradeBeacon> {
    return super.deploy(
      _initialImplementation,
      _controller,
      overrides || {}
    ) as Promise<UpgradeBeacon>;
  }
  override getDeployTransaction(
    _initialImplementation: PromiseOrValue<string>,
    _controller: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _initialImplementation,
      _controller,
      overrides || {}
    );
  }
  override attach(address: string): UpgradeBeacon {
    return super.attach(address) as UpgradeBeacon;
  }
  override connect(signer: Signer): UpgradeBeacon__factory {
    return super.connect(signer) as UpgradeBeacon__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UpgradeBeaconInterface {
    return new utils.Interface(_abi) as UpgradeBeaconInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UpgradeBeacon {
    return new Contract(address, _abi, signerOrProvider) as UpgradeBeacon;
  }
}
