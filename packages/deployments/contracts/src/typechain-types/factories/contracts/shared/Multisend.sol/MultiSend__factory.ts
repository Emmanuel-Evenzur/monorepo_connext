/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MultiSend,
  MultiSendInterface,
} from "../../../../contracts/shared/Multisend.sol/MultiSend";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "transactions",
        type: "bytes",
      },
    ],
    name: "multiSend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50306080526080516102be61002f6000396000605001526102be6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638d80ff0a14610030575b600080fd5b61004361003e3660046101d7565b610045565b005b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100da5760405162461bcd60e51b815260206004820152602f60248201527f4d756c746953656e642073686f756c64206e6f742062652063616c6c6564207660448201526e1a584819195b1959d85d1958d85b1b608a1b60648201526084015b60405180910390fd5b333b156101395760405162461bcd60e51b815260206004820152602760248201527f4d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642060448201526676696120454f4160c81b60648201526084016100d1565b805160205b818110156101bc578083015160f81c6001820184015160601c60158301850151603584018601516055850187016000856000811461018357600181146101935761019e565b6000808585888a5af1915061019e565b6000808585895af491505b50806101a957600080fd5b505080605501850194505050505061013e565b505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156101e957600080fd5b813567ffffffffffffffff8082111561020157600080fd5b818401915084601f83011261021557600080fd5b813581811115610227576102276101c1565b604051601f8201601f19908116603f0116810190838211818310171561024f5761024f6101c1565b8160405282815287602084870101111561026857600080fd5b82602086016020830137600092810160200192909252509594505050505056fea26469706673582212206fc5ba057de74e8b0df86ed7a2e7ac5019194f36c017c6c7619b46e1f7f6cfd064736f6c63430008110033";

type MultiSendConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiSendConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiSend__factory extends ContractFactory {
  constructor(...args: MultiSendConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiSend> {
    return super.deploy(overrides || {}) as Promise<MultiSend>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiSend {
    return super.attach(address) as MultiSend;
  }
  override connect(signer: Signer): MultiSend__factory {
    return super.connect(signer) as MultiSend__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiSendInterface {
    return new utils.Interface(_abi) as MultiSendInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiSend {
    return new Contract(address, _abi, signerOrProvider) as MultiSend;
  }
}
