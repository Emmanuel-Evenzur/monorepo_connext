/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  PolygonHubConnector,
  PolygonHubConnectorInterface,
} from "../../../../../contracts/messaging/connectors/polygon/PolygonHubConnector";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "_mirrorDomain",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_amb",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rootManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_mirrorConnector",
        type: "address",
      },
      {
        internalType: "address",
        name: "_checkPointManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Connector__processMessage_notUsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__ownershipDelayElapsed_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_noOwnershipChange",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_noProposal",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "MessageProcessed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "encodedData",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previous",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "current",
        type: "address",
      },
    ],
    name: "MirrorConnectorUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "domain",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "mirrorDomain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "amb",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "rootManager",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "mirrorConnector",
        type: "address",
      },
    ],
    name: "NewConnector",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proposedOwner",
        type: "address",
      },
    ],
    name: "OwnershipProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "AMB",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DOMAIN",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIRROR_DOMAIN",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_MANAGER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SEND_MESSAGE_EVENT_SIG",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "acceptProposedOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "checkpointManager",
    outputs: [
      {
        internalType: "contract ICheckpointManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fxChildTunnel",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fxRoot",
    outputs: [
      {
        internalType: "contract IFxStateSender",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mirrorConnector",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "processMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "processedExits",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newlyProposed",
        type: "address",
      },
    ],
    name: "proposeNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proposed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposedTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "inputData",
        type: "bytes",
      },
    ],
    name: "receiveMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounced",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_encodedData",
        type: "bytes",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_mirrorConnector",
        type: "address",
      },
    ],
    name: "setMirrorConnector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_expected",
        type: "address",
      },
    ],
    name: "verifySender",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x61010034620002e057601f6200247738819003918201601f191683019291906001600160401b03841183851017620002e5578160c09284926040968752833981010312620002e0576200005281620002fb565b60209162000062838201620002fb565b91620000708583016200030d565b6200007e606084016200030d565b916200009b60a062000093608087016200030d565b95016200030d565b926000549588519260018060a01b039633888a167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600160a01b031998891633176000908155600255600180548a16905563ffffffff828116959094908615620002af5750888116928315620002775760805260a087905260c05260e0839052871690888a8c84620001ca575b51978a168089529b88019290925250508985015216917f4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f090606090a316816005541617600555600454161760045551612154908162000323823960805181610607015260a05181818161057e0152610a96015260c0518181816104050152818161074a0152610da9015260e05181818161025a0152610df10152f35b907fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc8593928c856003549483519286168352820152a11617600355600654888116620002205789168217600655888a8c6200012e565b8b5162461bcd60e51b8152600481018c9052602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b6064820152608490fd5b8c5162461bcd60e51b8152600481018d9052601160248201527032b6b83a3c903937b7ba26b0b730b3b2b960791b6044820152606490fd5b62461bcd60e51b8152600481018c9052600c60248201526b32b6b83a3c903237b6b0b4b760a11b6044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b519063ffffffff82168203620002e057565b51906001600160a01b0382168203620002e05756fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630e387de6146101e757806314168416146101de5780633cf52ffb146101d557806348e6fa23146101cc5780634ff746f6146101c357806352a9674b146101ba5780635bd11efc146101b15780635f61e3ec146101a8578063607f2d421461019f5780636a42b8f814610196578063715018a61461018d5780638da5cb5b14610184578063972c49281461017b578063b1f8100d14610172578063c0857ba014610169578063c5b350df14610160578063cc39428314610157578063d1851c921461014e578063d232c22014610145578063d69f9d611461013c578063db1b765914610133578063de9b771f1461012a5763f953cec70361000e57610125610b17565b61000e565b50610125610aed565b50610125610ac5565b50610125610a7f565b50610125610a54565b50610125610a2a565b50610125610a00565b5061012561099c565b50610125610972565b506101256108ba565b50610125610890565b50610125610866565b506101256107ca565b506101256107ab565b50610125610779565b50610125610733565b5061012561063c565b506101256105e9565b5061012561056c565b506101256103b0565b5061012561027e565b5061012561023c565b50610125610200565b60009103126101fb57565b600080fd5b50346101fb5760003660031901126101fb5760206040517f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0368152f35b50346101fb5760003660031901126101fb57602060405163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101fb5760003660031901126101fb576020600254604051908152f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116102c857604052565b6102d061029d565b604052565b6020810190811067ffffffffffffffff8211176102c857604052565b6040810190811067ffffffffffffffff8211176102c857604052565b90601f8019910116810190811067ffffffffffffffff8211176102c857604052565b6040519061033c826102f1565b565b60209067ffffffffffffffff811161035c575b601f01601f19160190565b61036461029d565b610351565b81601f820112156101fb578035906103808261033e565b9261038e604051948561030d565b828452602083830101116101fb57816000926020809301838601378301015290565b506040806003193601126101fb5767ffffffffffffffff600480358281116101fb576103df9036908301610369565b916024359081116101fb576103f79036908301610369565b6001600160a01b03939091907f00000000000000000000000000000000000000000000000000000000000000008516330361050c5782516104da57848254169460065416853b156101fb5760006104af937fdcaa37a042a0087de79018c629bbd29cee82ca80bd9be394e1696bf9e935507797845193849263b472047760e01b8452830152846024830152818381610492604482018c610cf7565b03925af180156104cd575b6104b4575b5051928392339184610d44565b0390a1005b806104c16104c7926102b4565b806101f0565b386104a2565b6104d5610d6e565b61049d565b906020606492519162461bcd60e51b8352820152600c60248201526b042c8c2e8c240d8cadccee8d60a31b6044820152fd5b906020606492519162461bcd60e51b8352820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b6044820152fd5b60206003198201126101fb576004359067ffffffffffffffff82116101fb5761056991600401610369565b90565b50346101fb5761057b3661053e565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036105be576040516316c2fdb560e21b8152600490fd5b606460405162461bcd60e51b815260206004820152600460248201526310a0a6a160e11b6044820152fd5b50346101fb5760003660031901126101fb57602060405163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6001600160a01b038116036101fb57565b50346101fb5760203660031901126101fb5760043561065a8161062b565b6000546001600160a01b03908116330361072157600354907fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc60408281519581861687521694856020820152a16001600160a01b031991821683176003556006549081166106c9571617600655005b60405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b6064820152608490fd5b6040516311a8a1bb60e31b8152600490fd5b50346101fb5760003660031901126101fb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101fb5760203660031901126101fb576004356000526007602052602060ff604060002054166040519015158152f35b50346101fb5760003660031901126101fb57602060405162093a808152f35b50346101fb576000806003193601126108635780546001600160a01b0390811633036107215760025462093a80814203428111610856575b1115610844571561083257600154166108205761081d61206a565b80f35b6040516323295ef960e01b8152600490fd5b604051630e4b303f60e21b8152600490fd5b6040516324e0285f60e21b8152600490fd5b61085e611202565b610802565b80fd5b50346101fb5760003660031901126101fb576000546040516001600160a01b039091168152602090f35b50346101fb5760003660031901126101fb576006546040516001600160a01b039091168152602090f35b50346101fb5760203660031901126101fb576004356108d88161062b565b6000546001600160a01b039190821633810361072157826001549216809383161480610967575b61095557821461094357426002556001600160a01b03191681176001557f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a600080a2005b604051634a2fb73f60e11b8152600490fd5b6040516311bc066560e11b8152600490fd5b5060025415156108ff565b50346101fb5760003660031901126101fb576005546040516001600160a01b039091168152602090f35b50346101fb5760003660031901126101fb576001546001600160a01b03163381036109ee5762093a8060025442034281116109e1575b111561084457610019906120bf565b6109e9611202565b6109d2565b6040516311a7f27160e11b8152600490fd5b50346101fb5760003660031901126101fb576003546040516001600160a01b039091168152602090f35b50346101fb5760003660031901126101fb576001546040516001600160a01b039091168152602090f35b50346101fb5760003660031901126101fb576000546040516001600160a01b03909116158152602090f35b50346101fb5760003660031901126101fb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101fb5760203660031901126101fb57610ae260043561062b565b602060405160008152f35b50346101fb5760003660031901126101fb576004546040516001600160a01b039091168152602090f35b50346101fb57610019610ccf610cc0610b37610b323661053e565b6110a0565b610c77610b438261146c565b91610b4d816111a2565b90610bd3610bc6610b5d86611860565b610b7e610b8c610b6c86611485565b60405192839160208301958a87610ec6565b03601f19810183528261030d565b519020610bb6610bb0610ba9836000526007602052604060002090565b5460ff1690565b15610eeb565b6000526007602052604060002090565b805460ff19166001179055565b6020610c4c610c47610be4846112be565b610bed816114b7565b600654909890610c29906001600160a01b0316610c18610c0c8c611529565b6001600160a01b031690565b6001600160a01b0390911614610f43565b610c32866111ea565b948592015190610c4187611453565b916115ee565b610f9d565b610c55826111ba565b610c5e836111d2565b90610c71610c6b85611159565b9461117c565b94611dfa565b50610cbb7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610cb5610cb0610cab85611565565b6115a9565b611b1b565b14610ff5565b61158e565b60208082518301019101611041565b610d9e565b60005b838110610ce75750506000910152565b8181015183820152602001610cd7565b90602091610d1081518092818552858086019101610cd4565b601f01601f1916010190565b90610d34602091949394604084526040840190610cf7565b6001600160a01b03909416910152565b91610d3490610d60604093969596606086526060860190610cf7565b908482036020860152610cf7565b506040513d6000823e3d90fd5b602081519101519060208110610d8f575090565b6000199060200360031b1b1690565b6020815103610e97577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610dda82610d7b565b91813b156101fb5760405163473ec9fd60e11b81527f000000000000000000000000000000000000000000000000000000000000000063ffffffff16600482015260248101939093527fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced92610e72926000908290604490829084905af18015610e8a575b610e77575b50604051918291339083610d1c565b0390a1565b806104c1610e84926102b4565b38610e63565b610e92610d6e565b610e5e565b60405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b6044820152606490fd5b60409392918152610ee08251809360208085019101610cd4565b019060208201520190565b15610ef257565b60405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b6064820152608490fd5b15610f4a57565b60405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b6064820152608490fd5b15610fa457565b60405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b6064820152608490fd5b15610ffc57565b60405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245006044820152606490fd5b6020818303126101fb5780519067ffffffffffffffff82116101fb570181601f820112156101fb5780516110748161033e565b92611082604051948561030d565b818452602082840101116101fb576105699160208085019101610cd4565b6110bb6110c09160606040516110b5816102d5565b526119ad565b6119fa565b604051906110cd826102d5565b815290565b50634e487b7160e01b600052603260045260246000fd5b60e0908051600610156110fa570190565b6111026110d2565b0190565b6020908051156110fa570190565b6040908051600110156110fa570190565b610220908051601010156110fa570190565b602091815181101561114c575b60051b010190565b6111546110d2565b611144565b6020610569915180511561116f575b0151611b1b565b6111776110d2565b611168565b60406105699151805160011015611195575b0151611bbd565b61119d6110d2565b61118e565b6060610569915180516002101561116f570151611b1b565b6080610569915180516003101561116f570151611b1b565b60a0610569915180516004101561116f570151611b1b565b60c0610569915180516005101561116f570151611b1b565b50634e487b7160e01b600052601160045260246000fd5b60001981019190821161122857565b61033c611202565b60011981019190821161122857565b60bf1981019190821161122857565b607f1981019190821161122857565b60b61981019190821161122857565b9190820391821161122857565b60405190611286826102d5565b60008252565b906112968261033e565b6112a3604051918261030d565b82815280926112b4601f199161033e565b0190602036910137565b604051906060820182811067ffffffffffffffff82111761136c575b6040526060825261133360208301916060835260408401926000845261131461130c61130684516110e9565b51611bbd565b8083526119ad565b61131d81611ac8565b156113385761132c91506119fa565b8452611485565b905290565b506110bb61132c91516113676113566113518351611219565b61128c565b9182519083602001906021016113cd565b6119ad565b61137461029d565b6112da565b906020820180921161122857565b906001820180921161122857565b906002820180921161122857565b9190820180921161122857565b601f81116113c0575b6101000a90565b6113c8611202565b6113b9565b9091801561141b575b601f811161142057801561141b576113fb611400916020036020811161140e576113b0565b611219565b905182518216911916179052565b611416611202565b6113b0565b505050565b91906114328161143892518452611379565b91611379565b91601f198101908111156113d65761144e611202565b6113d6565b6101006105699151805160071015611195570151611bbd565b6101206105699151805160081015611195570151611bbd565b610140610569915180516009101561116f570151611b1b565b604051906114ab826102f1565b60006020838281520152565b6114fb90606060206040516114cb816102f1565b6114d361149e565b8152015260406114f26080835180516003101561151c575b01516119fa565b91015190611137565b51611505816119fa565b60405191611512836102f1565b8252602082015290565b6115246110d2565b6114eb565b602080910151805115611558575b015160158151036101fb576001600160a01b039061155490611b1b565b1690565b6115606110d2565b611537565b604060206110c0926060835161157a816102d5565b52015180516001101561151c5701516119fa565b60606020610569920151805160021015611195570151611bbd565b6020906115b461149e565b50518051156115c257015190565b6115ca6110d2565b015190565b9060209180518210156115e157010190565b6115e96110d2565b010190565b939290916000946116036110bb6000936119ad565b9261160e8395611860565b90815115611797579484519484965b86881061162e575050505050505050565b8351831161178b576116496116438984611137565b51611aef565b9081516020809301200361178b5761166a6116648984611137565b516119fa565b908151601181146000146117195750845184146116e7575060ff6116a86116a261169486886115cf565b516001600160f81b03191690565b60f81c90565b1690601082116116da576116ca6116c46001936116d093611137565b51611b95565b93611387565b975b01969161161d565b5094985050505050505050565b9750925050506116ff92959650611306919350611125565b828151910120918151910120146000146105695750600190565b91989390916002036116da5761173b81866117366113068d611106565b6117a1565b9161174683836113a3565b865114611772575081156116da576116c461176660019361176c936113a3565b99611114565b926116d2565b989450505050506116ff92959650611306919350611114565b50939750505050505050565b5091955050505050565b9092916117af600092611860565b936117ba855161128c565b91855181019182821161183d575b815b8381106117f9575050505083602093945193849101209060208151910120146000146117f4575090565b905090565b6001906001600160f81b031961180f82856115cf565b511661182985830391838311611830575b891a91886115cf565b53016117ca565b611838611202565b611820565b611845611202565b6117c8565b908160011b918083046002149015171561122857565b611868611279565b908051611873575090565b9050600060ff611895600f60f81b61188a85611106565b5160041c1660f81c90565b169060019182811490811561193b575b501561191e57506118bc6113516113fb845161184a565b916118c681611946565b60001a6118d284611106565b5381905b60ff84519216805b8381106118ed57505050505090565b8061190a84611905611900868a9661126c565b611395565b611968565b60001a61191782896115cf565b53016118de565b9161193461135161192f835161184a565b611230565b92906118d6565b6003915014386118a5565b80511561195b575b60200151600f60f81b1690565b6119636110d2565b61194e565b90600182166119935761197e9160011c906115cf565b5160fc1c5b60f81b6001600160f81b03191690565b6119a390600f9260011c906115cf565b5160f81c16611983565b6119b561149e565b506020815191604051926119c8846102f1565b835201602082015290565b60209067ffffffffffffffff81116119ed575b60051b0190565b6119f561029d565b6119e6565b611a0381611ac8565b156101fb57611a1181611c1e565b611a1a816119d3565b91611a28604051938461030d565b818352601f19611a37836119d3565b0160005b818110611ab1575050611a5c602080920151611a5681611d42565b906113a3565b6000905b838210611a6e575050505090565b611aa981611a7d600193611cbc565b90611a8661032f565b8281528187820152611a98868a611137565b52611aa38589611137565b506113a3565b910190611a60565b602090611abc61149e565b82828801015201611a3b565b805115611ae957602060c09101515160001a10611ae457600190565b600090565b50600090565b611af9815161128c565b90815115611b175780602061056992015190519083602001906113cd565b5090565b80518015159081611b8a575b50156101fb576020810190611b3c8251611d42565b905191818303928311611b7d575b51908101809111611b70575b519060208110611b64575090565b6020036101000a900490565b611b78611202565b611b56565b611b85611202565b611b4a565b602291501038611b27565b60218151036101fb576020015160018101809111611bb1575190565b611bb9611202565b5190565b8051156101fb576105696020820191611bd68351611d42565b905190808203918211611c11575b611bed8261128c565b9351908101809111611c04575b83602001906113cd565b611c0c611202565b611bfa565b611c19611202565b611be4565b805115611ae95760009060208101908151611c3881611d42565b8101809111611caf575b915190518101809111611ca2575b91905b828110611c605750905090565b80611c6c600192611cbc565b8101809111611c95575b916000198114611c88575b0190611c53565b611c90611202565b611c81565b611c9d611202565b611c76565b611caa611202565b611c50565b611cb7611202565b611c42565b805160001a906080821015611cd2575050600190565b60b8821015611ced5750611ce86105699161124e565b611387565b9060c0811015611d115760b51991600160b783602003016101000a91015104010190565b9060f8821015611d285750611ce86105699161123f565b60010151602082900360f7016101000a90040160f5190190565b5160001a6080811015611d555750600090565b60b881108015611d99575b15611d6b5750600190565b60c0811015611d8057611ce86105699161125d565b6105699060f61981019081111561138757611ce8611202565b5060bf81118015611d60575060f88110611d60565b15611db557565b60405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f484541444552000000006044820152606490fd5b919294939060a0600180821b0360055416926024604051809581936320a9cea560e11b835260048301525afa958615611efa575b60009485938698611e8e575b5092610569969492611e8392611e7a611e899896610b7e60405193849260208401968a889290916080949284526020840152604083015260608201520190565b5190209261126c565b90611fa9565b611dae565b935096509360a0833d8211611ef2575b81611eab60a0938361030d565b81010312610863575091611e83826105699694611e8996945194611e7a602084015196611ee06080606087015196015161062b565b96939a93969850509250929496611e3a565b3d9150611e9e565b611f02610d6e565b611e2e565b15611f0e57565b60405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b6044820152606490fd5b60019060ff8111611f59571b90565b611f61611202565b1b90565b15611f6c57565b60405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b6044820152606490fd5b92909192611fc1611fbb8351601f1690565b15611f07565b611fde611fd7611fd2845160051c90565b611f4a565b8410611f65565b91611fe98251611387565b9060209283915b8383106120005750505050501490565b8183015160019686929188831661203e576040805185810193845260208401929092526120309082908401610b7e565b519020965b1c920191611ff0565b90612061610b7e9160405192839187830195869091604092825260208201520190565b51902096612035565b6000805490806001600160a01b0383167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a36bffffffffffffffffffffffff60a01b809216815560025560015416600155565b60008054916001600160a01b039081169182918416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36bffffffffffffffffffffffff60a01b8092161760005560006002556001541660015556fea26469706673582212205232fe9bb6edc1deaf13f1cc79f98dbf3424a36e8184b39132421716dfed78e464736f6c63430008110033";

type PolygonHubConnectorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PolygonHubConnectorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PolygonHubConnector__factory extends ContractFactory {
  constructor(...args: PolygonHubConnectorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _domain: PromiseOrValue<BigNumberish>,
    _mirrorDomain: PromiseOrValue<BigNumberish>,
    _amb: PromiseOrValue<string>,
    _rootManager: PromiseOrValue<string>,
    _mirrorConnector: PromiseOrValue<string>,
    _checkPointManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PolygonHubConnector> {
    return super.deploy(
      _domain,
      _mirrorDomain,
      _amb,
      _rootManager,
      _mirrorConnector,
      _checkPointManager,
      overrides || {}
    ) as Promise<PolygonHubConnector>;
  }
  override getDeployTransaction(
    _domain: PromiseOrValue<BigNumberish>,
    _mirrorDomain: PromiseOrValue<BigNumberish>,
    _amb: PromiseOrValue<string>,
    _rootManager: PromiseOrValue<string>,
    _mirrorConnector: PromiseOrValue<string>,
    _checkPointManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _domain,
      _mirrorDomain,
      _amb,
      _rootManager,
      _mirrorConnector,
      _checkPointManager,
      overrides || {}
    );
  }
  override attach(address: string): PolygonHubConnector {
    return super.attach(address) as PolygonHubConnector;
  }
  override connect(signer: Signer): PolygonHubConnector__factory {
    return super.connect(signer) as PolygonHubConnector__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PolygonHubConnectorInterface {
    return new utils.Interface(_abi) as PolygonHubConnectorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PolygonHubConnector {
    return new Contract(address, _abi, signerOrProvider) as PolygonHubConnector;
  }
}
