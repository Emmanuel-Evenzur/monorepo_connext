{
  "address": "0xA6a55DD1a3665f171c37037a96422a42A954eEA6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "canonicalId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "adoptedAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "supportedAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "renounced",
          "type": "bool"
        }
      ],
      "name": "AssetOwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AssetOwnershipRenunciationProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "canonicalId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint32",
              "name": "originDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "destinationDomain",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct TransactionManager.CallParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "localAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "transactingAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "localAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Fulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "local",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "canonicalId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "local",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint32",
              "name": "originDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "destinationDomain",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct TransactionManager.CallParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "transactingAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "localAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "localAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Prepared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "localAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "localAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "externalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "externalHash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct TransactionManager.FulfilledTransaction",
          "name": "fulfilled",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Reconciled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RouterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "renounced",
          "type": "bool"
        }
      ],
      "name": "RouterOwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RouterOwnershipRenunciationProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RouterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "canonicalId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "StableSwapAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "local",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "local",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "addLiquidityFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "addRelayerFees",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "addRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BridgeMessage.TokenId",
          "name": "canonical",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "stableSwapPool",
          "type": "address"
        }
      ],
      "name": "addStableSwapPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adoptedToCanonical",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "adoptedToLocalPools",
      "outputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "approvedAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedRouters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetOwnershipTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeRouter",
      "outputs": [
        {
          "internalType": "contract BridgeRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "canonicalToAdopted",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callTo",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                }
              ],
              "internalType": "struct TransactionManager.CallParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "local",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "feePercentage",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "relayerSignature",
              "type": "bytes"
            }
          ],
          "internalType": "struct TransactionManager.FulfillArgs",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "name": "fulfill",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_bridgeRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNative",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interpreter",
      "outputs": [
        {
          "internalType": "contract IFulfillInterpreter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAssetOwnershipRenounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRouterOwnershipRenounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callTo",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                }
              ],
              "internalType": "struct TransactionManager.CallParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "transactingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct TransactionManager.PrepareArgs",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "name": "prepare",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposeAssetOwnershipRenunciation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposeRouterOwnershipRenunciation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_local",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_externalHash",
          "type": "bytes32"
        }
      ],
      "name": "reconcile",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "reconciledTransactions",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "canonicalId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "adoptedAssetId",
          "type": "address"
        }
      ],
      "name": "removeAssetId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "local",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "removeRelayerFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "removeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceAssetOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceRouterOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "routedTransactions",
      "outputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "externalHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "routedTransactionsGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gasUsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerOwnershipTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routerRelayerFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BridgeMessage.TokenId",
          "name": "canonical",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "adoptedAssetId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stableSwapPool",
          "type": "address"
        }
      ],
      "name": "setupAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRegistry",
      "outputs": [
        {
          "internalType": "contract TokenRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapper",
      "outputs": [
        {
          "internalType": "contract IWrapped",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0f13a6ad32b921cea237c736edac6d30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adoptedAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"supportedAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"renounced\",\"type\":\"bool\"}],\"name\":\"AssetOwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AssetOwnershipRenunciationProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct TransactionManager.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Fulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct TransactionManager.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Prepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"externalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"externalHash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct TransactionManager.FulfilledTransaction\",\"name\":\"fulfilled\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Reconciled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RouterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"renounced\",\"type\":\"bool\"}],\"name\":\"RouterOwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RouterOwnershipRenunciationProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RouterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"StableSwapAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"addLiquidityFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"addRelayerFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"addRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct BridgeMessage.TokenId\",\"name\":\"canonical\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"stableSwapPool\",\"type\":\"address\"}],\"name\":\"addStableSwapPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adoptedToCanonical\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"adoptedToLocalPools\",\"outputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetOwnershipTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeRouter\",\"outputs\":[{\"internalType\":\"contract BridgeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"canonicalToAdopted\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"internalType\":\"struct TransactionManager.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"feePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"relayerSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct TransactionManager.FulfillArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"fulfill\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_bridgeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interpreter\",\"outputs\":[{\"internalType\":\"contract IFulfillInterpreter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAssetOwnershipRenounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRouterOwnershipRenounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"internalType\":\"struct TransactionManager.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"transactingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TransactionManager.PrepareArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"prepare\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeAssetOwnershipRenunciation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeRouterOwnershipRenunciation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_local\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_externalHash\",\"type\":\"bytes32\"}],\"name\":\"reconcile\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"reconciledTransactions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"adoptedAssetId\",\"type\":\"address\"}],\"name\":\"removeAssetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeRelayerFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"removeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAssetOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceRouterOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"routedTransactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"externalHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"routedTransactionsGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerOwnershipTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerRelayerFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct BridgeMessage.TokenId\",\"name\":\"canonical\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"adoptedAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableSwapPool\",\"type\":\"address\"}],\"name\":\"setupAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"contract TokenRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapper\",\"outputs\":[{\"internalType\":\"contract IWrapped\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"AssetAdded(bytes32,uint32,address,address,address)\":{\"params\":{\"adoptedAsset\":\"- The address of the adopted (user-expected) asset\",\"caller\":\"- The account that called the function\",\"canonicalId\":\"- The canonical identifier of the token the local <> adopted AMM is for\",\"domain\":\"- The domain of the canonical token for the local <> adopted amm\",\"supportedAsset\":\"- The address of the whitelisted asset. If the native asset is to be whitelisted, the address of the wrapped version will be stored\"}},\"AssetRemoved(bytes32,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"canonicalId\":\"- The canonical identifier of the token removed\"}},\"Fulfilled(bytes32,address,address,(address,address,bytes,uint32,uint32),uint256,address,address,uint256,uint256,address)\":{\"details\":\"`fulfill` may be called when providing fast liquidity *or* when processing a reconciled transaction\",\"params\":{\"caller\":\"- The account that called the function\",\"localAmount\":\"- The amount that was provided by the bridge\",\"localAsset\":\"- The asset that was provided by the bridge\",\"nonce\":\"- The nonce of the origin domain contract. Used to create the unique identifier for the transaction\",\"params\":\"- The CallParams provided to the function\",\"recipient\":\"- The CallParams.recipient provided, created as indexed parameter\",\"router\":\"- The router that supplied fast liquidity, if applicable\",\"transactingAmount\":\"- The amount of transacting asset the recipient receives or the external call is executed with\",\"transactingAsset\":\"- The asset the recipient gets or the external call is executed with. Should be the adopted asset on that chain.\",\"transactionId\":\"- The unique identifier of the crosschain transaction\"}},\"LiquidityAdded(address,address,bytes32,uint256,address)\":{\"params\":{\"amount\":\"- The amount of liquidity added\",\"caller\":\"- The account that called the function\",\"local\":\"- The address of the token added (all liquidity held in local asset)\",\"router\":\"- The address of the router the funds were credited to\"}},\"LiquidityRemoved(address,address,address,uint256,address)\":{\"params\":{\"amount\":\"- The amount of liquidity withdrawn\",\"caller\":\"- The account that called the function\",\"local\":\"- The address of the token withdrawn\",\"recipient\":\"- The address the funds were withdrawn to\",\"router\":\"- The router you are removing liquidity from\"}},\"Prepared(bytes32,address,(address,address,bytes,uint32,uint32),address,address,uint256,uint256,uint256,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"localAmount\":\"- The amount sent over the bridge (initialAmount with slippage)\",\"localAsset\":\"- The asset sent over the bridge. Will be the local asset of nomad that corresponds to the provided `transactingAsset`\",\"nonce\":\"- The nonce of the origin domain contract. Used to create the unique identifier for the transaction\",\"params\":\"- The CallParams provided to the function\",\"recipient\":\"- The CallParams.recipient provided, created as indexed parameter\",\"transactingAmount\":\"- The amount of transacting asset the tx prepared with\",\"transactingAsset\":\"- The asset the caller sent with the transaction. Can be the adopted, canonical, or the representational asset\",\"transactionId\":\"- The unique identifier of the crosschain transaction\"}},\"Reconciled(bytes32,address,address,address,uint256,bytes32,(address,uint256,bytes32),address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"externalHash\":\"- Hash of the `ExternalCall` passed through bridge\",\"fulfilled\":\"- Record of the `FulfilledTransaction` stored onchain if fast liquidity is provided\",\"localAmount\":\"- The amount that was provided by the bridge\",\"localAsset\":\"- The asset that was provided by the bridge\",\"recipient\":\"- The CallParams.recipient provided, created as indexed parameter\",\"router\":\"- The router that supplied fast liquidity, if applicable\",\"transactionId\":\"- The unique identifier of the crosschain transaction\"}},\"RouterAdded(address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"router\":\"- The address of the added router\"}},\"RouterRemoved(address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"router\":\"- The address of the removed router\"}},\"StableSwapAdded(bytes32,uint32,address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"canonicalId\":\"- The canonical identifier of the token the local <> adopted AMM is for\",\"domain\":\"- The domain of the canonical token for the local <> adopted amm\",\"swapPool\":\"- The address of the AMM\"}}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,address)\":{\"details\":\"The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.\",\"params\":{\"amount\":\"- The amount of liquidity to add for the router\",\"local\":\"- The address of the asset you're adding liquidity for. If adding liquidity of the native asset, routers may use `address(0)` or the wrapped asset\"}},\"addLiquidityFor(uint256,address,address)\":{\"details\":\"The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.\",\"params\":{\"amount\":\"- The amount of liquidity to add for the router\",\"local\":\"- The address of the asset you're adding liquidity for. If adding liquidity of the native asset, routers may use `address(0)` or the wrapped asset\",\"router\":\"The router you are adding liquidity on behalf of\"}},\"addRelayerFees(address)\":{\"params\":{\"router\":\"- The router to credit\"}},\"addRouter(address)\":{\"params\":{\"router\":\"Router address to add\"}},\"fulfill(((address,address,bytes,uint32,uint32),address,address,uint32,uint256,uint256,bytes))\":{\"details\":\"Will store the `FulfilledTransaction` if fast liquidity is provided, or assert the hash of the `ReconciledTransaction` when using bridge liquidity\",\"params\":{\"_args\":\"- The `FulfillArgs` for the transaction\"},\"returns\":{\"_0\":\"The transaction id of the crosschain transaction\"}},\"prepare(((address,address,bytes,uint32,uint32),address,uint256))\":{\"details\":\"This contract must have approval to transfer the adopted assets. They are then swapped to the local nomad assets via the configured AMM and sent over the bridge router.\",\"params\":{\"_args\":\"- The PrepareArgs\"},\"returns\":{\"_0\":\"The transaction id of the crosschain transaction\"}},\"reconcile(bytes32,address,address,uint256,bytes32)\":{\"details\":\"If fast liquidity was provided, the `amount` and `externalHash` are asserted against the `FulfilledTransaction` struct stored onchain. If no fast liqudity was provided, the hash of the `ReconciledTransaction` is stored onchain to enforce correctness when `fulfill` is called\",\"params\":{\"_externalHash\":\"- The hash of the `ExternalCall` passed through the bridge\",\"_id\":\"- The transaction id\",\"_local\":\"- The address of the asset delivered by the bridge\",\"_recipient\":\"- The address that will receive funds on the destination domain\"}},\"removeAssetId(bytes32,address)\":{\"params\":{\"adoptedAssetId\":\"- Corresponding adopted asset to remove\",\"canonicalId\":\"- Token id to remove\"}},\"removeLiquidity(uint256,address,address)\":{\"params\":{\"amount\":\"- The amount of liquidity to remove for the router\",\"local\":\"- The address of the asset you're removing liquidity from. If removing liquidity of the native asset, routers may use `address(0)` or the wrapped asset\",\"recipient\":\"The address that will receive the liquidity being removed\"}},\"removeRelayerFees(uint256,address)\":{\"details\":\"Must be called by the router you are decrementing relayer fees for\",\"params\":{\"amount\":\"- The amount of relayer fee to remove\",\"recipient\":\"- Who to send funds to\"}},\"removeRouter(address)\":{\"params\":{\"router\":\"Router address to remove\"}},\"setupAsset((uint32,bytes32),address,address)\":{\"details\":\"When whitelisting the canonical asset, all representational assets would be whitelisted as well. In the event you have a different adopted asset (i.e. PoS USDC on polygon), you should *not* whitelist the adopted asset. The stable swap pool address used should allow you to swap between the local <> adopted asset\",\"params\":{\"adoptedAssetId\":\"- The used asset id for this domain (i.e. PoS USDC for polygon)\",\"canonical\":\"- The canonical asset to add by id and domain. All representations will be whitelisted as well\",\"stableSwapPool\":\"- Address of the pool to swap adopted <> local asset\"}}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"adoptedToCanonical\":{\"details\":\"If the adopted asset is the native asset, the keyed address will be the wrapped asset address\"},\"adoptedToLocalPools\":{\"details\":\"Swaps for an adopted asset <> nomad local asset (i.e. POS USDC <> madUSDC on polygon)\"},\"approvedAssets\":{\"details\":\"Mapping is keyed on the canonical token identifier matching what is stored in the token registry\"},\"canonicalToAdopted\":{\"details\":\"If the adopted asset is the native asset, the stored address will be the wrapped asset address\"},\"domain\":{\"details\":\"Must match the nomad domain, which is distinct from the \\\"chainId\\\"\"},\"nonce\":{\"details\":\"Assigned at first interaction (prepare on origin domain);\"},\"reconciledTransactions\":{\"details\":\"This information is stored onchain if the transaction has not been fulfilled at the time of reconcile\"},\"routedTransactions\":{\"details\":\"This information is stored onchain if fast liquidity is provided\"},\"routedTransactionsGas\":{\"details\":\"This informaion is stored onchain if fast liquidity is provided\"},\"routerBalances\":{\"details\":\"Routers should always store liquidity that they can expect to receive via the bridge on this domain (the nomad local asset)\"},\"routerRelayerFees\":{\"details\":\"Right now, routers only store native asset onchain. TODO: allow for approved relaying assets\"},\"wrapper\":{\"details\":\"Needed because the nomad only handles ERC20 assets\"}},\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(bytes32,uint32,address,address,address)\":{\"notice\":\"Emitted when a new asset is added\"},\"AssetRemoved(bytes32,address)\":{\"notice\":\"Emitted when an asset is removed from whitelists\"},\"Fulfilled(bytes32,address,address,(address,address,bytes,uint32,uint32),uint256,address,address,uint256,uint256,address)\":{\"notice\":\"Emitted when `fulfill` is called on the destination chain\"},\"LiquidityAdded(address,address,bytes32,uint256,address)\":{\"notice\":\"Emitted when a router adds liquidity to the contract\"},\"LiquidityRemoved(address,address,address,uint256,address)\":{\"notice\":\"Emitted when a router withdraws liquidity from the contract\"},\"Prepared(bytes32,address,(address,address,bytes,uint32,uint32),address,address,uint256,uint256,uint256,address)\":{\"notice\":\"Emitted when `prepare` is called on the origin domain\"},\"Reconciled(bytes32,address,address,address,uint256,bytes32,(address,uint256,bytes32),address)\":{\"notice\":\"Emitted when `reconciled` is called by the bridge on the destination domain\"},\"RouterAdded(address,address)\":{\"notice\":\"Emitted when a new router is added\"},\"RouterRemoved(address,address)\":{\"notice\":\"Emitted when an existing router is removed\"},\"StableSwapAdded(bytes32,uint32,address,address)\":{\"notice\":\"Emitted when a new stable-swap AMM is added for the local <> adopted token\"}},\"kind\":\"user\",\"methods\":{\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"addLiquidity(uint256,address)\":{\"notice\":\"This is used by any router to increase their available liquidity for a given asset.\"},\"addLiquidityFor(uint256,address,address)\":{\"notice\":\"This is used by anyone to increase a router's available liquidity for a given asset.\"},\"addRelayerFees(address)\":{\"notice\":\"Used to add relayer fees in the native asset\"},\"addRouter(address)\":{\"notice\":\"Used to add routers that can transact crosschain\"},\"addStableSwapPool((uint32,bytes32),address)\":{\"notice\":\"Adds a stable swap pool for the local <> adopted asset.\"},\"adoptedToCanonical(address)\":{\"notice\":\"Mapping of canonical to adopted assets on this domain\"},\"adoptedToLocalPools(bytes32)\":{\"notice\":\"Mapping holding the AMMs for swapping in and out of local assets\"},\"approvedAssets(bytes32)\":{\"notice\":\"Mapping of whitelisted assets on same domain as contract\"},\"approvedRouters(address)\":{\"notice\":\"Mapping of whitelisted router addresses.\"},\"assetOwnershipTimestamp()\":{\"notice\":\"Returns the timestamp when asset ownership was last proposed to be renounced\"},\"bridgeRouter()\":{\"notice\":\"The local nomad bridge router\"},\"canonicalToAdopted(bytes32)\":{\"notice\":\"Mapping of adopted to canonical on this domain\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"domain()\":{\"notice\":\"The domain this contract exists on\"},\"fulfill(((address,address,bytes,uint32,uint32),address,address,uint32,uint256,uint256,bytes))\":{\"notice\":\"This function is called on the destination chain when the bridged asset should be swapped into the adopted asset and the external call executed. Can be used before reconcile (when providing fast liquidity) or after reconcile (when using liquidity from the bridge)\"},\"interpreter()\":{\"notice\":\"The external contract that will execute crosschain calldata\"},\"isAssetOwnershipRenounced()\":{\"notice\":\"Indicates if the ownership of the asset whitelist has been renounced\"},\"isRouterOwnershipRenounced()\":{\"notice\":\"Indicates if the ownership of the router whitelist has been renounced\"},\"nonce()\":{\"notice\":\"Nonce for the contract, used to keep unique transaction ids.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"prepare(((address,address,bytes,uint32,uint32),address,uint256))\":{\"notice\":\"This function is called by a user who is looking to bridge funds\"},\"proposeAssetOwnershipRenunciation()\":{\"notice\":\"Indicates if the ownership of the asset whitelist has been renounced\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposeRouterOwnershipRenunciation()\":{\"notice\":\"Indicates if the ownership of the router whitelist has been renounced\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"reconcile(bytes32,address,address,uint256,bytes32)\":{\"notice\":\"This function is called by the bridge router to pass through the information provided by the user on prepare.\"},\"reconciledTransactions(bytes32)\":{\"notice\":\"Stores hash of the `ReconciledTransaction` (all information passed through bridge) on `reconcile`\"},\"removeAssetId(bytes32,address)\":{\"notice\":\"Used to remove assets from the whitelist\"},\"removeLiquidity(uint256,address,address)\":{\"notice\":\"This is used by any router to decrease their available liquidity for a given asset.\"},\"removeRelayerFees(uint256,address)\":{\"notice\":\"Used to remove relayer fee in the native asset\"},\"removeRouter(address)\":{\"notice\":\"Used to remove routers that can transact crosschain\"},\"renounceAssetOwnership()\":{\"notice\":\"Indicates if the ownership of the asset whitelist has been renounced\"},\"renounceOwnership()\":{\"notice\":\"Renounces ownership of the contract after a delay\"},\"renounceRouterOwnership()\":{\"notice\":\"Indicates if the ownership of the asset whitelist has been renounced\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"routedTransactions(bytes32)\":{\"notice\":\"Stores the transactionId => FulfilledTransaction mapping\"},\"routedTransactionsGas(bytes32)\":{\"notice\":\"Stores the transactionId => GasInfo mapping to track gas used on `fulfill`\"},\"routerBalances(address,address)\":{\"notice\":\"Mapping of router to available balance of an asset\"},\"routerOwnershipTimestamp()\":{\"notice\":\"Returns the timestamp when router ownership was last proposed to be renounced\"},\"routerRelayerFees(address)\":{\"notice\":\"Mapping of router to available relayer fee\"},\"setupAsset((uint32,bytes32),address,address)\":{\"notice\":\"Used to add supported assets. This is an admin only function\"},\"tokenRegistry()\":{\"notice\":\"The local nomad token registry\"},\"wrapper()\":{\"notice\":\"The address of the wrapper for the native asset on this domain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransactionManager.sol\":\"TransactionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ProposedOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ProposedOwnable\\r\\n * @notice Contract module which provides a basic access control mechanism, \\r\\n * where there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed via a two step process:\\r\\n * 1. Call `proposeOwner`\\r\\n * 2. Wait out the delay period\\r\\n * 3. Call `acceptOwner`\\r\\n *\\r\\n * @dev This module is used through inheritance. It will make available the \\r\\n * modifier `onlyOwner`, which can be applied to your functions to restrict \\r\\n * their use to the owner.\\r\\n * \\r\\n * @dev The majority of this code was taken from the openzeppelin Ownable \\r\\n * contract\\r\\n *\\r\\n */\\r\\nabstract contract ProposedOwnableUpgradeable  is Initializable {\\r\\n  address private _owner;\\r\\n\\r\\n  address private _proposed;\\r\\n  uint256 private _proposedOwnershipTimestamp;\\r\\n\\r\\n  bool private _routerOwnershipRenounced;\\r\\n  uint256 private _routerOwnershipTimestamp;\\r\\n\\r\\n  bool private _assetOwnershipRenounced;\\r\\n  uint256 private _assetOwnershipTimestamp;\\r\\n\\r\\n  uint256 private constant _delay = 7 days;\\r\\n\\r\\n  event RouterOwnershipRenunciationProposed(uint256 timestamp);\\r\\n\\r\\n  event RouterOwnershipRenounced(bool renounced);\\r\\n\\r\\n  event AssetOwnershipRenunciationProposed(uint256 timestamp);\\r\\n\\r\\n  event AssetOwnershipRenounced(bool renounced);\\r\\n\\r\\n  event OwnershipProposed(address indexed proposedOwner);\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\r\\n  /**\\r\\n    * @dev Initializes the contract setting the deployer as the initial \\r\\n    */\\r\\n  function __ProposedOwnable_init() internal onlyInitializing {\\r\\n    __ProposedOwnable_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\r\\n    _setOwner(msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Returns the address of the current owner.\\r\\n    */\\r\\n  function owner() public view virtual returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Returns the address of the proposed owner.\\r\\n    */\\r\\n  function proposed() public view virtual returns (address) {\\r\\n    return _proposed;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Returns the address of the proposed owner.\\r\\n    */\\r\\n  function proposedTimestamp() public view virtual returns (uint256) {\\r\\n    return _proposedOwnershipTimestamp;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Returns the timestamp when router ownership was last proposed to be renounced\\r\\n    */\\r\\n  function routerOwnershipTimestamp() public view virtual returns (uint256) {\\r\\n    return _routerOwnershipTimestamp;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Returns the timestamp when asset ownership was last proposed to be renounced\\r\\n    */\\r\\n  function assetOwnershipTimestamp() public view virtual returns (uint256) {\\r\\n    return _assetOwnershipTimestamp;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Returns the delay period before a new owner can be accepted.\\r\\n    */\\r\\n  function delay() public view virtual returns (uint256) {\\r\\n    return _delay;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Throws if called by any account other than the owner.\\r\\n    */\\r\\n  modifier onlyOwner() {\\r\\n      require(_owner == msg.sender, \\\"#OO:029\\\");\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Throws if called by any account other than the proposed owner.\\r\\n    */\\r\\n  modifier onlyProposed() {\\r\\n      require(_proposed == msg.sender, \\\"#OP:035\\\");\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n    * @notice Indicates if the ownership of the router whitelist has\\r\\n    * been renounced\\r\\n    */\\r\\n  function isRouterOwnershipRenounced() public view returns (bool) {\\r\\n    return _owner == address(0) || _routerOwnershipRenounced;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n    * @notice Indicates if the ownership of the router whitelist has\\r\\n    * been renounced\\r\\n    */\\r\\n  function proposeRouterOwnershipRenunciation() public virtual onlyOwner {\\r\\n    // Use contract as source of truth\\r\\n    // Will fail if all ownership is renounced by modifier\\r\\n    require(!_routerOwnershipRenounced, \\\"#PROR:038\\\");\\r\\n\\r\\n    // Begin delay, emit event\\r\\n    _setRouterOwnershipTimestamp();\\r\\n  }\\r\\n\\r\\n  /** \\r\\n    * @notice Indicates if the ownership of the asset whitelist has\\r\\n    * been renounced\\r\\n    */\\r\\n  function renounceRouterOwnership() public virtual onlyOwner {\\r\\n    // Contract as sournce of truth\\r\\n    // Will fail if all ownership is renounced by modifier\\r\\n    require(!_routerOwnershipRenounced, \\\"#RRO:038\\\");\\r\\n\\r\\n    // Ensure there has been a proposal cycle started\\r\\n    require(_routerOwnershipTimestamp > 0, \\\"#RRO:037\\\");\\r\\n\\r\\n    // Delay has elapsed\\r\\n    require((block.timestamp - _routerOwnershipTimestamp) > _delay, \\\"#RRO:030\\\");\\r\\n\\r\\n    // Set renounced, emit event, reset timestamp to 0\\r\\n    _setRouterOwnership(true);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n    * @notice Indicates if the ownership of the asset whitelist has\\r\\n    * been renounced\\r\\n    */\\r\\n  function isAssetOwnershipRenounced() public view returns (bool) {\\r\\n    return _owner == address(0) || _assetOwnershipRenounced;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n    * @notice Indicates if the ownership of the asset whitelist has\\r\\n    * been renounced\\r\\n    */\\r\\n  function proposeAssetOwnershipRenunciation() public virtual onlyOwner {\\r\\n    // Contract as sournce of truth\\r\\n    // Will fail if all ownership is renounced by modifier\\r\\n    require(!_assetOwnershipRenounced, \\\"#PAOR:038\\\");\\r\\n\\r\\n    // Start cycle, emit event\\r\\n    _setAssetOwnershipTimestamp();\\r\\n  }\\r\\n\\r\\n  /** \\r\\n    * @notice Indicates if the ownership of the asset whitelist has\\r\\n    * been renounced\\r\\n    */\\r\\n  function renounceAssetOwnership() public virtual onlyOwner {\\r\\n    // Contract as sournce of truth\\r\\n    // Will fail if all ownership is renounced by modifier\\r\\n    require(!_assetOwnershipRenounced, \\\"#RAO:038\\\");\\r\\n\\r\\n    // Ensure there has been a proposal cycle started\\r\\n    require(_assetOwnershipTimestamp > 0, \\\"#RAO:037\\\");\\r\\n\\r\\n    // Ensure delay has elapsed\\r\\n    require((block.timestamp - _assetOwnershipTimestamp) > _delay, \\\"#RAO:030\\\");\\r\\n\\r\\n    // Set ownership, reset timestamp, emit event\\r\\n    _setAssetOwnership(true);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n    * @notice Indicates if the ownership has been renounced() by\\r\\n    * checking if current owner is address(0)\\r\\n    */\\r\\n  function renounced() public view returns (bool) {\\r\\n    return _owner == address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Sets the timestamp for an owner to be proposed, and sets the\\r\\n    * newly proposed owner as step 1 in a 2-step process\\r\\n   */\\r\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\r\\n    // Contract as source of truth\\r\\n    require(_proposed != newlyProposed || newlyProposed == address(0), \\\"#PNO:036\\\");\\r\\n\\r\\n    // Sanity check: reasonable proposal\\r\\n    require(_owner != newlyProposed, \\\"#PNO:038\\\");\\r\\n\\r\\n    _setProposed(newlyProposed);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Renounces ownership of the contract after a delay\\r\\n    */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    // Ensure there has been a proposal cycle started\\r\\n    require(_proposedOwnershipTimestamp > 0, \\\"#RO:037\\\");\\r\\n\\r\\n    // Ensure delay has elapsed\\r\\n    require((block.timestamp - _proposedOwnershipTimestamp) > _delay, \\\"#RO:030\\\");\\r\\n\\r\\n    // Require proposed is set to 0\\r\\n    require(_proposed == address(0), \\\"#RO:036\\\");\\r\\n\\r\\n    // Emit event, set new owner, reset timestamp\\r\\n    _setOwner(_proposed);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @notice Transfers ownership of the contract to a new account (`newOwner`).\\r\\n    * Can only be called by the current owner.\\r\\n    */\\r\\n  function acceptProposedOwner() public virtual onlyProposed {\\r\\n    // Contract as source of truth\\r\\n    require(_owner != _proposed, \\\"#APO:038\\\");\\r\\n\\r\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\r\\n    // the only time this would happen is if the _proposed was never\\r\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\r\\n    // above)\\r\\n\\r\\n    // Ensure delay has elapsed\\r\\n    require((block.timestamp - _proposedOwnershipTimestamp) > _delay, \\\"#APO:030\\\");\\r\\n\\r\\n    // Emit event, set new owner, reset timestamp\\r\\n    _setOwner(_proposed);\\r\\n  }\\r\\n\\r\\n  ////// INTERNAL //////\\r\\n\\r\\n  function _setRouterOwnershipTimestamp() private {\\r\\n    _routerOwnershipTimestamp = block.timestamp;\\r\\n    emit RouterOwnershipRenunciationProposed(_routerOwnershipTimestamp);\\r\\n  }\\r\\n\\r\\n  function _setRouterOwnership(bool value) private {\\r\\n    _routerOwnershipRenounced = value;\\r\\n    _routerOwnershipTimestamp = 0;\\r\\n    emit RouterOwnershipRenounced(value);\\r\\n  }\\r\\n\\r\\n  function _setAssetOwnershipTimestamp() private {\\r\\n    _assetOwnershipTimestamp = block.timestamp;\\r\\n    emit AssetOwnershipRenunciationProposed(_assetOwnershipTimestamp);\\r\\n  }\\r\\n\\r\\n  function _setAssetOwnership(bool value) private {\\r\\n    _assetOwnershipRenounced = value;\\r\\n    _assetOwnershipTimestamp = 0;\\r\\n    emit AssetOwnershipRenounced(value);\\r\\n  }\\r\\n\\r\\n  function _setOwner(address newOwner) private {\\r\\n    address oldOwner = _owner;\\r\\n    _owner = newOwner;\\r\\n    _proposedOwnershipTimestamp = 0;\\r\\n    emit OwnershipTransferred(oldOwner, newOwner);\\r\\n  }\\r\\n\\r\\n  function _setProposed(address newlyProposed) private {\\r\\n    _proposedOwnershipTimestamp = block.timestamp;\\r\\n    _proposed = newlyProposed;\\r\\n    emit OwnershipProposed(_proposed);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n    * variables without shifting down storage in the inheritance chain.\\r\\n    * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n    */\\r\\n  uint256[49] private __gap;\\r\\n}\",\"keccak256\":\"0x4fb25929574d4f3d773262e6204d4d3a3018237df20558d4123116faff1082a9\",\"license\":\"UNLICENSED\"},\"contracts/TransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./ProposedOwnableUpgradeable.sol\\\";\\r\\nimport \\\"./interfaces/IFulfillInterpreter.sol\\\";\\r\\nimport \\\"./interfaces/IWrapped.sol\\\";\\r\\nimport \\\"./interfaces/IStableSwap.sol\\\";\\r\\nimport \\\"./interpreters/FulfillInterpreter.sol\\\";\\r\\n\\r\\nimport \\\"./nomad-xapps/contracts/bridge/TokenRegistry.sol\\\";\\r\\nimport \\\"./nomad-xapps/contracts/bridge/BridgeRouter.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n// Open questions:\\r\\n// 1. How to account for fees/specify amount used on receiving chain?\\r\\n// 2. Callback interface?\\r\\n// 3. Best way to preserve \\\"originator\\\" for some permissioning on the receiving chain?\\r\\n\\r\\n// TODO:\\r\\n// - decide on interface for the stable swap\\r\\n//   - stable swap implemented, interface changes TBD\\r\\n// - nomad contract packages not playing nicely #815\\r\\n// - make functions metatxable with any asset #816\\r\\n// - assert the router gas usage in reconcile\\r\\n//   - depends on feedback from pilot devs -- should user specify min? should we take on\\r\\n//     oracle dependencies? should we pass data *all the way back*? \\r\\n// - allow multiple routers #818\\r\\n// - allow aave wormhole style collateral for routers \\r\\n//   - needs spec #821\\r\\n// - identifier returned from nomad/bridge\\r\\n//   - may not be relevant with batching (each leaf still needs UUID)\\r\\n// - gas optimizations\\r\\n//   - dependent on batching, continuous process\\r\\n// - event finalization\\r\\n//   - dependent on feedback from pilot group, offchain processes, etc.\\r\\n// - unit tests\\r\\n//   - setup infrastructure #822\\r\\n//   - ongoing process\\r\\n// - restricted router withdrawals #820\\r\\n// - fulfill interpreter improvements (from audit and pass through origin domain stuff)\\r\\n//   - depends on how we decide to pass through calldata (may need rewrite)\\r\\n// - batching #812\\r\\n\\r\\ncontract TransactionManager is Initializable, ReentrancyGuardUpgradeable, ProposedOwnableUpgradeable {\\r\\n\\r\\n  // ============ Structs ============\\r\\n\\r\\n  /**\\r\\n   * @notice These are the call parameters that will remain constant between the\\r\\n   * two chains. They are supplied on `prepare` and should be asserted on `fulfill`\\r\\n   * @property recipient - The account that receives funds, in the event of a crosschain call,\\r\\n   * will receive funds if the call fails.\\r\\n   * @param callTo - The address of the receiving chain to execute the `callData` on. If no crosschain call is needed, then leave empty.\\r\\n   * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\r\\n   * @param originDomain - The originating domain (i.e. where `prepare` is called). Must match nomad domain schema\\r\\n   * @param destinationDomain - The final domain (i.e. where `fulfill` / `reconcile` are called). Must match nomad domain schema\\r\\n   */\\r\\n  struct CallParams {\\r\\n    address recipient;\\r\\n    address callTo;\\r\\n    bytes callData;\\r\\n    uint32 originDomain;\\r\\n    uint32 destinationDomain;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Contains the external call information\\r\\n   * @dev Used to create a hash to pass the external call information through the bridge\\r\\n   * @param recipient - The address that should receive the funds on the destination domain if no call is\\r\\n   * specified, or the fallback if an external call fails\\r\\n   * @param callTo - The address of the receiving chain to execute the `callData` on\\r\\n   * @param callData - The data to execute on the receiving chain\\r\\n   */\\r\\n  struct ExternalCall {\\r\\n    address recipient;\\r\\n    address callTo;\\r\\n    bytes callData;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Contains information stored when `fulfill` is used in a fast-liquidity manner on a \\r\\n   * transaction to properly reimburse router when funds come through the bridge.\\r\\n   * @param router - Address of the router that supplied fast-liquidity\\r\\n   * @param amount - Amount of liquidity router provided. Used to prevent price-gauging when `amount` \\r\\n   * user supplied comes through bridge\\r\\n   * @param externalHash - Hash of the `ExternalCall` router supplied. Used to enforce router executed \\r\\n   * the correct calldata under threat of non-repayment\\r\\n   */\\r\\n  struct FulfilledTransaction {\\r\\n    address router;\\r\\n    uint256 amount;\\r\\n    bytes32 externalHash;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Contains information about the gas consumed in a `fulfill` call\\r\\n   * @param gasUsed - The gas consumed for a fulfill transaction (including external call)\\r\\n   * @param gasPrice - The tx.gasPrice on the fulfill transaction\\r\\n   */\\r\\n  struct GasInfo {\\r\\n    uint256 gasUsed;\\r\\n    uint256 gasPrice;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct containing the information that comes through the bridge provided by the user on `prepare`\\r\\n   * @param externalHash - Hash of the `ExternalCall`\\r\\n   * @param local - The address of the bridged asset\\r\\n   * @param amount - The amount forwarded through the bridge\\r\\n   * @param recipient - The address that gets the funds on the destination chain\\r\\n   */\\r\\n  struct ReconciledTransaction {\\r\\n    bytes32 externalHash;\\r\\n    address local;\\r\\n    uint256 amount;\\r\\n    address recipient;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice The arguments you supply to the `prepare` function called by user on origin domain\\r\\n   * @param params - The CallParams. These are consistent across sending and receiving chains\\r\\n   * @param transactingAssetId - The asset the caller sent with the transaction. Can be the adopted, canonical,\\r\\n   * or the representational asset\\r\\n   * @param amount - The amount of transacting asset the tx prepared with\\r\\n   */\\r\\n  struct PrepareArgs {\\r\\n    CallParams params;\\r\\n    address transactingAssetId; // Could be adopted, local, or wrapped\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice \\r\\n   * @param params - The CallParams. These are consistent across sending and receiving chains\\r\\n   * @param local - The local asset for the transaction, will be swapped to the adopted asset if\\r\\n   * appropriate\\r\\n   * @param router - The router who you are sending the funds on behalf of\\r\\n   * @param nonce - The nonce of the origin domain at the time the transaction was prepared. Used to generate \\r\\n   * the transaction id for the crosschain transaction\\r\\n   * @param amount - The amount of liquidity the router provided or the bridge forwarded, depending on\\r\\n   * if fast liquidity was used\\r\\n   * @param feePercentage - The amount over the BASEFEE to tip the relayer\\r\\n   */\\r\\n  struct FulfillArgs {\\r\\n    CallParams params;\\r\\n    address local;\\r\\n    address router;\\r\\n    uint32 feePercentage;\\r\\n    uint256 nonce;\\r\\n    uint256 amount;\\r\\n    bytes relayerSignature;\\r\\n  }\\r\\n\\r\\n  // ============ Events ============\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a new router is added\\r\\n   * @param router - The address of the added router\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event RouterAdded(\\r\\n    address router,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when an existing router is removed\\r\\n   * @param router - The address of the removed router\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event RouterRemoved(\\r\\n    address router,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a new stable-swap AMM is added for the local <> adopted token\\r\\n   * @param canonicalId - The canonical identifier of the token the local <> adopted AMM is for\\r\\n   * @param domain - The domain of the canonical token for the local <> adopted amm\\r\\n   * @param swapPool - The address of the AMM\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event StableSwapAdded(\\r\\n    bytes32 canonicalId,\\r\\n    uint32 domain,\\r\\n    address swapPool,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a new asset is added\\r\\n   * @param canonicalId - The canonical identifier of the token the local <> adopted AMM is for\\r\\n   * @param domain - The domain of the canonical token for the local <> adopted amm\\r\\n   * @param adoptedAsset - The address of the adopted (user-expected) asset\\r\\n   * @param supportedAsset - The address of the whitelisted asset. If the native asset is to be whitelisted,\\r\\n   * the address of the wrapped version will be stored\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event AssetAdded(\\r\\n    bytes32 canonicalId,\\r\\n    uint32 domain,\\r\\n    address adoptedAsset,\\r\\n    address supportedAsset,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when an asset is removed from whitelists\\r\\n   * @param canonicalId - The canonical identifier of the token removed\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event AssetRemoved(\\r\\n    bytes32 canonicalId,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a router withdraws liquidity from the contract\\r\\n   * @param router - The router you are removing liquidity from\\r\\n   * @param recipient - The address the funds were withdrawn to\\r\\n   * @param local - The address of the token withdrawn\\r\\n   * @param amount - The amount of liquidity withdrawn\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event LiquidityRemoved(\\r\\n    address indexed router,\\r\\n    address recipient,\\r\\n    address local,\\r\\n    uint256 amount,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a router adds liquidity to the contract\\r\\n   * @param router - The address of the router the funds were credited to\\r\\n   * @param local - The address of the token added (all liquidity held in local asset)\\r\\n   * @param amount - The amount of liquidity added\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event LiquidityAdded(\\r\\n    address router,\\r\\n    address local,\\r\\n    bytes32 canonicalId,\\r\\n    uint256 amount,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when `prepare` is called on the origin domain\\r\\n   * @param transactionId - The unique identifier of the crosschain transaction\\r\\n   * @param recipient - The CallParams.recipient provided, created as indexed parameter\\r\\n   * @param params - The CallParams provided to the function\\r\\n   * @param transactingAsset - The asset the caller sent with the transaction. Can be the adopted, canonical,\\r\\n   * or the representational asset\\r\\n   * @param localAsset - The asset sent over the bridge. Will be the local asset of nomad that corresponds\\r\\n   * to the provided `transactingAsset`\\r\\n   * @param transactingAmount - The amount of transacting asset the tx prepared with\\r\\n   * @param localAmount - The amount sent over the bridge (initialAmount with slippage)\\r\\n   * @param nonce - The nonce of the origin domain contract. Used to create the unique identifier\\r\\n   * for the transaction\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event Prepared(\\r\\n    bytes32 indexed transactionId,\\r\\n    address indexed recipient,\\r\\n    CallParams params,\\r\\n    address transactingAsset,\\r\\n    address localAsset,\\r\\n    uint256 transactingAmount,\\r\\n    uint256 localAmount,\\r\\n    uint256 nonce,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when `reconciled` is called by the bridge on the destination domain\\r\\n   * @param transactionId - The unique identifier of the crosschain transaction\\r\\n   * @param recipient - The CallParams.recipient provided, created as indexed parameter\\r\\n   * @param router - The router that supplied fast liquidity, if applicable\\r\\n   * @param localAsset - The asset that was provided by the bridge\\r\\n   * @param localAmount - The amount that was provided by the bridge\\r\\n   * @param externalHash - Hash of the `ExternalCall` passed through bridge\\r\\n   * @param fulfilled - Record of the `FulfilledTransaction` stored onchain if fast liquidity is provided\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event Reconciled(\\r\\n    bytes32 indexed transactionId,\\r\\n    address indexed recipient,\\r\\n    address indexed router,\\r\\n    address localAsset,\\r\\n    uint256 localAmount,\\r\\n    bytes32 externalHash,\\r\\n    FulfilledTransaction fulfilled,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when `fulfill` is called on the destination chain\\r\\n   * @dev `fulfill` may be called when providing fast liquidity *or* when processing a reconciled transaction\\r\\n   * @param transactionId - The unique identifier of the crosschain transaction\\r\\n   * @param recipient - The CallParams.recipient provided, created as indexed parameter\\r\\n   * @param router - The router that supplied fast liquidity, if applicable\\r\\n   * @param params - The CallParams provided to the function\\r\\n   * @param nonce - The nonce of the origin domain contract. Used to create the unique identifier\\r\\n   * for the transaction\\r\\n   * @param localAsset - The asset that was provided by the bridge\\r\\n   * @param transactingAsset - The asset the recipient gets or the external call is executed with. Should be the\\r\\n   * adopted asset on that chain.\\r\\n   * @param localAmount - The amount that was provided by the bridge\\r\\n   * @param transactingAmount - The amount of transacting asset the recipient receives or the external call is\\r\\n   * executed with\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event Fulfilled(\\r\\n    bytes32 indexed transactionId,\\r\\n    address indexed recipient,\\r\\n    address indexed router,\\r\\n    CallParams params,\\r\\n    uint256 nonce,\\r\\n    address localAsset,\\r\\n    address transactingAsset,\\r\\n    uint256 localAmount,\\r\\n    uint256 transactingAmount,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  // ============ Properties ============\\r\\n\\r\\n  /**\\r\\n   * @notice The local nomad bridge router\\r\\n   */\\r\\n  BridgeRouter public bridgeRouter;\\r\\n\\r\\n  /**\\r\\n   * @notice The address of the wrapper for the native asset on this domain\\r\\n   * @dev Needed because the nomad only handles ERC20 assets\\r\\n   */\\r\\n  IWrapped public wrapper;\\r\\n\\r\\n  /**\\r\\n   * @notice Nonce for the contract, used to keep unique transaction ids.\\r\\n   * @dev Assigned at first interaction (prepare on origin domain);\\r\\n   */\\r\\n  uint256 public nonce ;\\r\\n\\r\\n  /**\\r\\n   * @notice The external contract that will execute crosschain calldata\\r\\n   */\\r\\n  IFulfillInterpreter public interpreter;\\r\\n\\r\\n  /**\\r\\n   * @notice The local nomad token registry\\r\\n   */\\r\\n  TokenRegistry public tokenRegistry;\\r\\n\\r\\n  /**\\r\\n   * @notice Mapping holding the AMMs for swapping in and out of local assets\\r\\n   * @dev Swaps for an adopted asset <> nomad local asset (i.e. POS USDC <> madUSDC on polygon)\\r\\n   */\\r\\n  mapping(bytes32 => IStableSwap) public adoptedToLocalPools;\\r\\n\\r\\n  /**\\r\\n   * @notice Stores the transactionId => FulfilledTransaction mapping\\r\\n   * @dev This information is stored onchain if fast liquidity is provided\\r\\n   */\\r\\n  mapping(bytes32 => FulfilledTransaction) public routedTransactions;\\r\\n\\r\\n  /**\\r\\n   * @notice Stores the transactionId => GasInfo mapping to track gas used on `fulfill`\\r\\n   * @dev This informaion is stored onchain if fast liquidity is provided\\r\\n   */\\r\\n  mapping(bytes32 => GasInfo) public routedTransactionsGas;\\r\\n\\r\\n  /**\\r\\n   * @notice Stores hash of the `ReconciledTransaction` (all information passed through bridge) on `reconcile`\\r\\n   * @dev This information is stored onchain if the transaction has not been fulfilled at the time\\r\\n   * of reconcile\\r\\n   */\\r\\n  mapping(bytes32 => bytes32) public reconciledTransactions;\\r\\n\\r\\n  /**\\r\\n   * @notice The domain this contract exists on\\r\\n   * @dev Must match the nomad domain, which is distinct from the \\\"chainId\\\"\\r\\n   */\\r\\n  uint256 public domain;\\r\\n\\r\\n  /**\\r\\n   * @notice Mapping of router to available balance of an asset\\r\\n   * @dev Routers should always store liquidity that they can expect to receive via the bridge on\\r\\n   * this domain (the nomad local asset)\\r\\n   */\\r\\n  mapping(address => mapping(address => uint256)) public routerBalances;\\r\\n\\r\\n  /**\\r\\n   * @notice Mapping of router to available relayer fee\\r\\n   * @dev Right now, routers only store native asset onchain.\\r\\n   * TODO: allow for approved relaying assets\\r\\n   */\\r\\n  mapping(address => uint256) public routerRelayerFees;\\r\\n\\r\\n  /**\\r\\n   * @notice Mapping of whitelisted router addresses.\\r\\n   */\\r\\n  mapping(address => bool) public approvedRouters;\\r\\n\\r\\n  /**\\r\\n   * @notice Mapping of whitelisted assets on same domain as contract\\r\\n   * @dev Mapping is keyed on the canonical token identifier matching what is stored in the token\\r\\n   * registry\\r\\n   */\\r\\n  mapping(bytes32 => bool) public approvedAssets;\\r\\n\\r\\n  /**\\r\\n   * @notice Mapping of canonical to adopted assets on this domain\\r\\n   * @dev If the adopted asset is the native asset, the keyed address will\\r\\n   * be the wrapped asset address\\r\\n   */\\r\\n  mapping(address => BridgeMessage.TokenId) public adoptedToCanonical;\\r\\n\\r\\n  /**\\r\\n   * @notice Mapping of adopted to canonical on this domain\\r\\n   * @dev If the adopted asset is the native asset, the stored address will be the\\r\\n   * wrapped asset address\\r\\n   */\\r\\n  mapping(bytes32 => address) public canonicalToAdopted;\\r\\n\\r\\n\\r\\n  // ============ Modifiers ============\\r\\n\\r\\n  /**\\r\\n   * @notice Restricts the caller to the local bridge router\\r\\n   */\\r\\n  modifier onlyBridgeRouter() {\\r\\n    require(msg.sender == address(bridgeRouter), \\\"!bridge\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    uint256 _domain,\\r\\n    address payable _bridgeRouter,\\r\\n    address _tokenRegistry, // Nomad token registry\\r\\n    address _wrappedNative\\r\\n  ) public initializer {\\r\\n    __ProposedOwnable_init();\\r\\n    __ReentrancyGuard_init();\\r\\n\\r\\n    nonce = 0;\\r\\n    domain = _domain;\\r\\n    bridgeRouter = BridgeRouter(_bridgeRouter);\\r\\n    interpreter = new FulfillInterpreter(address(this));\\r\\n    tokenRegistry = TokenRegistry(_tokenRegistry);\\r\\n    wrapper = IWrapped(_wrappedNative);\\r\\n  }\\r\\n\\r\\n  // ============ Owner Functions ============\\r\\n\\r\\n  /**\\r\\n   * @notice Used to add routers that can transact crosschain\\r\\n   * @param router Router address to add\\r\\n   */\\r\\n  function addRouter(address router) external onlyOwner {\\r\\n    // Sanity check: not empty\\r\\n    require(router != address(0), \\\"#AR:001\\\");\\r\\n\\r\\n    // Sanity check: needs approval\\r\\n    require(approvedRouters[router] == false, \\\"#AR:032\\\");\\r\\n\\r\\n    // Update mapping\\r\\n    approvedRouters[router] = true;\\r\\n\\r\\n    // Emit event\\r\\n    emit RouterAdded(router, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to remove routers that can transact crosschain\\r\\n   * @param router Router address to remove\\r\\n   */\\r\\n  function removeRouter(address router) external onlyOwner {\\r\\n    // Sanity check: not empty\\r\\n    require(router != address(0), \\\"#RR:001\\\");\\r\\n\\r\\n    // Sanity check: needs removal\\r\\n    require(approvedRouters[router] == true, \\\"#RR:033\\\");\\r\\n\\r\\n    // Update mapping\\r\\n    approvedRouters[router] = false;\\r\\n\\r\\n    // Emit event\\r\\n    emit RouterRemoved(router, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a stable swap pool for the local <> adopted asset.\\r\\n   */\\r\\n  function addStableSwapPool(\\r\\n    BridgeMessage.TokenId calldata canonical,\\r\\n    address stableSwapPool\\r\\n  ) external onlyOwner {\\r\\n    _addStableSwapPool(canonical, stableSwapPool);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to add supported assets. This is an admin only function\\r\\n   * @dev When whitelisting the canonical asset, all representational assets would be\\r\\n   * whitelisted as well. In the event you have a different adopted asset (i.e. PoS USDC\\r\\n   * on polygon), you should *not* whitelist the adopted asset. The stable swap pool\\r\\n   * address used should allow you to swap between the local <> adopted asset\\r\\n   * @param canonical - The canonical asset to add by id and domain. All representations\\r\\n   * will be whitelisted as well\\r\\n   * @param adoptedAssetId - The used asset id for this domain (i.e. PoS USDC for\\r\\n   * polygon)\\r\\n   * @param stableSwapPool - Address of the pool to swap adopted <> local asset\\r\\n   */\\r\\n  function setupAsset(\\r\\n    BridgeMessage.TokenId calldata canonical,\\r\\n    address adoptedAssetId,\\r\\n    address stableSwapPool\\r\\n  ) external onlyOwner {\\r\\n    // Add the asset\\r\\n    _addAssetId(canonical, adoptedAssetId);\\r\\n\\r\\n    // Add the swap pool\\r\\n    _addStableSwapPool(canonical, stableSwapPool);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to remove assets from the whitelist\\r\\n   * @param canonicalId - Token id to remove\\r\\n   * @param adoptedAssetId - Corresponding adopted asset to remove\\r\\n   */\\r\\n  function removeAssetId(bytes32 canonicalId, address adoptedAssetId) external onlyOwner {\\r\\n    // Sanity check: already approval\\r\\n    require(approvedAssets[canonicalId] == true, \\\"#RA:033\\\");\\r\\n\\r\\n    // Update mapping\\r\\n    delete approvedAssets[canonicalId];\\r\\n\\r\\n    // Update pools\\r\\n    delete adoptedToLocalPools[canonicalId];\\r\\n\\r\\n    // Update adopted mapping\\r\\n    delete adoptedToCanonical[adoptedAssetId == address(0) ? address(wrapper) : adoptedAssetId];\\r\\n\\r\\n    // Emit event\\r\\n    emit AssetRemoved(canonicalId, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to add relayer fees in the native asset\\r\\n   * @param router - The router to credit\\r\\n   */\\r\\n  function addRelayerFees(address router) external payable {\\r\\n    routerRelayerFees[router] += msg.value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to remove relayer fee in the native asset\\r\\n   * @dev Must be called by the router you are decrementing relayer fees for\\r\\n   * @param amount - The amount of relayer fee to remove\\r\\n   * @param recipient - Who to send funds to\\r\\n   */\\r\\n  function removeRelayerFees(uint256 amount, address payable recipient) external {\\r\\n    routerRelayerFees[msg.sender] -= amount;\\r\\n    \\r\\n    AddressUpgradeable.sendValue(recipient, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice This is used by anyone to increase a router's available liquidity for a given asset.\\r\\n   * @dev The liquidity will be held in the local asset, which is the representation if you\\r\\n   * are *not* on the canonical domain, and the canonical asset otherwise.\\r\\n   * @param amount - The amount of liquidity to add for the router\\r\\n   * @param local - The address of the asset you're adding liquidity for. If adding liquidity of the\\r\\n   * native asset, routers may use `address(0)` or the wrapped asset\\r\\n   * @param router The router you are adding liquidity on behalf of\\r\\n   */\\r\\n  function addLiquidityFor(uint256 amount, address local, address router) external payable nonReentrant {\\r\\n    _addLiquidityForRouter(amount, local, router);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice This is used by any router to increase their available liquidity for a given asset.\\r\\n   * @dev The liquidity will be held in the local asset, which is the representation if you\\r\\n   * are *not* on the canonical domain, and the canonical asset otherwise.\\r\\n   * @param amount - The amount of liquidity to add for the router\\r\\n   * @param local - The address of the asset you're adding liquidity for. If adding liquidity of the\\r\\n   * native asset, routers may use `address(0)` or the wrapped asset\\r\\n   */\\r\\n  function addLiquidity(uint256 amount, address local) external payable nonReentrant {\\r\\n    _addLiquidityForRouter(amount, local, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice This is used by any router to decrease their available liquidity for a given asset.\\r\\n   * @param amount - The amount of liquidity to remove for the router\\r\\n   * @param local - The address of the asset you're removing liquidity from. If removing liquidity of the\\r\\n   * native asset, routers may use `address(0)` or the wrapped asset\\r\\n   * @param recipient The address that will receive the liquidity being removed\\r\\n   */\\r\\n  function removeLiquidity(\\r\\n    uint256 amount,\\r\\n    address local,\\r\\n    address payable recipient\\r\\n  ) external  nonReentrant {\\r\\n    // Sanity check: recipient is sensible\\r\\n    require(recipient != address(0), \\\"#RL:007\\\");\\r\\n\\r\\n    // Sanity check: nonzero amounts\\r\\n    require(amount > 0, \\\"#RL:002\\\");\\r\\n\\r\\n    uint256 routerBalance = routerBalances[msg.sender][local];\\r\\n    // Sanity check: amount can be deducted for the router\\r\\n    require(routerBalance >= amount, \\\"#RL:008\\\");\\r\\n\\r\\n    // Update router balances\\r\\n    unchecked {\\r\\n      routerBalances[msg.sender][local] = routerBalance - amount;\\r\\n    }\\r\\n\\r\\n    // Transfer from contract to specified recipient\\r\\n    _transferAssetFromContract(local, recipient, amount);    \\r\\n\\r\\n    // Emit event\\r\\n    emit LiquidityRemoved(msg.sender, recipient, local, amount, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice This function is called by a user who is looking to bridge funds\\r\\n   * @dev This contract must have approval to transfer the adopted assets. They are then swapped to\\r\\n   * the local nomad assets via the configured AMM and sent over the bridge router.\\r\\n   * @param _args - The PrepareArgs\\r\\n   * @return The transaction id of the crosschain transaction\\r\\n   */\\r\\n  // TODO: add indicator if fast liquidity is allowed\\r\\n  function prepare(\\r\\n    PrepareArgs calldata _args\\r\\n  ) external payable returns (bytes32) {\\r\\n    // Asset must be either adopted, canonical, or representation\\r\\n    // TODO: why is this breaking the build\\r\\n    // require(\\r\\n    //   adoptedToCanonical[_asset].id != bytes32(0) || \\r\\n    //   tokenRegistry.getLocalAddress(domain, _asset) != address(0),\\r\\n    //   \\\"!supported_asset\\\"\\r\\n    // );\\r\\n\\r\\n    require(\\r\\n      adoptedToCanonical[_args.transactingAssetId == address(0) ? address(wrapper) : _args.transactingAssetId].id != bytes32(0),\\r\\n      \\\"!supported_asset\\\"\\r\\n    );\\r\\n\\r\\n    // Transfer funds to the contract\\r\\n    (address _transactingAssetId, uint256 _amount) = _transferAssetToContract(_args.transactingAssetId, _args.amount);\\r\\n\\r\\n    // Swap to the local asset from the adopted\\r\\n    (uint256 _bridgedAmt, address _bridged) = _swapToLocalAssetIfNeeded(_transactingAssetId, _amount);\\r\\n\\r\\n    // Compute the transaction id\\r\\n    bytes32 _transactionId = _getTransactionId(nonce, domain);\\r\\n    // Update nonce\\r\\n    nonce++;\\r\\n\\r\\n    // Call `send` on the bridge router\\r\\n    _sendMessage(\\r\\n      _args.params.destinationDomain,\\r\\n      _args.params.recipient,\\r\\n      _bridged,\\r\\n      _bridgedAmt,\\r\\n      _transactionId,\\r\\n      _getExternalHash(_args.params.recipient, _args.params.callTo, _args.params.callData)\\r\\n    );\\r\\n\\r\\n    // Emit event\\r\\n    emit Prepared(\\r\\n      _transactionId,\\r\\n      _args.params.recipient,\\r\\n      _args.params,\\r\\n      _transactingAssetId, // NOTE: this will switch from input to wrapper if native used\\r\\n      _bridged,\\r\\n      _amount,\\r\\n      _bridgedAmt,\\r\\n      nonce - 1,\\r\\n      msg.sender\\r\\n    );\\r\\n\\r\\n    // Return the transaction id\\r\\n    return _transactionId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice This function is called by the bridge router to pass through the information provided\\r\\n   * by the user on prepare.\\r\\n   * @dev If fast liquidity was provided, the `amount` and `externalHash` are asserted against the\\r\\n   * `FulfilledTransaction` struct stored onchain. If no fast liqudity was provided, the hash\\r\\n   * of the `ReconciledTransaction` is stored onchain to enforce correctness when `fulfill` is called\\r\\n   * @param _id - The transaction id\\r\\n   * @param _local - The address of the asset delivered by the bridge\\r\\n   * @param _recipient - The address that will receive funds on the destination domain\\r\\n   * @param _externalHash - The hash of the `ExternalCall` passed through the bridge\\r\\n   */\\r\\n  function reconcile(\\r\\n    bytes32 _id,\\r\\n    address _local,\\r\\n    address _recipient,\\r\\n    uint256 _amount,\\r\\n    bytes32 _externalHash\\r\\n  ) external onlyBridgeRouter payable {\\r\\n    // Find the router to credit\\r\\n    FulfilledTransaction memory transaction = routedTransactions[_id];\\r\\n\\r\\n    if (transaction.router == address(0)) {\\r\\n      // Nomad bridge fulfilled faster than router, funds should become process-able\\r\\n      // by the user.\\r\\n      reconciledTransactions[_id] = _getReconciledHash(_local, _recipient, _amount, _externalHash);\\r\\n    } else {\\r\\n      // Ensure the router submitted the correct calldata\\r\\n      require(transaction.externalHash == _externalHash, \\\"!external\\\");\\r\\n\\r\\n      // TODO: assert amount\\r\\n\\r\\n      // Credit router\\r\\n      routerBalances[transaction.router][_local] += _amount;\\r\\n    }\\r\\n\\r\\n    // Emit event\\r\\n    emit Reconciled(\\r\\n      _id,\\r\\n      _recipient,\\r\\n      transaction.router,\\r\\n      _local,\\r\\n      _amount,\\r\\n      _externalHash,\\r\\n      transaction,\\r\\n      msg.sender\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice This function is called on the destination chain when the bridged asset should be swapped\\r\\n   * into the adopted asset and the external call executed. Can be used before reconcile (when providing\\r\\n   * fast liquidity) or after reconcile (when using liquidity from the bridge)\\r\\n   * @dev Will store the `FulfilledTransaction` if fast liquidity is provided, or assert the hash of the\\r\\n   * `ReconciledTransaction` when using bridge liquidity\\r\\n   * @param _args - The `FulfillArgs` for the transaction\\r\\n   * @return The transaction id of the crosschain transaction\\r\\n   */\\r\\n  function fulfill(\\r\\n    FulfillArgs calldata _args\\r\\n  ) external returns (bytes32) {\\r\\n    // Get the starting gas\\r\\n    uint256 _start = gasleft();\\r\\n\\r\\n    // Calculate the transaction id\\r\\n    bytes32 _transactionId = _getTransactionId(_args.nonce, _args.params.originDomain);\\r\\n    bool _isFast = reconciledTransactions[_transactionId] == bytes32(0);\\r\\n\\r\\n    _handleLiquidity(_args.params, _transactionId, _args.local, _args.router, _isFast, _args.amount);\\r\\n\\r\\n    // Execute the the transaction\\r\\n    // If this is a mad* asset, then swap on local AMM\\r\\n    (uint256 amount, address adopted) = _swapFromLocalAssetIfNeeded(_args.local, _args.amount);\\r\\n\\r\\n    if (_args.params.callTo == address(0)) {\\r\\n      // Send funds to the user\\r\\n      _transferAssetFromContract(adopted, _args.params.recipient, amount);\\r\\n    } else {\\r\\n      // Send funds to interprepter\\r\\n      _transferAssetFromContract(adopted, address(interpreter), amount);\\r\\n      interpreter.execute(\\r\\n        _transactionId,\\r\\n        payable(_args.params.callTo),\\r\\n        adopted,\\r\\n        payable(_args.params.recipient),\\r\\n        amount,\\r\\n        _args.params.callData\\r\\n      );\\r\\n    }\\r\\n\\r\\n    // Save gas used\\r\\n    if (_isFast) {\\r\\n      routedTransactionsGas[_transactionId] = GasInfo({\\r\\n        gasPrice: tx.gasprice,\\r\\n        gasUsed: _start - gasleft()\\r\\n        // TODO: account for gas used in storage\\r\\n      });\\r\\n    }\\r\\n\\r\\n    // Pay metatx relayer\\r\\n    // NOTE: if this is done *without* fast liquidity, router will be address(0) and the relayer\\r\\n    // will always be paid\\r\\n    _handleRelayerFees(_args.router, _args.nonce, _args.feePercentage, _args.relayerSignature);\\r\\n\\r\\n    // Emit event\\r\\n    emit Fulfilled(\\r\\n      _transactionId,\\r\\n      _args.params.recipient,\\r\\n      msg.sender,\\r\\n      _args.params,\\r\\n      _args.nonce,\\r\\n      _args.local,\\r\\n      adopted,\\r\\n      _args.amount,\\r\\n      amount,\\r\\n      msg.sender\\r\\n    );\\r\\n\\r\\n    return _transactionId;\\r\\n  }\\r\\n\\r\\n  // ============ Private functions ============\\r\\n\\r\\n  /**\\r\\n   * @notice Swaps an adopted asset to the local (representation or canonical) nomad asset\\r\\n   * @dev Will not swap if the asset passed in is the local asset\\r\\n   * @param _asset - The address of the adopted asset to swap into the local asset\\r\\n   * @param _amount - The amount of the adopted asset to swap\\r\\n   * @return The amount of local asset received from swap\\r\\n   * @return The address of asset received post-swap\\r\\n   */\\r\\n  function _swapToLocalAssetIfNeeded(address _asset, uint256 _amount) internal returns (uint256, address) {\\r\\n    // Check to see if the asset must be swapped because it is not the local asset\\r\\n    BridgeMessage.TokenId memory canonical = adoptedToCanonical[_asset];\\r\\n    if (canonical.id == bytes32(0)) {\\r\\n      // This is *not* the adopted asset, meaning it must be the local asset\\r\\n      return (_amount, _asset);\\r\\n    }\\r\\n  \\r\\n    // Get the local token for this domain (may return canonical or representation)\\r\\n    address local = tokenRegistry.getLocalAddress(canonical.domain, canonical.id);\\r\\n\\r\\n    // Check the case where the adopted asset *is* the local asset\\r\\n    if (local == _asset) {\\r\\n      // No need to swap\\r\\n      return (_amount, _asset);\\r\\n    }\\r\\n\\r\\n    // Approve pool\\r\\n    IStableSwap pool = adoptedToLocalPools[canonical.id];\\r\\n    SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_asset), address(pool), _amount);\\r\\n\\r\\n    // Swap the asset to the proper local asset\\r\\n    return (\\r\\n      pool.swapExact(\\r\\n        _amount,\\r\\n        _asset,\\r\\n        local\\r\\n      ), \\r\\n      local\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Swaps a local nomad asset for the adopted asset using the stored stable swap\\r\\n   * @dev Will not swap if the asset passed in is the adopted asset\\r\\n   * @param _asset - The address of the local asset to swap into the adopted asset\\r\\n   * @param _amount - The amount of the local asset to swap\\r\\n   * @return The amount of adopted asset received from swap\\r\\n   * @return The address of asset received post-swap\\r\\n   */\\r\\n  function _swapFromLocalAssetIfNeeded(address _asset, uint256 _amount) internal returns (uint256, address) {\\r\\n    // Get the token id\\r\\n    (, bytes32 id) = tokenRegistry.getCanonicalTokenId(_asset);\\r\\n\\r\\n    // If the adopted asset is the local asset, no need to swap\\r\\n    address adopted = canonicalToAdopted[id];\\r\\n    if (adopted == _asset) {\\r\\n      return (_amount, _asset);\\r\\n    }\\r\\n\\r\\n    // Approve pool\\r\\n    IStableSwap pool = adoptedToLocalPools[id];\\r\\n    SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_asset), address(pool), _amount);\\r\\n\\r\\n    // Otherwise, swap to adopted asset\\r\\n    return (\\r\\n      pool.swapExact(\\r\\n        _amount,\\r\\n        _asset,\\r\\n        adopted\\r\\n      ), \\r\\n      adopted\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets unique identifier from nonce + domain\\r\\n   * @param _nonce - The nonce of the contract\\r\\n   * @param _domain - The origin domain of the transfer\\r\\n   * @return The transaction id\\r\\n   */\\r\\n  function _getTransactionId(uint256 _nonce, uint256 _domain) internal pure returns (bytes32) {\\r\\n    return keccak256(abi.encode(_nonce, _domain));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates the hash of the executed calldata and recipient on fulfill\\r\\n   * @param _recipient - The address that will receive funds on the destination domain\\r\\n   * @param _callTo - The contract address to execute the call data on\\r\\n   * @param _callData - The data to execute\\r\\n   * @return The computed hash\\r\\n   */\\r\\n  function _getExternalHash(address _recipient, address _callTo, bytes memory _callData) internal pure returns (bytes32) {\\r\\n    return keccak256(abi.encode(ExternalCall({\\r\\n      callTo: _callTo,\\r\\n      callData: _callData,\\r\\n      recipient: _recipient\\r\\n    })));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the hash for information returned across the bridge\\r\\n   * @param _local - The asset delivered by the bridge\\r\\n   * @param _recipient - The address that should receive the funds, or fallback address if the external call\\r\\n   * fails\\r\\n   * @param _amount - The amount delivered through the bridge\\r\\n   * @param _externalHash - The hash of the `ExternalCall` passed through the bridge\\r\\n   * @return The hash of the `ReconciledTransaction`\\r\\n   */\\r\\n  function _getReconciledHash(\\r\\n    address _local,\\r\\n    address _recipient,\\r\\n    uint256 _amount,\\r\\n    bytes32 _externalHash\\r\\n  ) internal pure returns (bytes32) {\\r\\n    ReconciledTransaction memory transaction = ReconciledTransaction({\\r\\n      externalHash: _externalHash,\\r\\n      local: _local,\\r\\n      amount: _amount,\\r\\n      recipient: _recipient\\r\\n    });\\r\\n\\r\\n    return keccak256(abi.encode(transaction));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Contains the logic to verify + increment a given routers liquidity\\r\\n   * @dev The liquidity will be held in the local asset, which is the representation if you\\r\\n   * are *not* on the canonical domain, and the canonical asset otherwise.\\r\\n   * @param _amount - The amount of liquidity to add for the router\\r\\n   * @param _local - The address of the nomad representation of the asset\\r\\n   * @param _router - The router you are adding liquidity on behalf of\\r\\n   */\\r\\n  function _addLiquidityForRouter(\\r\\n    uint256 _amount,\\r\\n    address _local,\\r\\n    address _router\\r\\n  ) internal {\\r\\n    // Sanity check: router is sensible\\r\\n    require(_router != address(0), \\\"#AL:001\\\");\\r\\n\\r\\n    // Sanity check: nonzero amounts\\r\\n    require(_amount > 0, \\\"#AL:002\\\");\\r\\n\\r\\n    // Get the canonical asset id from the representation\\r\\n    (, bytes32 id) = tokenRegistry.getTokenId(_local == address(0) ? address(wrapper) : _local);\\r\\n\\r\\n    // Router is approved\\r\\n    require(isRouterOwnershipRenounced() || approvedRouters[_router], \\\"#AL:003\\\");\\r\\n\\r\\n    // Asset is approved\\r\\n    require(isAssetOwnershipRenounced() || approvedAssets[id], \\\"#AL:004\\\");\\r\\n\\r\\n    // Transfer funds to contract\\r\\n    (address _asset, uint256 _received) = _transferAssetToContract(_local, _amount);\\r\\n\\r\\n    // Update the router balances. Happens after pulling funds to account for\\r\\n    // the fee on transfer tokens\\r\\n    routerBalances[_router][_asset] += _received;\\r\\n\\r\\n    // Emit event\\r\\n    emit LiquidityAdded(_router, _asset, id, _received, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Handles transferring funds from msg.sender to the transaction manager contract.\\r\\n   * @dev If using the native asset, will automatically wrap\\r\\n   * @param _assetId - The address to transfer\\r\\n   * @param _specifiedAmount - The specified amount to transfer. May not be the \\r\\n   * actual amount transferred (i.e. fee on transfer tokens)\\r\\n   * @return The assetId of the transferred asset\\r\\n   * @return The amount of the asset that was seen by the contract (may not be the specifiedAmount\\r\\n   * if the token is a fee-on-transfer token)\\r\\n   */\\r\\n  function _transferAssetToContract(address _assetId, uint256 _specifiedAmount) internal returns (address, uint256) {\\r\\n    uint256 trueAmount = _specifiedAmount;\\r\\n\\r\\n    if (_assetId == address(0)) {\\r\\n      // When transferring native asset to the contract, always make sure that the\\r\\n      // asset is properly wrapped\\r\\n      require(msg.value == _specifiedAmount, \\\"!amount\\\");\\r\\n      wrapper.deposit{ value: _specifiedAmount }();\\r\\n      _assetId = address(wrapper);\\r\\n    } else {\\r\\n      // Validate correct amounts are transferred\\r\\n      uint256 starting = IERC20Upgradeable(_assetId).balanceOf(address(this));\\r\\n      require(msg.value == 0, \\\"#TA:006\\\");\\r\\n      SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(_assetId), msg.sender, address(this), _specifiedAmount);\\r\\n      // Calculate the *actual* amount that was sent here\\r\\n      trueAmount = IERC20Upgradeable(_assetId).balanceOf(address(this)) - starting;\\r\\n    }\\r\\n\\r\\n    return (_assetId, trueAmount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Handles transferring funds from msg.sender to the transaction manager contract.\\r\\n   * @dev If using the native asset, will automatically unwrap\\r\\n   * @param _assetId - The address to transfer\\r\\n   * @param _to - The account that will receive the withdrawn funds\\r\\n   * @param _amount - The amount to withdraw from contract\\r\\n   */\\r\\n  function _transferAssetFromContract(address _assetId, address _to, uint256 _amount) internal {\\r\\n    // No native assets should ever be stored on this contract\\r\\n    require(_assetId != address(0), \\\"!native\\\");\\r\\n\\r\\n    if (_assetId == address(wrapper)) {\\r\\n      // If dealing with wrapped assets, make sure they are properly unwrapped\\r\\n      // before sending from contract\\r\\n      wrapper.withdraw(_amount);\\r\\n      AddressUpgradeable.sendValue(payable(_to), _amount);\\r\\n    } else {\\r\\n      // Transfer ERC20 asset\\r\\n      SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_assetId), _to, _amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to add assets on same chain as contract that can be transferred.\\r\\n   * @param _canonical - The canonical TokenId to add (domain and id)\\r\\n   * @param _adoptedAssetId - The used asset id for this domain (i.e. PoS USDC for\\r\\n   * polygon)\\r\\n   */\\r\\n  function _addAssetId(\\r\\n    BridgeMessage.TokenId calldata _canonical,\\r\\n    address _adoptedAssetId\\r\\n  ) internal {\\r\\n    // Sanity check: needs approval\\r\\n    require(approvedAssets[_canonical.id] == false, \\\"#AA:032\\\");\\r\\n\\r\\n    // Update approved assets mapping\\r\\n    approvedAssets[_canonical.id] = true;\\r\\n\\r\\n    // Update the adopted mapping\\r\\n    adoptedToCanonical[_adoptedAssetId] = _canonical;\\r\\n\\r\\n    // Update the canonical mapping\\r\\n    address supported = _adoptedAssetId == address(0) ? address(wrapper) : _adoptedAssetId;\\r\\n    canonicalToAdopted[_canonical.id] = supported;\\r\\n\\r\\n    // Emit event\\r\\n    emit AssetAdded(_canonical.id, _canonical.domain, _adoptedAssetId, supported, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to add an AMM for adopted <> local assets\\r\\n   * @param _canonical - The canonical TokenId to add (domain and id)\\r\\n   * @param _stableSwap - The address of the amm to add\\r\\n   */\\r\\n  function _addStableSwapPool(\\r\\n    BridgeMessage.TokenId calldata _canonical,\\r\\n    address _stableSwap\\r\\n  ) internal {\\r\\n    // Update the pool mapping\\r\\n    adoptedToLocalPools[_canonical.id] = IStableSwap(_stableSwap);\\r\\n\\r\\n    emit StableSwapAdded(_canonical.id, _canonical.domain, _stableSwap, msg.sender);\\r\\n  }\\r\\n\\r\\n  /** */\\r\\n  function _handleLiquidity(\\r\\n    CallParams calldata _params,\\r\\n    bytes32 _transactionId,\\r\\n    address _local,\\r\\n    address _router,\\r\\n    bool _isFast,\\r\\n    uint256 _amount\\r\\n  ) internal {\\r\\n    // Determine if it is fast (i.e. happened before reconcile called, needs\\r\\n    // a router to front)\\r\\n    bytes32 _externalHash = _getExternalHash(_params.recipient, _params.callTo, _params.callData);\\r\\n\\r\\n    if (_isFast) {\\r\\n      // Ensure it has not been fulfilled alread\\r\\n      require(routedTransactions[_transactionId].router == address(0), \\\"!empty\\\");\\r\\n\\r\\n      // Decrement liquidity\\r\\n      routerBalances[_router][_local] -= _amount; \\r\\n\\r\\n      // Store the router\\r\\n      routedTransactions[_transactionId] = FulfilledTransaction({\\r\\n        router: _router,\\r\\n        externalHash: _externalHash,\\r\\n        amount: _amount // will be of the mad asset, not adopted\\r\\n      });\\r\\n    } else {\\r\\n      // Check the reconciled transactions to ensure it is the right data\\r\\n      bytes32 stored = reconciledTransactions[_transactionId];\\r\\n      require(stored != bytes32(0), \\\"!found\\\");\\r\\n      require(stored == _getReconciledHash(_local, _params.recipient, _amount, _externalHash), \\\"!params\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Pays the relayer fee on behalf of a router some multiple on the basefee\\r\\n   * @dev Currently only supported on eip-1559 chains and only handles native assets.\\r\\n   * Alos only used in `fulfill` transactions\\r\\n   * @param _router - The router you are sending the tx on behalf of\\r\\n   * @param _nonce - The nonce of the transaction\\r\\n   * @param _feePct - The percent over the basefee you are adding\\r\\n   */\\r\\n  function _handleRelayerFees(\\r\\n    address _router,\\r\\n    uint256 _nonce,\\r\\n    uint32 _feePct,\\r\\n    bytes calldata _sig\\r\\n  ) internal {\\r\\n    // If the sender *is* the router, do nothing\\r\\n    if (msg.sender == _router) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    // Check the signature of the router on the nonce + fee pct\\r\\n    require(_router == recoverSignature(abi.encode(_nonce, _feePct), _sig), \\\"!rtr_sig\\\");\\r\\n\\r\\n    // Handle 0 case\\r\\n    if (_feePct == 0) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    // Otherwise, send the fee percentage\\r\\n    // TODO: BASEFEE opcode will only be supported if the domain supports EIP1559\\r\\n    // must be able to detect this dynamically\\r\\n\\r\\n    uint256 fee = block.basefee * _feePct / 100;\\r\\n\\r\\n    // Decrement liquidity\\r\\n    routerRelayerFees[_router] -= fee;\\r\\n\\r\\n    // Pay sender\\r\\n    AddressUpgradeable.sendValue(payable(msg.sender), fee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sends a message over the bridge\\r\\n   * @param _destination - The destination domain for the message\\r\\n   * @param _recipient - The address that should receive the funds, or fallback address if the external call\\r\\n   * fails\\r\\n   * @param _local - The asset delivered by the bridge\\r\\n   * @param _amount - The amount delivered through the bridge\\r\\n   * @param _id - The unique identifier of the transaction\\r\\n   * @param _callHash - The hash of the `ExternalCall` information\\r\\n   */\\r\\n  function _sendMessage(\\r\\n    uint32 _destination,\\r\\n    address _recipient,\\r\\n    address _local,\\r\\n    uint256 _amount,\\r\\n    bytes32 _id,\\r\\n    bytes32 _callHash\\r\\n  ) internal {\\r\\n    // Approve the bridge router\\r\\n    SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable(_local), address(bridgeRouter), _amount);\\r\\n\\r\\n    bridgeRouter.send(\\r\\n      _local,\\r\\n      _amount,\\r\\n      _destination,\\r\\n      TypeCasts.addressToBytes32(_recipient),\\r\\n      true,\\r\\n      _id,\\r\\n      _callHash\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Holds the logic to recover the signer from an encoded payload.\\r\\n   * @dev Will hash and convert to an eth signed message.\\r\\n   * @param _encoded The payload that was signed\\r\\n   * @param _sig The signature you are recovering the signer from\\r\\n   */\\r\\n  function recoverSignature(bytes memory _encoded, bytes calldata _sig) internal pure returns (address) {\\r\\n    // Recover\\r\\n    return ECDSAUpgradeable.recover(\\r\\n      ECDSAUpgradeable.toEthSignedMessageHash(keccak256(_encoded)),\\r\\n      _sig\\r\\n    );\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n\\r\\n  /**\\r\\n    * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n    * variables without shifting down storage in the inheritance chain.\\r\\n    * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n    */\\r\\n  uint256[49] private __gap;\\r\\n}\",\"keccak256\":\"0x3a7cddfa3e6c7576104d0c799dc41e7159abec81674543944fba68e484ec0ef9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IFulfillInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface IFulfillInterpreter {\\r\\n\\r\\n  event Executed(\\r\\n    bytes32 indexed transactionId,\\r\\n    address payable callTo,\\r\\n    address assetId,\\r\\n    address payable fallbackAddress,\\r\\n    uint256 amount,\\r\\n    bytes callData,\\r\\n    bytes returnData,\\r\\n    bool success,\\r\\n    bool isContract\\r\\n  );\\r\\n\\r\\n  function getTransactionManager() external returns (address);\\r\\n\\r\\n  function execute(\\r\\n    bytes32 transactionId,\\r\\n    address payable callTo,\\r\\n    address assetId,\\r\\n    address payable fallbackAddress,\\r\\n    uint256 amount,\\r\\n    bytes calldata callData\\r\\n  ) external payable returns (bool success, bool isContract, bytes memory returnData);\\r\\n}\\r\\n\",\"keccak256\":\"0x6b8cccd99466dec7cd203769a49071891d3c04542d244905c39dea5ecf3ea727\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IStableSwap {\\r\\n  /*** EVENTS ***/\\r\\n\\r\\n  // events replicated from SwapUtils to make the ABI easier for dumb\\r\\n  // clients\\r\\n  event TokenSwap(\\r\\n      address indexed buyer,\\r\\n      uint256 tokensSold,\\r\\n      uint256 tokensBought,\\r\\n      uint128 soldId,\\r\\n      uint128 boughtId\\r\\n  );\\r\\n  event AddLiquidity(\\r\\n      address indexed provider,\\r\\n      uint256[] tokenAmounts,\\r\\n      uint256[] fees,\\r\\n      uint256 invariant,\\r\\n      uint256 lpTokenSupply\\r\\n  );\\r\\n  event RemoveLiquidity(\\r\\n      address indexed provider,\\r\\n      uint256[] tokenAmounts,\\r\\n      uint256 lpTokenSupply\\r\\n  );\\r\\n  event RemoveLiquidityOne(\\r\\n      address indexed provider,\\r\\n      uint256 lpTokenAmount,\\r\\n      uint256 lpTokenSupply,\\r\\n      uint256 boughtId,\\r\\n      uint256 tokensBought\\r\\n  );\\r\\n  event RemoveLiquidityImbalance(\\r\\n      address indexed provider,\\r\\n      uint256[] tokenAmounts,\\r\\n      uint256[] fees,\\r\\n      uint256 invariant,\\r\\n      uint256 lpTokenSupply\\r\\n  );\\r\\n  event NewAdminFee(uint256 newAdminFee);\\r\\n  event NewSwapFee(uint256 newSwapFee);\\r\\n  event NewWithdrawFee(uint256 newWithdrawFee);\\r\\n  event RampA(\\r\\n      uint256 oldA,\\r\\n      uint256 newA,\\r\\n      uint256 initialTime,\\r\\n      uint256 futureTime\\r\\n  );\\r\\n  event StopRampA(uint256 currentA, uint256 time);\\r\\n  \\r\\n  \\r\\n  function swapExact(uint256 amountIn, address assetIn, address assetOut) external payable returns (uint256);\\r\\n\\r\\n  function getA() external view returns (uint256);\\r\\n\\r\\n  function getToken(uint8 index) external view returns (IERC20);\\r\\n\\r\\n  function getTokenIndex(address tokenAddress) external view returns (uint8);\\r\\n\\r\\n  function getTokenBalance(uint8 index) external view returns (uint256);\\r\\n\\r\\n  function getVirtualPrice() external view returns (uint256);\\r\\n\\r\\n  // min return calculation functions\\r\\n  function calculateSwap(\\r\\n      uint8 tokenIndexFrom,\\r\\n      uint8 tokenIndexTo,\\r\\n      uint256 dx\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\r\\n      external\\r\\n      view\\r\\n      returns (uint256);\\r\\n\\r\\n  function calculateRemoveLiquidity(uint256 amount)\\r\\n      external\\r\\n      view\\r\\n      returns (uint256[] memory);\\r\\n\\r\\n  function calculateRemoveLiquidityOneToken(\\r\\n      uint256 tokenAmount,\\r\\n      uint8 tokenIndex\\r\\n  ) external view returns (uint256 availableTokenAmount);\\r\\n\\r\\n  // state modifying functions\\r\\n  function initialize(\\r\\n      IERC20[] memory pooledTokens,\\r\\n      uint8[] memory decimals,\\r\\n      string memory lpTokenName,\\r\\n      string memory lpTokenSymbol,\\r\\n      uint256 a,\\r\\n      uint256 fee,\\r\\n      uint256 adminFee,\\r\\n      address lpTokenTargetAddress\\r\\n  ) external;\\r\\n\\r\\n  function swap(\\r\\n      uint8 tokenIndexFrom,\\r\\n      uint8 tokenIndexTo,\\r\\n      uint256 dx,\\r\\n      uint256 minDy,\\r\\n      uint256 deadline\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function addLiquidity(\\r\\n      uint256[] calldata amounts,\\r\\n      uint256 minToMint,\\r\\n      uint256 deadline\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function removeLiquidity(\\r\\n      uint256 amount,\\r\\n      uint256[] calldata minAmounts,\\r\\n      uint256 deadline\\r\\n  ) external returns (uint256[] memory);\\r\\n\\r\\n  function removeLiquidityOneToken(\\r\\n      uint256 tokenAmount,\\r\\n      uint8 tokenIndex,\\r\\n      uint256 minAmount,\\r\\n      uint256 deadline\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function removeLiquidityImbalance(\\r\\n      uint256[] calldata amounts,\\r\\n      uint256 maxBurnAmount,\\r\\n      uint256 deadline\\r\\n  ) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x310606bc8114a32f3ef9e9d47febf103a7d54b2bd8572cb83f942cd47a945204\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IWrapped.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n// TODO: need a correct interface here\\r\\ninterface IWrapped {\\r\\n  function deposit() external payable;\\r\\n\\r\\n  function withdraw(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0f0c1e586142d4c04963c0c2bffe52abcce59659b0f9e25a4f0e05065156f400\",\"license\":\"UNLICENSED\"},\"contracts/interpreters/FulfillInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"../interfaces/IFulfillInterpreter.sol\\\";\\r\\nimport \\\"../lib/LibAsset.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n  * @title FulfillInterpreter\\r\\n  * @author Connext <support@connext.network>\\r\\n  * @notice This library contains an `execute` function that is callabale by\\r\\n  *         an associated TransactionManager contract. This is used to execute\\r\\n  *         arbitrary calldata on a receiving chain.\\r\\n  */\\r\\ncontract FulfillInterpreter is ReentrancyGuard, IFulfillInterpreter {\\r\\n  address private immutable _transactionManager;\\r\\n\\r\\n  constructor(address transactionManager) {\\r\\n    _transactionManager = transactionManager;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice Errors if the sender is not the transaction manager\\r\\n  */\\r\\n  modifier onlyTransactionManager {\\r\\n    require(msg.sender == _transactionManager, \\\"#OTM:027\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n    * @notice Returns the transaction manager address (only address that can \\r\\n    *         call the `execute` function)\\r\\n    * @return The address of the associated transaction manager\\r\\n    */\\r\\n  function getTransactionManager() override external view returns (address) {\\r\\n    return _transactionManager;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n    * @notice Executes some arbitrary call data on a given address. The\\r\\n    *         call data executes can be payable, and will have `amount` sent\\r\\n    *         along with the function (or approved to the contract). If the\\r\\n    *         call fails, rather than reverting, funds are sent directly to \\r\\n    *         some provided fallbaack address\\r\\n    * @param transactionId Unique identifier of transaction id that necessitated\\r\\n    *        calldata execution\\r\\n    * @param callTo The address to execute the calldata on\\r\\n    * @param assetId The assetId of the funds to approve to the contract or\\r\\n    *                send along with the call\\r\\n    * @param fallbackAddress The address to send funds to if the `call` fails\\r\\n    * @param amount The amount to approve or send with the call\\r\\n    * @param callData The data to execute\\r\\n    */\\r\\n  function execute(\\r\\n    bytes32 transactionId,\\r\\n    address payable callTo,\\r\\n    address assetId,\\r\\n    address payable fallbackAddress,\\r\\n    uint256 amount,\\r\\n    bytes calldata callData\\r\\n  ) override external payable onlyTransactionManager returns (bool, bool, bytes memory) {\\r\\n    // If it is not ether, approve the callTo\\r\\n    // We approve here rather than transfer since many external contracts\\r\\n    // simply require an approval, and it is unclear if they can handle \\r\\n    // funds transferred directly to them (i.e. Uniswap)\\r\\n    bool isNative = LibAsset.isNativeAsset(assetId);\\r\\n    if (!isNative) {\\r\\n      LibAsset.increaseERC20Allowance(assetId, callTo, amount);\\r\\n    }\\r\\n\\r\\n    // Check if the callTo is a contract\\r\\n    bool success;\\r\\n    bytes memory returnData;\\r\\n    bool isContract = Address.isContract(callTo);\\r\\n    if (isContract) {\\r\\n      // Try to execute the callData\\r\\n      // the low level call will return `false` if its execution reverts\\r\\n      (success, returnData) = callTo.call{value: isNative ? amount : 0}(callData);\\r\\n    }\\r\\n\\r\\n    // Handle failure cases\\r\\n    if (!success) {\\r\\n      // If it fails, transfer to fallback\\r\\n      LibAsset.transferAsset(assetId, fallbackAddress, amount);\\r\\n      // Decrease allowance\\r\\n      if (!isNative) {\\r\\n        LibAsset.decreaseERC20Allowance(assetId, callTo, amount);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // Emit event\\r\\n    emit Executed(\\r\\n      transactionId,\\r\\n      callTo,\\r\\n      assetId,\\r\\n      fallbackAddress,\\r\\n      amount,\\r\\n      callData,\\r\\n      returnData,\\r\\n      success,\\r\\n      isContract\\r\\n    );\\r\\n    return (success, isContract, returnData);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xc8c384c6affdc898eb71b8365fa98149d76722b3cd7fd9cd84d7721484bad4ca\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n* @title LibAsset\\r\\n* @author Connext <support@connext.network>\\r\\n* @notice This library contains helpers for dealing with onchain transfers\\r\\n*         of assets, including accounting for the native asset `assetId`\\r\\n*         conventions and any noncompliant ERC20 transfers\\r\\n*/\\r\\nlibrary LibAsset {\\r\\n  /** \\r\\n  * @dev All native assets use the empty address for their asset id\\r\\n  *      by convention\\r\\n  */\\r\\n  address constant NATIVE_ASSETID = address(0);\\r\\n\\r\\n  /** \\r\\n  * @notice Determines whether the given assetId is the native asset\\r\\n  * @param assetId The asset identifier to evaluate\\r\\n  * @return Boolean indicating if the asset is the native asset\\r\\n  */\\r\\n  function isNativeAsset(address assetId) internal pure returns (bool) {\\r\\n    return assetId == NATIVE_ASSETID;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n  * @notice Gets the balance of the inheriting contract for the given asset\\r\\n  * @param assetId The asset identifier to get the balance of\\r\\n  * @return Balance held by contracts using this library\\r\\n  */\\r\\n  function getOwnBalance(address assetId) internal view returns (uint256) {\\r\\n    return\\r\\n      isNativeAsset(assetId)\\r\\n        ? address(this).balance\\r\\n        : IERC20Upgradeable(assetId).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  /** \\r\\n  * @notice Transfers ether from the inheriting contract to a given\\r\\n  *         recipient\\r\\n  * @param recipient Address to send ether to\\r\\n  * @param amount Amount to send to given recipient\\r\\n  */\\r\\n  function transferNativeAsset(address payable recipient, uint256 amount)\\r\\n      internal\\r\\n  {\\r\\n    AddressUpgradeable.sendValue(recipient, amount);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n  * @notice Transfers tokens from the inheriting contract to a given\\r\\n  *         recipient\\r\\n  * @param assetId Token address to transfer\\r\\n  * @param recipient Address to send ether to\\r\\n  * @param amount Amount to send to given recipient\\r\\n  */\\r\\n  function transferERC20(\\r\\n      address assetId,\\r\\n      address recipient,\\r\\n      uint256 amount\\r\\n  ) internal {\\r\\n    SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(assetId), recipient, amount);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n  * @notice Transfers tokens from a sender to a given recipient\\r\\n  * @param assetId Token address to transfer\\r\\n  * @param from Address of sender/owner\\r\\n  * @param to Address of recipient/spender\\r\\n  * @param amount Amount to transfer from owner to spender\\r\\n  */\\r\\n  function transferFromERC20(\\r\\n    address assetId,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) external {\\r\\n    SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(assetId), from, to, amount);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n  * @notice Increases the allowance of a token to a spender\\r\\n  * @param assetId Token address of asset to increase allowance of\\r\\n  * @param spender Account whos allowance is increased\\r\\n  * @param amount Amount to increase allowance by\\r\\n  */\\r\\n  function increaseERC20Allowance(\\r\\n    address assetId,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) internal {\\r\\n    require(!isNativeAsset(assetId), \\\"#IA:034\\\");\\r\\n    SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable(assetId), spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice Decreases the allowance of a token to a spender\\r\\n  * @param assetId Token address of asset to decrease allowance of\\r\\n  * @param spender Account whos allowance is decreased\\r\\n  * @param amount Amount to decrease allowance by\\r\\n  */\\r\\n  function decreaseERC20Allowance(\\r\\n    address assetId,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) internal {\\r\\n    require(!isNativeAsset(assetId), \\\"#DA:034\\\");\\r\\n    SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable(assetId), spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice Wrapper function to transfer a given asset (native or erc20) to\\r\\n  *         some recipient. Should handle all non-compliant return value\\r\\n  *         tokens as well by using the SafeERC20 contract by open zeppelin.\\r\\n  * @param assetId Asset id for transfer (address(0) for native asset, \\r\\n  *                token address for erc20s)\\r\\n  * @param recipient Address to send asset to\\r\\n  * @param amount Amount to send to given recipient\\r\\n  */\\r\\n  function transferAsset(\\r\\n      address assetId,\\r\\n      address payable recipient,\\r\\n      uint256 amount\\r\\n  ) internal {\\r\\n    isNativeAsset(assetId)\\r\\n      ? transferNativeAsset(recipient, amount)\\r\\n      : transferERC20(assetId, recipient, amount);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x3bed6930aa31afd805710d9287c5dd4eb1209115f6d65cf26be9da392cc1e6c8\",\"license\":\"UNLICENSED\"},\"contracts/nomad-core/contracts/Home.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ Internal Imports ============\\r\\nimport {Version0} from \\\"./Version0.sol\\\";\\r\\nimport {NomadBase} from \\\"./NomadBase.sol\\\";\\r\\nimport {QueueLib} from \\\"../libs/Queue.sol\\\";\\r\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\r\\nimport {Message} from \\\"../libs/Message.sol\\\";\\r\\nimport {MerkleTreeManager} from \\\"./Merkle.sol\\\";\\r\\nimport {QueueManager} from \\\"./Queue.sol\\\";\\r\\nimport {IUpdaterManager} from \\\"../interfaces/IUpdaterManager.sol\\\";\\r\\n// ============ External Imports ============\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Home\\r\\n * @author Illusory Systems Inc.\\r\\n * @notice Accepts messages to be dispatched to remote chains,\\r\\n * constructs a Merkle tree of the messages,\\r\\n * and accepts signatures from a bonded Updater\\r\\n * which notarize the Merkle tree roots.\\r\\n * Accepts submissions of fraudulent signatures\\r\\n * by the Updater and slashes the Updater in this case.\\r\\n */\\r\\ncontract Home is Version0, QueueManager, MerkleTreeManager, NomadBase {\\r\\n    // ============ Libraries ============\\r\\n\\r\\n    using QueueLib for QueueLib.Queue;\\r\\n    using MerkleLib for MerkleLib.Tree;\\r\\n\\r\\n    // ============ Constants ============\\r\\n\\r\\n    // Maximum bytes per message = 2 KiB\\r\\n    // (somewhat arbitrarily set to begin)\\r\\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\\r\\n\\r\\n    // ============ Public Storage Variables ============\\r\\n\\r\\n    // domain => next available nonce for the domain\\r\\n    mapping(uint32 => uint32) public nonces;\\r\\n    // contract responsible for Updater bonding, slashing and rotation\\r\\n    IUpdaterManager public updaterManager;\\r\\n\\r\\n    // ============ Upgrade Gap ============\\r\\n\\r\\n    // gap for upgrade safety\\r\\n    uint256[48] private __GAP;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a new message is dispatched via Nomad\\r\\n     * @param leafIndex Index of message's leaf in merkle tree\\r\\n     * @param destinationAndNonce Destination and destination-specific\\r\\n     * nonce combined in single field ((destination << 32) & nonce)\\r\\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree for the message\\r\\n     * @param committedRoot the latest notarized root submitted in the last signed Update\\r\\n     * @param message Raw bytes of message\\r\\n     */\\r\\n    event Dispatch(\\r\\n        bytes32 indexed messageHash,\\r\\n        uint256 indexed leafIndex,\\r\\n        uint64 indexed destinationAndNonce,\\r\\n        bytes32 committedRoot,\\r\\n        bytes message\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when proof of an improper update is submitted,\\r\\n     * which sets the contract to FAILED state\\r\\n     * @param oldRoot Old root of the improper update\\r\\n     * @param newRoot New root of the improper update\\r\\n     * @param signature Signature on `oldRoot` and `newRoot\\r\\n     */\\r\\n    event ImproperUpdate(bytes32 oldRoot, bytes32 newRoot, bytes signature);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the Updater is slashed\\r\\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\\r\\n     * @param updater The address of the updater\\r\\n     * @param reporter The address of the entity that reported the updater misbehavior\\r\\n     */\\r\\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the UpdaterManager contract is changed\\r\\n     * @param updaterManager The address of the new updaterManager\\r\\n     */\\r\\n    event NewUpdaterManager(address updaterManager);\\r\\n\\r\\n    // ============ Constructor ============\\r\\n\\r\\n    constructor(uint32 _localDomain) NomadBase(_localDomain) {} // solhint-disable-line no-empty-blocks\\r\\n\\r\\n    // ============ Initializer ============\\r\\n\\r\\n    function initialize(IUpdaterManager _updaterManager) public initializer {\\r\\n        // initialize queue, set Updater Manager, and initialize\\r\\n        __QueueManager_initialize();\\r\\n        _setUpdaterManager(_updaterManager);\\r\\n        __NomadBase_initialize(updaterManager.updater());\\r\\n    }\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that function is called by the UpdaterManager contract\\r\\n     */\\r\\n    modifier onlyUpdaterManager() {\\r\\n        require(msg.sender == address(updaterManager), \\\"!updaterManager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ External: Updater & UpdaterManager Configuration  ============\\r\\n\\r\\n    /**\\r\\n     * @notice Set a new Updater\\r\\n     * @param _updater the new Updater\\r\\n     */\\r\\n    function setUpdater(address _updater) external onlyUpdaterManager {\\r\\n        _setUpdater(_updater);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set a new UpdaterManager contract\\r\\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\\r\\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\\r\\n     * that implements Updater bonding & slashing, and rules for Updater selection & rotation\\r\\n     * @param _updaterManager the new UpdaterManager contract\\r\\n     */\\r\\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\\r\\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\\r\\n    }\\r\\n\\r\\n    // ============ External Functions  ============\\r\\n\\r\\n    /**\\r\\n     * @notice Dispatch the message it to the destination domain & recipient\\r\\n     * @dev Format the message, insert its hash into Merkle tree,\\r\\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\\r\\n     * @param _destinationDomain Domain of destination chain\\r\\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\\r\\n     * @param _messageBody Raw bytes content of message\\r\\n     */\\r\\n    function dispatch(\\r\\n        uint32 _destinationDomain,\\r\\n        bytes32 _recipientAddress,\\r\\n        bytes memory _messageBody\\r\\n    ) external notFailed {\\r\\n        require(_messageBody.length <= MAX_MESSAGE_BODY_BYTES, \\\"msg too long\\\");\\r\\n        // get the next nonce for the destination domain, then increment it\\r\\n        uint32 _nonce = nonces[_destinationDomain];\\r\\n        nonces[_destinationDomain] = _nonce + 1;\\r\\n        // format the message into packed bytes\\r\\n        bytes memory _message = Message.formatMessage(\\r\\n            localDomain,\\r\\n            bytes32(uint256(uint160(msg.sender))),\\r\\n            _nonce,\\r\\n            _destinationDomain,\\r\\n            _recipientAddress,\\r\\n            _messageBody\\r\\n        );\\r\\n        // insert the hashed message into the Merkle tree\\r\\n        bytes32 _messageHash = keccak256(_message);\\r\\n        tree.insert(_messageHash);\\r\\n        // enqueue the new Merkle root after inserting the message\\r\\n        queue.enqueue(root());\\r\\n        // Emit Dispatch event with message information\\r\\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\\r\\n        emit Dispatch(\\r\\n            _messageHash,\\r\\n            count() - 1,\\r\\n            _destinationAndNonce(_destinationDomain, _nonce),\\r\\n            committedRoot,\\r\\n            _message\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Submit a signature from the Updater \\\"notarizing\\\" a root,\\r\\n     * which updates the Home contract's `committedRoot`,\\r\\n     * and publishes the signature which will be relayed to Replica contracts\\r\\n     * @dev emits Update event\\r\\n     * @dev If _newRoot is not contained in the queue,\\r\\n     * the Update is a fraudulent Improper Update, so\\r\\n     * the Updater is slashed & Home is set to FAILED state\\r\\n     * @param _committedRoot Current updated merkle root which the update is building off of\\r\\n     * @param _newRoot New merkle root to update the contract state to\\r\\n     * @param _signature Updater signature on `_committedRoot` and `_newRoot`\\r\\n     */\\r\\n    function update(\\r\\n        bytes32 _committedRoot,\\r\\n        bytes32 _newRoot,\\r\\n        bytes memory _signature\\r\\n    ) external notFailed {\\r\\n        // check that the update is not fraudulent;\\r\\n        // if fraud is detected, Updater is slashed & Home is set to FAILED state\\r\\n        if (improperUpdate(_committedRoot, _newRoot, _signature)) return;\\r\\n        // clear all of the intermediate roots contained in this update from the queue\\r\\n        while (true) {\\r\\n            bytes32 _next = queue.dequeue();\\r\\n            if (_next == _newRoot) break;\\r\\n        }\\r\\n        // update the Home state with the latest signed root & emit event\\r\\n        committedRoot = _newRoot;\\r\\n        emit Update(localDomain, _committedRoot, _newRoot, _signature);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Suggest an update for the Updater to sign and submit.\\r\\n     * @dev If queue is empty, null bytes returned for both\\r\\n     * (No update is necessary because no messages have been dispatched since the last update)\\r\\n     * @return _committedRoot Latest root signed by the Updater\\r\\n     * @return _new Latest enqueued Merkle root\\r\\n     */\\r\\n    function suggestUpdate()\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32 _committedRoot, bytes32 _new)\\r\\n    {\\r\\n        if (queue.length() != 0) {\\r\\n            _committedRoot = committedRoot;\\r\\n            _new = queue.lastItem();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Public Functions  ============\\r\\n\\r\\n    /**\\r\\n     * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\r\\n     */\\r\\n    function homeDomainHash() public view override returns (bytes32) {\\r\\n        return _homeDomainHash(localDomain);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if an Update is an Improper Update;\\r\\n     * if so, slash the Updater and set the contract to FAILED state.\\r\\n     *\\r\\n     * An Improper Update is an update building off of the Home's `committedRoot`\\r\\n     * for which the `_newRoot` does not currently exist in the Home's queue.\\r\\n     * This would mean that message(s) that were not truly\\r\\n     * dispatched on Home were falsely included in the signed root.\\r\\n     *\\r\\n     * An Improper Update will only be accepted as valid by the Replica\\r\\n     * If an Improper Update is attempted on Home,\\r\\n     * the Updater will be slashed immediately.\\r\\n     * If an Improper Update is submitted to the Replica,\\r\\n     * it should be relayed to the Home contract using this function\\r\\n     * in order to slash the Updater with an Improper Update.\\r\\n     *\\r\\n     * An Improper Update submitted to the Replica is only valid\\r\\n     * while the `_oldRoot` is still equal to the `committedRoot` on Home;\\r\\n     * if the `committedRoot` on Home has already been updated with a valid Update,\\r\\n     * then the Updater should be slashed with a Double Update.\\r\\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\\r\\n     * update not current\\r\\n     * @param _oldRoot Old merkle tree root (should equal home's committedRoot)\\r\\n     * @param _newRoot New merkle tree root\\r\\n     * @param _signature Updater signature on `_oldRoot` and `_newRoot`\\r\\n     * @return TRUE if update was an Improper Update (implying Updater was slashed)\\r\\n     */\\r\\n    function improperUpdate(\\r\\n        bytes32 _oldRoot,\\r\\n        bytes32 _newRoot,\\r\\n        bytes memory _signature\\r\\n    ) public notFailed returns (bool) {\\r\\n        require(\\r\\n            _isUpdaterSignature(_oldRoot, _newRoot, _signature),\\r\\n            \\\"!updater sig\\\"\\r\\n        );\\r\\n        require(_oldRoot == committedRoot, \\\"not a current update\\\");\\r\\n        // if the _newRoot is not currently contained in the queue,\\r\\n        // slash the Updater and set the contract to FAILED state\\r\\n        if (!queue.contains(_newRoot)) {\\r\\n            _fail();\\r\\n            emit ImproperUpdate(_oldRoot, _newRoot, _signature);\\r\\n            return true;\\r\\n        }\\r\\n        // if the _newRoot is contained in the queue,\\r\\n        // this is not an improper update\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // ============ Internal Functions  ============\\r\\n\\r\\n    /**\\r\\n     * @notice Set the UpdaterManager\\r\\n     * @param _updaterManager Address of the UpdaterManager\\r\\n     */\\r\\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\\r\\n        require(\\r\\n            Address.isContract(address(_updaterManager)),\\r\\n            \\\"!contract updaterManager\\\"\\r\\n        );\\r\\n        updaterManager = IUpdaterManager(_updaterManager);\\r\\n        emit NewUpdaterManager(address(_updaterManager));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Slash the Updater and set contract state to FAILED\\r\\n     * @dev Called when fraud is proven (Improper Update or Double Update)\\r\\n     */\\r\\n    function _fail() internal override {\\r\\n        // set contract to FAILED\\r\\n        _setFailed();\\r\\n        // slash Updater\\r\\n        updaterManager.slashUpdater(payable(msg.sender));\\r\\n        emit UpdaterSlashed(updater, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal utility function that combines\\r\\n     * `_destination` and `_nonce`.\\r\\n     * @dev Both destination and nonce should be less than 2^32 - 1\\r\\n     * @param _destination Domain of destination chain\\r\\n     * @param _nonce Current nonce for given destination chain\\r\\n     * @return Returns (`_destination` << 32) & `_nonce`\\r\\n     */\\r\\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint64)\\r\\n    {\\r\\n        return (uint64(_destination) << 32) | _nonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa6040d947f71c1d380e31fc63b123222b1f3a214c6ac5369fdefa23674828980\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ Internal Imports ============\\r\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MerkleTreeManager\\r\\n * @author Illusory Systems Inc.\\r\\n * @notice Contains a Merkle tree instance and\\r\\n * exposes view functions for the tree.\\r\\n */\\r\\ncontract MerkleTreeManager {\\r\\n    // ============ Libraries ============\\r\\n\\r\\n    using MerkleLib for MerkleLib.Tree;\\r\\n    MerkleLib.Tree public tree;\\r\\n\\r\\n    // ============ Upgrade Gap ============\\r\\n\\r\\n    // gap for upgrade safety\\r\\n    uint256[49] private __GAP;\\r\\n\\r\\n    // ============ Public Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates and returns tree's current root\\r\\n     */\\r\\n    function root() public view returns (bytes32) {\\r\\n        return tree.root();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the number of inserted leaves in the tree (current index)\\r\\n     */\\r\\n    function count() public view returns (uint256) {\\r\\n        return tree.count;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9bdabee5e1458ab8df45d8c224df33fbd3a58d53ec3f08671cb1121f2a59ff46\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/NomadBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ Internal Imports ============\\r\\nimport {Message} from \\\"../libs/Message.sol\\\";\\r\\n// ============ External Imports ============\\r\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title NomadBase\\r\\n * @author Illusory Systems Inc.\\r\\n * @notice Shared utilities between Home and Replica.\\r\\n */\\r\\nabstract contract NomadBase is Initializable, OwnableUpgradeable {\\r\\n    // ============ Enums ============\\r\\n\\r\\n    // States:\\r\\n    //   0 - UnInitialized - before initialize function is called\\r\\n    //   note: the contract is initialized at deploy time, so it should never be in this state\\r\\n    //   1 - Active - as long as the contract has not become fraudulent\\r\\n    //   2 - Failed - after a valid fraud proof has been submitted;\\r\\n    //   contract will no longer accept updates or new messages\\r\\n    enum States {\\r\\n        UnInitialized,\\r\\n        Active,\\r\\n        Failed\\r\\n    }\\r\\n\\r\\n    // ============ Immutable Variables ============\\r\\n\\r\\n    // Domain of chain on which the contract is deployed\\r\\n    uint32 public immutable localDomain;\\r\\n\\r\\n    // ============ Public Variables ============\\r\\n\\r\\n    // Address of bonded Updater\\r\\n    address public updater;\\r\\n    // Current state of contract\\r\\n    States public state;\\r\\n    // The latest root that has been signed by the Updater\\r\\n    bytes32 public committedRoot;\\r\\n\\r\\n    // ============ Upgrade Gap ============\\r\\n\\r\\n    // gap for upgrade safety\\r\\n    uint256[47] private __GAP;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when update is made on Home\\r\\n     * or unconfirmed update root is submitted on Replica\\r\\n     * @param homeDomain Domain of home contract\\r\\n     * @param oldRoot Old merkle root\\r\\n     * @param newRoot New merkle root\\r\\n     * @param signature Updater's signature on `oldRoot` and `newRoot`\\r\\n     */\\r\\n    event Update(\\r\\n        uint32 indexed homeDomain,\\r\\n        bytes32 indexed oldRoot,\\r\\n        bytes32 indexed newRoot,\\r\\n        bytes signature\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when proof of a double update is submitted,\\r\\n     * which sets the contract to FAILED state\\r\\n     * @param oldRoot Old root shared between two conflicting updates\\r\\n     * @param newRoot Array containing two conflicting new roots\\r\\n     * @param signature Signature on `oldRoot` and `newRoot`[0]\\r\\n     * @param signature2 Signature on `oldRoot` and `newRoot`[1]\\r\\n     */\\r\\n    event DoubleUpdate(\\r\\n        bytes32 oldRoot,\\r\\n        bytes32[2] newRoot,\\r\\n        bytes signature,\\r\\n        bytes signature2\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when Updater is rotated\\r\\n     * @param oldUpdater The address of the old updater\\r\\n     * @param newUpdater The address of the new updater\\r\\n     */\\r\\n    event NewUpdater(address oldUpdater, address newUpdater);\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that contract state != FAILED when the function is called\\r\\n     */\\r\\n    modifier notFailed() {\\r\\n        require(state != States.Failed, \\\"failed state\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Constructor ============\\r\\n\\r\\n    constructor(uint32 _localDomain) {\\r\\n        localDomain = _localDomain;\\r\\n    }\\r\\n\\r\\n    // ============ Initializer ============\\r\\n\\r\\n    function __NomadBase_initialize(address _updater) internal initializer {\\r\\n        __Ownable_init();\\r\\n        _setUpdater(_updater);\\r\\n        state = States.Active;\\r\\n    }\\r\\n\\r\\n    // ============ External Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Called by external agent. Checks that signatures on two sets of\\r\\n     * roots are valid and that the new roots conflict with each other. If both\\r\\n     * cases hold true, the contract is failed and a `DoubleUpdate` event is\\r\\n     * emitted.\\r\\n     * @dev When `fail()` is called on Home, updater is slashed.\\r\\n     * @param _oldRoot Old root shared between two conflicting updates\\r\\n     * @param _newRoot Array containing two conflicting new roots\\r\\n     * @param _signature Signature on `_oldRoot` and `_newRoot`[0]\\r\\n     * @param _signature2 Signature on `_oldRoot` and `_newRoot`[1]\\r\\n     */\\r\\n    function doubleUpdate(\\r\\n        bytes32 _oldRoot,\\r\\n        bytes32[2] calldata _newRoot,\\r\\n        bytes calldata _signature,\\r\\n        bytes calldata _signature2\\r\\n    ) external notFailed {\\r\\n        if (\\r\\n            NomadBase._isUpdaterSignature(_oldRoot, _newRoot[0], _signature) &&\\r\\n            NomadBase._isUpdaterSignature(_oldRoot, _newRoot[1], _signature2) &&\\r\\n            _newRoot[0] != _newRoot[1]\\r\\n        ) {\\r\\n            _fail();\\r\\n            emit DoubleUpdate(_oldRoot, _newRoot, _signature, _signature2);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Public Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\r\\n     */\\r\\n    function homeDomainHash() public view virtual returns (bytes32);\\r\\n\\r\\n    // ============ Internal Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\r\\n     * @param _homeDomain the Home domain to hash\\r\\n     */\\r\\n    function _homeDomainHash(uint32 _homeDomain)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return keccak256(abi.encodePacked(_homeDomain, \\\"NOMAD\\\"));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set contract state to FAILED\\r\\n     * @dev Called when a valid fraud proof is submitted\\r\\n     */\\r\\n    function _setFailed() internal {\\r\\n        state = States.Failed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Moves the contract into failed state\\r\\n     * @dev Called when fraud is proven\\r\\n     * (Double Update is submitted on Home or Replica,\\r\\n     * or Improper Update is submitted on Home)\\r\\n     */\\r\\n    function _fail() internal virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Set the Updater\\r\\n     * @param _newUpdater Address of the new Updater\\r\\n     */\\r\\n    function _setUpdater(address _newUpdater) internal {\\r\\n        address _oldUpdater = updater;\\r\\n        updater = _newUpdater;\\r\\n        emit NewUpdater(_oldUpdater, _newUpdater);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks that signature was signed by Updater\\r\\n     * @param _oldRoot Old merkle root\\r\\n     * @param _newRoot New merkle root\\r\\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\\r\\n     * @return TRUE iff signature is valid signed by updater\\r\\n     **/\\r\\n    function _isUpdaterSignature(\\r\\n        bytes32 _oldRoot,\\r\\n        bytes32 _newRoot,\\r\\n        bytes memory _signature\\r\\n    ) internal view returns (bool) {\\r\\n        bytes32 _digest = keccak256(\\r\\n            abi.encodePacked(homeDomainHash(), _oldRoot, _newRoot)\\r\\n        );\\r\\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\\r\\n        return (ECDSA.recover(_digest, _signature) == updater);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf671ac6620a66ff2683e853931648317f5603367faeb1cb34801d7a44a03381a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Queue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ Internal Imports ============\\r\\nimport {QueueLib} from \\\"../libs/Queue.sol\\\";\\r\\n// ============ External Imports ============\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title QueueManager\\r\\n * @author Illusory Systems Inc.\\r\\n * @notice Contains a queue instance and\\r\\n * exposes view functions for the queue.\\r\\n **/\\r\\ncontract QueueManager is Initializable {\\r\\n    // ============ Libraries ============\\r\\n\\r\\n    using QueueLib for QueueLib.Queue;\\r\\n    QueueLib.Queue internal queue;\\r\\n\\r\\n    // ============ Upgrade Gap ============\\r\\n\\r\\n    // gap for upgrade safety\\r\\n    uint256[49] private __GAP;\\r\\n\\r\\n    // ============ Initializer ============\\r\\n\\r\\n    function __QueueManager_initialize() internal initializer {\\r\\n        queue.initialize();\\r\\n    }\\r\\n\\r\\n    // ============ Public Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Returns number of elements in queue\\r\\n     */\\r\\n    function queueLength() external view returns (uint256) {\\r\\n        return queue.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns TRUE iff `_item` is in the queue\\r\\n     */\\r\\n    function queueContains(bytes32 _item) external view returns (bool) {\\r\\n        return queue.contains(_item);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns last item enqueued to the queue\\r\\n     */\\r\\n    function queueEnd() external view returns (bytes32) {\\r\\n        return queue.lastItem();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x928e09902599ba7c5daf5df3cb4385533fc09a1ed8a814d0317fb1987178ff9e\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Replica.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ Internal Imports ============\\r\\nimport {Version0} from \\\"./Version0.sol\\\";\\r\\nimport {NomadBase} from \\\"./NomadBase.sol\\\";\\r\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\r\\nimport {Message} from \\\"../libs/Message.sol\\\";\\r\\n// ============ External Imports ============\\r\\n// import {TypedMemView} from \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\r\\nimport {TypedMemView} from \\\"../libs/TypedMemView.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Replica\\r\\n * @author Illusory Systems Inc.\\r\\n * @notice Track root updates on Home,\\r\\n * prove and dispatch messages to end recipients.\\r\\n */\\r\\ncontract Replica is Version0, NomadBase {\\r\\n    // ============ Libraries ============\\r\\n\\r\\n    using MerkleLib for MerkleLib.Tree;\\r\\n    using TypedMemView for bytes;\\r\\n    using TypedMemView for bytes29;\\r\\n    using Message for bytes29;\\r\\n\\r\\n    // ============ Enums ============\\r\\n\\r\\n    // Status of Message:\\r\\n    //   0 - None - message has not been proven or processed\\r\\n    //   1 - Proven - message inclusion proof has been validated\\r\\n    //   2 - Processed - message has been dispatched to recipient\\r\\n    enum MessageStatus {\\r\\n        None,\\r\\n        Proven,\\r\\n        Processed\\r\\n    }\\r\\n\\r\\n    // ============ Immutables ============\\r\\n\\r\\n    // Minimum gas for message processing\\r\\n    uint256 public immutable PROCESS_GAS;\\r\\n    // Reserved gas (to ensure tx completes in case message processing runs out)\\r\\n    uint256 public immutable RESERVE_GAS;\\r\\n\\r\\n    // ============ Public Storage ============\\r\\n\\r\\n    // Domain of home chain\\r\\n    uint32 public remoteDomain;\\r\\n    // Number of seconds to wait before root becomes confirmable\\r\\n    uint256 public optimisticSeconds;\\r\\n    // re-entrancy guard\\r\\n    uint8 private entered;\\r\\n    // Mapping of roots to allowable confirmation times\\r\\n    mapping(bytes32 => uint256) public confirmAt;\\r\\n    // Mapping of message leaves to MessageStatus\\r\\n    mapping(bytes32 => MessageStatus) public messages;\\r\\n\\r\\n    // ============ Upgrade Gap ============\\r\\n\\r\\n    // gap for upgrade safety\\r\\n    uint256[45] private __GAP;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when message is processed\\r\\n     * @param messageHash Hash of message that failed to process\\r\\n     * @param success TRUE if the call was executed successfully, FALSE if the call reverted\\r\\n     * @param returnData the return data from the external call\\r\\n     */\\r\\n    event Process(\\r\\n        bytes32 indexed messageHash,\\r\\n        bool indexed success,\\r\\n        bytes indexed returnData\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the value for optimisticTimeout is set\\r\\n     * @param timeout The new value for optimistic timeout\\r\\n     */\\r\\n    event SetOptimisticTimeout(uint256 timeout);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a root's confirmation is modified by governance\\r\\n     * @param root The root for which confirmAt has been set\\r\\n     * @param previousConfirmAt The previous value of confirmAt\\r\\n     * @param newConfirmAt The new value of confirmAt\\r\\n     */\\r\\n    event SetConfirmation(\\r\\n        bytes32 indexed root,\\r\\n        uint256 previousConfirmAt,\\r\\n        uint256 newConfirmAt\\r\\n    );\\r\\n\\r\\n    // ============ Constructor ============\\r\\n\\r\\n    // solhint-disable-next-line no-empty-blocks\\r\\n    constructor(\\r\\n        uint32 _localDomain,\\r\\n        uint256 _processGas,\\r\\n        uint256 _reserveGas\\r\\n    ) NomadBase(_localDomain) {\\r\\n        require(_processGas >= 850_000, \\\"!process gas\\\");\\r\\n        require(_reserveGas >= 15_000, \\\"!reserve gas\\\");\\r\\n        PROCESS_GAS = _processGas;\\r\\n        RESERVE_GAS = _reserveGas;\\r\\n    }\\r\\n\\r\\n    // ============ Initializer ============\\r\\n\\r\\n    function initialize(\\r\\n        uint32 _remoteDomain,\\r\\n        address _updater,\\r\\n        bytes32 _committedRoot,\\r\\n        uint256 _optimisticSeconds\\r\\n    ) public initializer {\\r\\n        __NomadBase_initialize(_updater);\\r\\n        // set storage variables\\r\\n        entered = 1;\\r\\n        remoteDomain = _remoteDomain;\\r\\n        committedRoot = _committedRoot;\\r\\n        confirmAt[_committedRoot] = 1;\\r\\n        optimisticSeconds = _optimisticSeconds;\\r\\n        emit SetOptimisticTimeout(_optimisticSeconds);\\r\\n    }\\r\\n\\r\\n    // ============ External Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Called by external agent. Submits the signed update's new root,\\r\\n     * marks root's allowable confirmation time, and emits an `Update` event.\\r\\n     * @dev Reverts if update doesn't build off latest committedRoot\\r\\n     * or if signature is invalid.\\r\\n     * @param _oldRoot Old merkle root\\r\\n     * @param _newRoot New merkle root\\r\\n     * @param _signature Updater's signature on `_oldRoot` and `_newRoot`\\r\\n     */\\r\\n    function update(\\r\\n        bytes32 _oldRoot,\\r\\n        bytes32 _newRoot,\\r\\n        bytes memory _signature\\r\\n    ) external notFailed {\\r\\n        // ensure that update is building off the last submitted root\\r\\n        require(_oldRoot == committedRoot, \\\"not current update\\\");\\r\\n        // validate updater signature\\r\\n        require(\\r\\n            _isUpdaterSignature(_oldRoot, _newRoot, _signature),\\r\\n            \\\"!updater sig\\\"\\r\\n        );\\r\\n        // Hook for future use\\r\\n        _beforeUpdate();\\r\\n        // set the new root's confirmation timer\\r\\n        confirmAt[_newRoot] = block.timestamp + optimisticSeconds;\\r\\n        // update committedRoot\\r\\n        committedRoot = _newRoot;\\r\\n        emit Update(remoteDomain, _oldRoot, _newRoot, _signature);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice First attempts to prove the validity of provided formatted\\r\\n     * `message`. If the message is successfully proven, then tries to process\\r\\n     * message.\\r\\n     * @dev Reverts if `prove` call returns false\\r\\n     * @param _message Formatted message (refer to NomadBase.sol Message library)\\r\\n     * @param _proof Merkle proof of inclusion for message's leaf\\r\\n     * @param _index Index of leaf in home's merkle tree\\r\\n     */\\r\\n    function proveAndProcess(\\r\\n        bytes memory _message,\\r\\n        bytes32[32] calldata _proof,\\r\\n        uint256 _index\\r\\n    ) external {\\r\\n        require(prove(keccak256(_message), _proof, _index), \\\"!prove\\\");\\r\\n        process(_message);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Given formatted message, attempts to dispatch\\r\\n     * message payload to end recipient.\\r\\n     * @dev Recipient must implement a `handle` method (refer to IMessageRecipient.sol)\\r\\n     * Reverts if formatted message's destination domain is not the Replica's domain,\\r\\n     * if message has not been proven,\\r\\n     * or if not enough gas is provided for the dispatch transaction.\\r\\n     * @param _message Formatted message\\r\\n     * @return _success TRUE iff dispatch transaction succeeded\\r\\n     */\\r\\n    function process(bytes memory _message) public returns (bool _success) {\\r\\n        bytes29 _m = _message.ref(0);\\r\\n        // ensure message was meant for this domain\\r\\n        require(_m.destination() == localDomain, \\\"!destination\\\");\\r\\n        // ensure message has been proven\\r\\n        bytes32 _messageHash = _m.keccak();\\r\\n        require(messages[_messageHash] == MessageStatus.Proven, \\\"!proven\\\");\\r\\n        // check re-entrancy guard\\r\\n        require(entered == 1, \\\"!reentrant\\\");\\r\\n        entered = 0;\\r\\n        // update message status as processed\\r\\n        messages[_messageHash] = MessageStatus.Processed;\\r\\n        // A call running out of gas TYPICALLY errors the whole tx. We want to\\r\\n        // a) ensure the call has a sufficient amount of gas to make a\\r\\n        //    meaningful state change.\\r\\n        // b) ensure that if the subcall runs out of gas, that the tx as a whole\\r\\n        //    does not revert (i.e. we still mark the message processed)\\r\\n        // To do this, we require that we have enough gas to process\\r\\n        // and still return. We then delegate only the minimum processing gas.\\r\\n        require(gasleft() >= PROCESS_GAS + RESERVE_GAS, \\\"!gas\\\");\\r\\n        // get the message recipient\\r\\n        address _recipient = _m.recipientAddress();\\r\\n        // set up for assembly call\\r\\n        uint256 _toCopy;\\r\\n        uint256 _maxCopy = 256;\\r\\n        uint256 _gas = PROCESS_GAS;\\r\\n        // allocate memory for returndata\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        bytes memory _calldata = abi.encodeWithSignature(\\r\\n            \\\"handle(uint32,uint32,bytes32,bytes)\\\",\\r\\n            _m.origin(),\\r\\n            _m.nonce(),\\r\\n            _m.sender(),\\r\\n            _m.body().clone()\\r\\n        );\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := call(\\r\\n                _gas, // gas\\r\\n                _recipient, // recipient\\r\\n                0, // ether value\\r\\n                add(_calldata, 0x20), // inloc\\r\\n                mload(_calldata), // inlen\\r\\n                0, // outloc\\r\\n                0 // outlen\\r\\n            )\\r\\n            // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n            // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n            // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        // emit process results\\r\\n        emit Process(_messageHash, _success, _returnData);\\r\\n        // reset re-entrancy guard\\r\\n        entered = 1;\\r\\n    }\\r\\n\\r\\n    // ============ External Owner Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Set optimistic timeout period for new roots\\r\\n     * @dev Only callable by owner (Governance)\\r\\n     * @param _optimisticSeconds New optimistic timeout period\\r\\n     */\\r\\n    function setOptimisticTimeout(uint256 _optimisticSeconds)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        optimisticSeconds = _optimisticSeconds;\\r\\n        emit SetOptimisticTimeout(_optimisticSeconds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set Updater role\\r\\n     * @dev MUST ensure that all roots signed by previous Updater have\\r\\n     * been relayed before calling. Only callable by owner (Governance)\\r\\n     * @param _updater New Updater\\r\\n     */\\r\\n    function setUpdater(address _updater) external onlyOwner {\\r\\n        _setUpdater(_updater);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set confirmAt for a given root\\r\\n     * @dev To be used if in the case that fraud is proven\\r\\n     * and roots need to be deleted / added. Only callable by owner (Governance)\\r\\n     * @param _root The root for which to modify confirm time\\r\\n     * @param _confirmAt The new confirmation time. Set to 0 to \\\"delete\\\" a root.\\r\\n     */\\r\\n    function setConfirmation(bytes32 _root, uint256 _confirmAt)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        uint256 _previousConfirmAt = confirmAt[_root];\\r\\n        confirmAt[_root] = _confirmAt;\\r\\n        emit SetConfirmation(_root, _previousConfirmAt, _confirmAt);\\r\\n    }\\r\\n\\r\\n    // ============ Public Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Check that the root has been submitted\\r\\n     * and that the optimistic timeout period has expired,\\r\\n     * meaning the root can be processed\\r\\n     * @param _root the Merkle root, submitted in an update, to check\\r\\n     * @return TRUE iff root has been submitted & timeout has expired\\r\\n     */\\r\\n    function acceptableRoot(bytes32 _root) public view returns (bool) {\\r\\n        uint256 _time = confirmAt[_root];\\r\\n        if (_time == 0) {\\r\\n            return false;\\r\\n        }\\r\\n        return block.timestamp >= _time;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Attempts to prove the validity of message given its leaf, the\\r\\n     * merkle proof of inclusion for the leaf, and the index of the leaf.\\r\\n     * @dev Reverts if message's MessageStatus != None (i.e. if message was\\r\\n     * already proven or processed)\\r\\n     * @dev For convenience, we allow proving against any previous root.\\r\\n     * This means that witnesses never need to be updated for the new root\\r\\n     * @param _leaf Leaf of message to prove\\r\\n     * @param _proof Merkle proof of inclusion for leaf\\r\\n     * @param _index Index of leaf in home's merkle tree\\r\\n     * @return Returns true if proof was valid and `prove` call succeeded\\r\\n     **/\\r\\n    function prove(\\r\\n        bytes32 _leaf,\\r\\n        bytes32[32] calldata _proof,\\r\\n        uint256 _index\\r\\n    ) public returns (bool) {\\r\\n        // ensure that message has not been proven or processed\\r\\n        require(messages[_leaf] == MessageStatus.None, \\\"!MessageStatus.None\\\");\\r\\n        // calculate the expected root based on the proof\\r\\n        bytes32 _calculatedRoot = MerkleLib.branchRoot(_leaf, _proof, _index);\\r\\n        // if the root is valid, change status to Proven\\r\\n        if (acceptableRoot(_calculatedRoot)) {\\r\\n            messages[_leaf] = MessageStatus.Proven;\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\r\\n     */\\r\\n    function homeDomainHash() public view override returns (bytes32) {\\r\\n        return _homeDomainHash(remoteDomain);\\r\\n    }\\r\\n\\r\\n    // ============ Internal Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Moves the contract into failed state\\r\\n     * @dev Called when a Double Update is submitted\\r\\n     */\\r\\n    function _fail() internal override {\\r\\n        _setFailed();\\r\\n    }\\r\\n\\r\\n    /// @notice Hook for potential future use\\r\\n    // solhint-disable-next-line no-empty-blocks\\r\\n    function _beforeUpdate() internal {}\\r\\n}\\r\\n\",\"keccak256\":\"0x44b9a670177218810c79c1675f1e92bff73ae7c19a3291852c5766f8935232f2\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Version0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n/**\\r\\n * @title Version0\\r\\n * @notice Version getter for contracts\\r\\n **/\\r\\ncontract Version0 {\\r\\n    uint8 public constant VERSION = 0;\\r\\n}\\r\\n\",\"keccak256\":\"0x85dc63a6a5ca29d27cb35a9c42998292618e7798c8cff7fa601254cf50dbf1c1\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/XAppConnectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ Internal Imports ============\\r\\nimport {Home} from \\\"./Home.sol\\\";\\r\\nimport {Replica} from \\\"./Replica.sol\\\";\\r\\nimport {TypeCasts} from \\\"../libs/TypeCasts.sol\\\";\\r\\n// ============ External Imports ============\\r\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title XAppConnectionManager\\r\\n * @author Illusory Systems Inc.\\r\\n * @notice Manages a registry of local Replica contracts\\r\\n * for remote Home domains. Accepts Watcher signatures\\r\\n * to un-enroll Replicas attached to fraudulent remote Homes\\r\\n */\\r\\ncontract XAppConnectionManager is Ownable {\\r\\n    // ============ Public Storage ============\\r\\n\\r\\n    // Home contract\\r\\n    Home public home;\\r\\n    // local Replica address => remote Home domain\\r\\n    mapping(address => uint32) public replicaToDomain;\\r\\n    // remote Home domain => local Replica address\\r\\n    mapping(uint32 => address) public domainToReplica;\\r\\n    // watcher address => replica remote domain => has/doesn't have permission\\r\\n    mapping(address => mapping(uint32 => bool)) private watcherPermissions;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a new Replica is enrolled / added\\r\\n     * @param domain the remote domain of the Home contract for the Replica\\r\\n     * @param replica the address of the Replica\\r\\n     */\\r\\n    event ReplicaEnrolled(uint32 indexed domain, address replica);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a new Replica is un-enrolled / removed\\r\\n     * @param domain the remote domain of the Home contract for the Replica\\r\\n     * @param replica the address of the Replica\\r\\n     */\\r\\n    event ReplicaUnenrolled(uint32 indexed domain, address replica);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when Watcher permissions are changed\\r\\n     * @param domain the remote domain of the Home contract for the Replica\\r\\n     * @param watcher the address of the Watcher\\r\\n     * @param access TRUE if the Watcher was given permissions, FALSE if permissions were removed\\r\\n     */\\r\\n    event WatcherPermissionSet(\\r\\n        uint32 indexed domain,\\r\\n        address watcher,\\r\\n        bool access\\r\\n    );\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    modifier onlyReplica() {\\r\\n        require(isReplica(msg.sender), \\\"!replica\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Constructor ============\\r\\n\\r\\n    // solhint-disable-next-line no-empty-blocks\\r\\n    constructor() Ownable() {}\\r\\n\\r\\n    // ============ External Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Un-Enroll a replica contract\\r\\n     * in the case that fraud was detected on the Home\\r\\n     * @dev in the future, if fraud occurs on the Home contract,\\r\\n     * the Watcher will submit their signature directly to the Home\\r\\n     * and it can be relayed to all remote chains to un-enroll the Replicas\\r\\n     * @param _domain the remote domain of the Home contract for the Replica\\r\\n     * @param _updater the address of the Updater for the Home contract (also stored on Replica)\\r\\n     * @param _signature signature of watcher on (domain, replica address, updater address)\\r\\n     */\\r\\n    function unenrollReplica(\\r\\n        uint32 _domain,\\r\\n        bytes32 _updater,\\r\\n        bytes memory _signature\\r\\n    ) external {\\r\\n        // ensure that the replica is currently set\\r\\n        address _replica = domainToReplica[_domain];\\r\\n        require(_replica != address(0), \\\"!replica exists\\\");\\r\\n        // ensure that the signature is on the proper updater\\r\\n        require(\\r\\n            Replica(_replica).updater() == TypeCasts.bytes32ToAddress(_updater),\\r\\n            \\\"!current updater\\\"\\r\\n        );\\r\\n        // get the watcher address from the signature\\r\\n        // and ensure that the watcher has permission to un-enroll this replica\\r\\n        address _watcher = _recoverWatcherFromSig(\\r\\n            _domain,\\r\\n            TypeCasts.addressToBytes32(_replica),\\r\\n            _updater,\\r\\n            _signature\\r\\n        );\\r\\n        require(watcherPermissions[_watcher][_domain], \\\"!valid watcher\\\");\\r\\n        // remove the replica from mappings\\r\\n        _unenrollReplica(_replica);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the address of the local Home contract\\r\\n     * @param _home the address of the local Home contract\\r\\n     */\\r\\n    function setHome(address _home) external onlyOwner {\\r\\n        home = Home(_home);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow Owner to enroll Replica contract\\r\\n     * @param _replica the address of the Replica\\r\\n     * @param _domain the remote domain of the Home contract for the Replica\\r\\n     */\\r\\n    function ownerEnrollReplica(address _replica, uint32 _domain)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        // un-enroll any existing replica\\r\\n        _unenrollReplica(_replica);\\r\\n        // add replica and domain to two-way mapping\\r\\n        replicaToDomain[_replica] = _domain;\\r\\n        domainToReplica[_domain] = _replica;\\r\\n        emit ReplicaEnrolled(_domain, _replica);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow Owner to un-enroll Replica contract\\r\\n     * @param _replica the address of the Replica\\r\\n     */\\r\\n    function ownerUnenrollReplica(address _replica) external onlyOwner {\\r\\n        _unenrollReplica(_replica);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow Owner to set Watcher permissions for a Replica\\r\\n     * @param _watcher the address of the Watcher\\r\\n     * @param _domain the remote domain of the Home contract for the Replica\\r\\n     * @param _access TRUE to give the Watcher permissions, FALSE to remove permissions\\r\\n     */\\r\\n    function setWatcherPermission(\\r\\n        address _watcher,\\r\\n        uint32 _domain,\\r\\n        bool _access\\r\\n    ) external onlyOwner {\\r\\n        watcherPermissions[_watcher][_domain] = _access;\\r\\n        emit WatcherPermissionSet(_domain, _watcher, _access);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Query local domain from Home\\r\\n     * @return local domain\\r\\n     */\\r\\n    function localDomain() external view returns (uint32) {\\r\\n        return home.localDomain();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get access permissions for the watcher on the domain\\r\\n     * @param _watcher the address of the watcher\\r\\n     * @param _domain the domain to check for watcher permissions\\r\\n     * @return TRUE iff _watcher has permission to un-enroll replicas on _domain\\r\\n     */\\r\\n    function watcherPermission(address _watcher, uint32 _domain)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return watcherPermissions[_watcher][_domain];\\r\\n    }\\r\\n\\r\\n    // ============ Public Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Check whether _replica is enrolled\\r\\n     * @param _replica the replica to check for enrollment\\r\\n     * @return TRUE iff _replica is enrolled\\r\\n     */\\r\\n    function isReplica(address _replica) public view returns (bool) {\\r\\n        return replicaToDomain[_replica] != 0;\\r\\n    }\\r\\n\\r\\n    // ============ Internal Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Remove the replica from the two-way mappings\\r\\n     * @param _replica replica to un-enroll\\r\\n     */\\r\\n    function _unenrollReplica(address _replica) internal {\\r\\n        uint32 _currentDomain = replicaToDomain[_replica];\\r\\n        domainToReplica[_currentDomain] = address(0);\\r\\n        replicaToDomain[_replica] = 0;\\r\\n        emit ReplicaUnenrolled(_currentDomain, _replica);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the Watcher address from the provided signature\\r\\n     * @return address of watcher that signed\\r\\n     */\\r\\n    function _recoverWatcherFromSig(\\r\\n        uint32 _domain,\\r\\n        bytes32 _replica,\\r\\n        bytes32 _updater,\\r\\n        bytes memory _signature\\r\\n    ) internal view returns (address) {\\r\\n        bytes32 _homeDomainHash = Replica(TypeCasts.bytes32ToAddress(_replica))\\r\\n            .homeDomainHash();\\r\\n        bytes32 _digest = keccak256(\\r\\n            abi.encodePacked(_homeDomainHash, _domain, _updater)\\r\\n        );\\r\\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\\r\\n        return ECDSA.recover(_digest, _signature);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1fbf51873d250aa977a5b83b8fd75a8545b8baaddf95655bd61ccd15db550a49\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/upgrade/UpgradeBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ External Imports ============\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title UpgradeBeaconProxy\\r\\n * @notice\\r\\n * Proxy contract which delegates all logic, including initialization,\\r\\n * to an implementation contract.\\r\\n * The implementation contract is stored within an Upgrade Beacon contract;\\r\\n * the implementation contract can be changed by performing an upgrade on the Upgrade Beacon contract.\\r\\n * The Upgrade Beacon contract for this Proxy is immutably specified at deployment.\\r\\n * @dev This implementation combines the gas savings of keeping the UpgradeBeacon address outside of contract storage\\r\\n * found in 0age's implementation:\\r\\n * https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/proxies/smart-wallet/UpgradeBeaconProxyV1.sol\\r\\n * With the added safety checks that the UpgradeBeacon and implementation are contracts at time of deployment\\r\\n * found in OpenZeppelin's implementation:\\r\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol\\r\\n */\\r\\ncontract UpgradeBeaconProxy {\\r\\n    // ============ Immutables ============\\r\\n\\r\\n    // Upgrade Beacon address is immutable (therefore not kept in contract storage)\\r\\n    address private immutable upgradeBeacon;\\r\\n\\r\\n    // ============ Constructor ============\\r\\n\\r\\n    /**\\r\\n     * @notice Validate that the Upgrade Beacon is a contract, then set its\\r\\n     * address immutably within this contract.\\r\\n     * Validate that the implementation is also a contract,\\r\\n     * Then call the initialization function defined at the implementation.\\r\\n     * The deployment will revert and pass along the\\r\\n     * revert reason if the initialization function reverts.\\r\\n     * @param _upgradeBeacon Address of the Upgrade Beacon to be stored immutably in the contract\\r\\n     * @param _initializationCalldata Calldata supplied when calling the initialization function\\r\\n     */\\r\\n    constructor(address _upgradeBeacon, bytes memory _initializationCalldata)\\r\\n        payable\\r\\n    {\\r\\n        // Validate the Upgrade Beacon is a contract\\r\\n        require(Address.isContract(_upgradeBeacon), \\\"beacon !contract\\\");\\r\\n        // set the Upgrade Beacon\\r\\n        upgradeBeacon = _upgradeBeacon;\\r\\n        // Validate the implementation is a contract\\r\\n        address _implementation = _getImplementation(_upgradeBeacon);\\r\\n        require(\\r\\n            Address.isContract(_implementation),\\r\\n            \\\"beacon implementation !contract\\\"\\r\\n        );\\r\\n        // Call the initialization function on the implementation\\r\\n        if (_initializationCalldata.length > 0) {\\r\\n            _initialize(_implementation, _initializationCalldata);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ External Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Forwards all calls with data to _fallback()\\r\\n     * No public functions are declared on the contract, so all calls hit fallback\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Forwards all calls with no data to _fallback()\\r\\n     */\\r\\n    receive() external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    // ============ Private Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Call the initialization function on the implementation\\r\\n     * Used at deployment to initialize the proxy\\r\\n     * based on the logic for initialization defined at the implementation\\r\\n     * @param _implementation - Contract to which the initalization is delegated\\r\\n     * @param _initializationCalldata - Calldata supplied when calling the initialization function\\r\\n     */\\r\\n    function _initialize(\\r\\n        address _implementation,\\r\\n        bytes memory _initializationCalldata\\r\\n    ) private {\\r\\n        // Delegatecall into the implementation, supplying initialization calldata.\\r\\n        (bool _ok, ) = _implementation.delegatecall(_initializationCalldata);\\r\\n        // Revert and include revert data if delegatecall to implementation reverts.\\r\\n        if (!_ok) {\\r\\n            assembly {\\r\\n                returndatacopy(0, 0, returndatasize())\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates function calls to the implementation contract returned by the Upgrade Beacon\\r\\n     */\\r\\n    function _fallback() private {\\r\\n        _delegate(_getImplementation());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate function execution to the implementation contract\\r\\n     * @dev This is a low level function that doesn't return to its internal\\r\\n     * call site. It will return whatever is returned by the implementation to the\\r\\n     * external caller, reverting and returning the revert data if implementation\\r\\n     * reverts.\\r\\n     * @param _implementation - Address to which the function execution is delegated\\r\\n     */\\r\\n    function _delegate(address _implementation) private {\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            // Delegatecall to the implementation, supplying calldata and gas.\\r\\n            // Out and outsize are set to zero - instead, use the return buffer.\\r\\n            let result := delegatecall(\\r\\n                gas(),\\r\\n                _implementation,\\r\\n                0,\\r\\n                calldatasize(),\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n            // Copy the returned data from the return buffer.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            switch result\\r\\n            // Delegatecall returns 0 on error.\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Call the Upgrade Beacon to get the current implementation contract address\\r\\n     * @return _implementation Address of the current implementation.\\r\\n     */\\r\\n    function _getImplementation()\\r\\n        private\\r\\n        view\\r\\n        returns (address _implementation)\\r\\n    {\\r\\n        _implementation = _getImplementation(upgradeBeacon);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Call the Upgrade Beacon to get the current implementation contract address\\r\\n     * @dev _upgradeBeacon is passed as a parameter so that\\r\\n     * we can also use this function in the constructor,\\r\\n     * where we can't access immutable variables.\\r\\n     * @param _upgradeBeacon Address of the UpgradeBeacon storing the current implementation\\r\\n     * @return _implementation Address of the current implementation.\\r\\n     */\\r\\n    function _getImplementation(address _upgradeBeacon)\\r\\n        private\\r\\n        view\\r\\n        returns (address _implementation)\\r\\n    {\\r\\n        // Get the current implementation address from the upgrade beacon.\\r\\n        (bool _ok, bytes memory _returnData) = _upgradeBeacon.staticcall(\\\"\\\");\\r\\n        // Revert and pass along revert message if call to upgrade beacon reverts.\\r\\n        require(_ok, string(_returnData));\\r\\n        // Set the implementation to the address returned from the upgrade beacon.\\r\\n        _implementation = abi.decode(_returnData, (address));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x59ec01971c4069ee1e4581c7ef2f0d70a6a42b212eb7b2846a28587ea7b27ee4\",\"license\":\"MIT\"},\"contracts/nomad-core/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\ninterface IMessageRecipient {\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        uint32 _nonce,\\r\\n        bytes32 _sender,\\r\\n        bytes memory _message\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xce925ec41c793bb5d3fbd2e3e9bb1c086a069c4bc4e8a63a3440acd47a1d3c52\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/interfaces/IUpdaterManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\ninterface IUpdaterManager {\\r\\n    function slashUpdater(address payable _reporter) external;\\r\\n\\r\\n    function updater() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xc3fd50e375e2096221ab5419152e5fd36165d9cb0466d21580184eb6cc529c4b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// work based on eth2 deposit contract, which is used under CC0-1.0\\r\\n\\r\\n/**\\r\\n * @title MerkleLib\\r\\n * @author Illusory Systems Inc.\\r\\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\\r\\n **/\\r\\nlibrary MerkleLib {\\r\\n    uint256 internal constant TREE_DEPTH = 32;\\r\\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\\r\\n\\r\\n    /**\\r\\n     * @notice Struct representing incremental merkle tree. Contains current\\r\\n     * branch and the number of inserted leaves in the tree.\\r\\n     **/\\r\\n    struct Tree {\\r\\n        bytes32[TREE_DEPTH] branch;\\r\\n        uint256 count;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Inserts `_node` into merkle tree\\r\\n     * @dev Reverts if tree is full\\r\\n     * @param _node Element to insert into tree\\r\\n     **/\\r\\n    function insert(Tree storage _tree, bytes32 _node) internal {\\r\\n        require(_tree.count < MAX_LEAVES, \\\"merkle tree full\\\");\\r\\n\\r\\n        _tree.count += 1;\\r\\n        uint256 size = _tree.count;\\r\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\r\\n            if ((size & 1) == 1) {\\r\\n                _tree.branch[i] = _node;\\r\\n                return;\\r\\n            }\\r\\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\\r\\n            size /= 2;\\r\\n        }\\r\\n        // As the loop should always end prematurely with the `return` statement,\\r\\n        // this code should be unreachable. We assert `false` just to be safe.\\r\\n        assert(false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates and returns`_tree`'s current root given array of zero\\r\\n     * hashes\\r\\n     * @param _zeroes Array of zero hashes\\r\\n     * @return _current Calculated root of `_tree`\\r\\n     **/\\r\\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32 _current)\\r\\n    {\\r\\n        uint256 _index = _tree.count;\\r\\n\\r\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\r\\n            uint256 _ithBit = (_index >> i) & 0x01;\\r\\n            bytes32 _next = _tree.branch[i];\\r\\n            if (_ithBit == 1) {\\r\\n                _current = keccak256(abi.encodePacked(_next, _current));\\r\\n            } else {\\r\\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates and returns`_tree`'s current root\\r\\n    function root(Tree storage _tree) internal view returns (bytes32) {\\r\\n        return rootWithCtx(_tree, zeroHashes());\\r\\n    }\\r\\n\\r\\n    /// @notice Returns array of TREE_DEPTH zero hashes\\r\\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\\r\\n    function zeroHashes()\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32[TREE_DEPTH] memory _zeroes)\\r\\n    {\\r\\n        _zeroes[0] = Z_0;\\r\\n        _zeroes[1] = Z_1;\\r\\n        _zeroes[2] = Z_2;\\r\\n        _zeroes[3] = Z_3;\\r\\n        _zeroes[4] = Z_4;\\r\\n        _zeroes[5] = Z_5;\\r\\n        _zeroes[6] = Z_6;\\r\\n        _zeroes[7] = Z_7;\\r\\n        _zeroes[8] = Z_8;\\r\\n        _zeroes[9] = Z_9;\\r\\n        _zeroes[10] = Z_10;\\r\\n        _zeroes[11] = Z_11;\\r\\n        _zeroes[12] = Z_12;\\r\\n        _zeroes[13] = Z_13;\\r\\n        _zeroes[14] = Z_14;\\r\\n        _zeroes[15] = Z_15;\\r\\n        _zeroes[16] = Z_16;\\r\\n        _zeroes[17] = Z_17;\\r\\n        _zeroes[18] = Z_18;\\r\\n        _zeroes[19] = Z_19;\\r\\n        _zeroes[20] = Z_20;\\r\\n        _zeroes[21] = Z_21;\\r\\n        _zeroes[22] = Z_22;\\r\\n        _zeroes[23] = Z_23;\\r\\n        _zeroes[24] = Z_24;\\r\\n        _zeroes[25] = Z_25;\\r\\n        _zeroes[26] = Z_26;\\r\\n        _zeroes[27] = Z_27;\\r\\n        _zeroes[28] = Z_28;\\r\\n        _zeroes[29] = Z_29;\\r\\n        _zeroes[30] = Z_30;\\r\\n        _zeroes[31] = Z_31;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates and returns the merkle root for the given leaf\\r\\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\\r\\n     * @param _item Merkle leaf\\r\\n     * @param _branch Merkle proof\\r\\n     * @param _index Index of `_item` in tree\\r\\n     * @return _current Calculated merkle root\\r\\n     **/\\r\\n    function branchRoot(\\r\\n        bytes32 _item,\\r\\n        bytes32[TREE_DEPTH] memory _branch,\\r\\n        uint256 _index\\r\\n    ) internal pure returns (bytes32 _current) {\\r\\n        _current = _item;\\r\\n\\r\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\r\\n            uint256 _ithBit = (_index >> i) & 0x01;\\r\\n            bytes32 _next = _branch[i];\\r\\n            if (_ithBit == 1) {\\r\\n                _current = keccak256(abi.encodePacked(_next, _current));\\r\\n            } else {\\r\\n                _current = keccak256(abi.encodePacked(_current, _next));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // keccak256 zero hashes\\r\\n    bytes32 internal constant Z_0 =\\r\\n        hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\r\\n    bytes32 internal constant Z_1 =\\r\\n        hex\\\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\\\";\\r\\n    bytes32 internal constant Z_2 =\\r\\n        hex\\\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\\\";\\r\\n    bytes32 internal constant Z_3 =\\r\\n        hex\\\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\\\";\\r\\n    bytes32 internal constant Z_4 =\\r\\n        hex\\\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\\\";\\r\\n    bytes32 internal constant Z_5 =\\r\\n        hex\\\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\\\";\\r\\n    bytes32 internal constant Z_6 =\\r\\n        hex\\\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\\\";\\r\\n    bytes32 internal constant Z_7 =\\r\\n        hex\\\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\\\";\\r\\n    bytes32 internal constant Z_8 =\\r\\n        hex\\\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\\\";\\r\\n    bytes32 internal constant Z_9 =\\r\\n        hex\\\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\\\";\\r\\n    bytes32 internal constant Z_10 =\\r\\n        hex\\\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\\\";\\r\\n    bytes32 internal constant Z_11 =\\r\\n        hex\\\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\\\";\\r\\n    bytes32 internal constant Z_12 =\\r\\n        hex\\\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\\\";\\r\\n    bytes32 internal constant Z_13 =\\r\\n        hex\\\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\\\";\\r\\n    bytes32 internal constant Z_14 =\\r\\n        hex\\\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\\\";\\r\\n    bytes32 internal constant Z_15 =\\r\\n        hex\\\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\\\";\\r\\n    bytes32 internal constant Z_16 =\\r\\n        hex\\\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\\\";\\r\\n    bytes32 internal constant Z_17 =\\r\\n        hex\\\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\\\";\\r\\n    bytes32 internal constant Z_18 =\\r\\n        hex\\\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\\\";\\r\\n    bytes32 internal constant Z_19 =\\r\\n        hex\\\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\\\";\\r\\n    bytes32 internal constant Z_20 =\\r\\n        hex\\\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\\\";\\r\\n    bytes32 internal constant Z_21 =\\r\\n        hex\\\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\\\";\\r\\n    bytes32 internal constant Z_22 =\\r\\n        hex\\\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\\\";\\r\\n    bytes32 internal constant Z_23 =\\r\\n        hex\\\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\\\";\\r\\n    bytes32 internal constant Z_24 =\\r\\n        hex\\\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\\\";\\r\\n    bytes32 internal constant Z_25 =\\r\\n        hex\\\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\\\";\\r\\n    bytes32 internal constant Z_26 =\\r\\n        hex\\\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\\\";\\r\\n    bytes32 internal constant Z_27 =\\r\\n        hex\\\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\\\";\\r\\n    bytes32 internal constant Z_28 =\\r\\n        hex\\\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\\\";\\r\\n    bytes32 internal constant Z_29 =\\r\\n        hex\\\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\\\";\\r\\n    bytes32 internal constant Z_30 =\\r\\n        hex\\\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\\\";\\r\\n    bytes32 internal constant Z_31 =\\r\\n        hex\\\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0x55b1d8df57eb38fd4118ccf224388cc899445e7bc8081bc7567c48652450d8cd\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// import \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\r\\n\\r\\nimport \\\"./TypedMemView.sol\\\";\\r\\n\\r\\nimport {\\r\\n    TypeCasts\\r\\n} from \\\"./TypeCasts.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Message Library\\r\\n * @author Illusory Systems Inc.\\r\\n * @notice Library for formatted messages used by Home and Replica.\\r\\n **/\\r\\nlibrary Message {\\r\\n    using TypedMemView for bytes;\\r\\n    using TypedMemView for bytes29;\\r\\n\\r\\n    // Number of bytes in formatted message before `body` field\\r\\n    uint256 internal constant PREFIX_LENGTH = 76;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns formatted (packed) message with provided fields\\r\\n     * @param _originDomain Domain of home chain\\r\\n     * @param _sender Address of sender as bytes32\\r\\n     * @param _nonce Destination-specific nonce\\r\\n     * @param _destinationDomain Domain of destination chain\\r\\n     * @param _recipient Address of recipient on destination chain as bytes32\\r\\n     * @param _messageBody Raw bytes of message body\\r\\n     * @return Formatted message\\r\\n     **/\\r\\n    function formatMessage(\\r\\n        uint32 _originDomain,\\r\\n        bytes32 _sender,\\r\\n        uint32 _nonce,\\r\\n        uint32 _destinationDomain,\\r\\n        bytes32 _recipient,\\r\\n        bytes memory _messageBody\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encodePacked(\\r\\n                _originDomain,\\r\\n                _sender,\\r\\n                _nonce,\\r\\n                _destinationDomain,\\r\\n                _recipient,\\r\\n                _messageBody\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns leaf of formatted message with provided fields.\\r\\n     * @param _origin Domain of home chain\\r\\n     * @param _sender Address of sender as bytes32\\r\\n     * @param _nonce Destination-specific nonce number\\r\\n     * @param _destination Domain of destination chain\\r\\n     * @param _recipient Address of recipient on destination chain as bytes32\\r\\n     * @param _body Raw bytes of message body\\r\\n     * @return Leaf (hash) of formatted message\\r\\n     **/\\r\\n    function messageHash(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        uint32 _nonce,\\r\\n        uint32 _destination,\\r\\n        bytes32 _recipient,\\r\\n        bytes memory _body\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                formatMessage(\\r\\n                    _origin,\\r\\n                    _sender,\\r\\n                    _nonce,\\r\\n                    _destination,\\r\\n                    _recipient,\\r\\n                    _body\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Returns message's origin field\\r\\n    function origin(bytes29 _message) internal pure returns (uint32) {\\r\\n        return uint32(_message.indexUint(0, 4));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns message's sender field\\r\\n    function sender(bytes29 _message) internal pure returns (bytes32) {\\r\\n        return _message.index(4, 32);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns message's nonce field\\r\\n    function nonce(bytes29 _message) internal pure returns (uint32) {\\r\\n        return uint32(_message.indexUint(36, 4));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns message's destination field\\r\\n    function destination(bytes29 _message) internal pure returns (uint32) {\\r\\n        return uint32(_message.indexUint(40, 4));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns message's recipient field as bytes32\\r\\n    function recipient(bytes29 _message) internal pure returns (bytes32) {\\r\\n        return _message.index(44, 32);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns message's recipient field as an address\\r\\n    function recipientAddress(bytes29 _message)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        return TypeCasts.bytes32ToAddress(recipient(_message));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\\r\\n    function body(bytes29 _message) internal pure returns (bytes29) {\\r\\n        return _message.slice(PREFIX_LENGTH, _message.len() - PREFIX_LENGTH, 0);\\r\\n    }\\r\\n\\r\\n    function leaf(bytes29 _message) internal view returns (bytes32) {\\r\\n        return messageHash(origin(_message), sender(_message), nonce(_message), destination(_message), recipient(_message), TypedMemView.clone(body(_message)));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x53f8b1b252d1e0e07e611dc1d908b75055187c73f7816277a4da51a514e6da39\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Queue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n/**\\r\\n * @title QueueLib\\r\\n * @author Illusory Systems Inc.\\r\\n * @notice Library containing queue struct and operations for queue used by\\r\\n * Home and Replica.\\r\\n **/\\r\\nlibrary QueueLib {\\r\\n    /**\\r\\n     * @notice Queue struct\\r\\n     * @dev Internally keeps track of the `first` and `last` elements through\\r\\n     * indices and a mapping of indices to enqueued elements.\\r\\n     **/\\r\\n    struct Queue {\\r\\n        uint128 first;\\r\\n        uint128 last;\\r\\n        mapping(uint256 => bytes32) queue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the queue\\r\\n     * @dev Empty state denoted by _q.first > q._last. Queue initialized\\r\\n     * with _q.first = 1 and _q.last = 0.\\r\\n     **/\\r\\n    function initialize(Queue storage _q) internal {\\r\\n        if (_q.first == 0) {\\r\\n            _q.first = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enqueues a single new element\\r\\n     * @param _item New element to be enqueued\\r\\n     * @return _last Index of newly enqueued element\\r\\n     **/\\r\\n    function enqueue(Queue storage _q, bytes32 _item)\\r\\n        internal\\r\\n        returns (uint128 _last)\\r\\n    {\\r\\n        _last = _q.last + 1;\\r\\n        _q.last = _last;\\r\\n        if (_item != bytes32(0)) {\\r\\n            // saves gas if we're queueing 0\\r\\n            _q.queue[_last] = _item;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Dequeues element at front of queue\\r\\n     * @dev Removes dequeued element from storage\\r\\n     * @return _item Dequeued element\\r\\n     **/\\r\\n    function dequeue(Queue storage _q) internal returns (bytes32 _item) {\\r\\n        uint128 _last = _q.last;\\r\\n        uint128 _first = _q.first;\\r\\n        require(_length(_last, _first) != 0, \\\"Empty\\\");\\r\\n        _item = _q.queue[_first];\\r\\n        if (_item != bytes32(0)) {\\r\\n            // saves gas if we're dequeuing 0\\r\\n            delete _q.queue[_first];\\r\\n        }\\r\\n        _q.first = _first + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Batch enqueues several elements\\r\\n     * @param _items Array of elements to be enqueued\\r\\n     * @return _last Index of last enqueued element\\r\\n     **/\\r\\n    function enqueue(Queue storage _q, bytes32[] memory _items)\\r\\n        internal\\r\\n        returns (uint128 _last)\\r\\n    {\\r\\n        _last = _q.last;\\r\\n        for (uint256 i = 0; i < _items.length; i += 1) {\\r\\n            _last += 1;\\r\\n            bytes32 _item = _items[i];\\r\\n            if (_item != bytes32(0)) {\\r\\n                _q.queue[_last] = _item;\\r\\n            }\\r\\n        }\\r\\n        _q.last = _last;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Batch dequeues `_number` elements\\r\\n     * @dev Reverts if `_number` > queue length\\r\\n     * @param _number Number of elements to dequeue\\r\\n     * @return Array of dequeued elements\\r\\n     **/\\r\\n    function dequeue(Queue storage _q, uint256 _number)\\r\\n        internal\\r\\n        returns (bytes32[] memory)\\r\\n    {\\r\\n        uint128 _last = _q.last;\\r\\n        uint128 _first = _q.first;\\r\\n        // Cannot underflow unless state is corrupted\\r\\n        require(_length(_last, _first) >= _number, \\\"Insufficient\\\");\\r\\n\\r\\n        bytes32[] memory _items = new bytes32[](_number);\\r\\n\\r\\n        for (uint256 i = 0; i < _number; i++) {\\r\\n            _items[i] = _q.queue[_first];\\r\\n            delete _q.queue[_first];\\r\\n            _first++;\\r\\n        }\\r\\n        _q.first = _first;\\r\\n        return _items;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns true if `_item` is in the queue and false if otherwise\\r\\n     * @dev Linearly scans from _q.first to _q.last looking for `_item`\\r\\n     * @param _item Item being searched for in queue\\r\\n     * @return True if `_item` currently exists in queue, false if otherwise\\r\\n     **/\\r\\n    function contains(Queue storage _q, bytes32 _item)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = _q.first; i <= _q.last; i++) {\\r\\n            if (_q.queue[i] == _item) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns last item in queue\\r\\n    /// @dev Returns bytes32(0) if queue empty\\r\\n    function lastItem(Queue storage _q) internal view returns (bytes32) {\\r\\n        return _q.queue[_q.last];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns element at front of queue without removing element\\r\\n    /// @dev Reverts if queue is empty\\r\\n    function peek(Queue storage _q) internal view returns (bytes32 _item) {\\r\\n        require(!isEmpty(_q), \\\"Empty\\\");\\r\\n        _item = _q.queue[_q.first];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns true if queue is empty and false if otherwise\\r\\n    function isEmpty(Queue storage _q) internal view returns (bool) {\\r\\n        return _q.last < _q.first;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns number of elements in queue\\r\\n    function length(Queue storage _q) internal view returns (uint256) {\\r\\n        uint128 _last = _q.last;\\r\\n        uint128 _first = _q.first;\\r\\n        // Cannot underflow unless state is corrupted\\r\\n        return _length(_last, _first);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns number of elements between `_last` and `_first` (used internally)\\r\\n    function _length(uint128 _last, uint128 _first)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return uint256(_last + 1 - _first);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9819dd4b1f54b6945a75bd6089807d81e63fb66b5bff02e94ae6159f17c8c36a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// import \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\r\\nimport \\\"./TypedMemView.sol\\\";\\r\\n\\r\\n\\r\\nlibrary TypeCasts {\\r\\n    using TypedMemView for bytes;\\r\\n    using TypedMemView for bytes29;\\r\\n\\r\\n    function coerceBytes32(string memory _s)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 _b)\\r\\n    {\\r\\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\\r\\n    }\\r\\n\\r\\n    // treat it as a null-terminated string of max 32 bytes\\r\\n    function coerceString(bytes32 _buf)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory _newStr)\\r\\n    {\\r\\n        uint8 _slen = 0;\\r\\n        while (_slen < 32 && _buf[_slen] != 0) {\\r\\n            _slen++;\\r\\n        }\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _newStr := mload(0x40)\\r\\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\\r\\n            mstore(_newStr, _slen)\\r\\n            mstore(add(_newStr, 0x20), _buf)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // alignment preserving cast\\r\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\r\\n        return bytes32(uint256(uint160(_addr)));\\r\\n    }\\r\\n\\r\\n    // alignment preserving cast\\r\\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\r\\n        return address(uint160(uint256(_buf)));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x09f90de8fd9a85644948cab19e96adfaf13c944c691f0b5c94eed98c2c9cbe0e\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.5.10;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary TypedMemView {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Why does this exist?\\r\\n    // the solidity `bytes memory` type has a few weaknesses.\\r\\n    // 1. You can't index ranges effectively\\r\\n    // 2. You can't slice without copying\\r\\n    // 3. The underlying data may represent any type\\r\\n    // 4. Solidity never deallocates memory, and memory costs grow\\r\\n    //    superlinearly\\r\\n\\r\\n    // By using a memory view instead of a `bytes memory` we get the following\\r\\n    // advantages:\\r\\n    // 1. Slices are done on the stack, by manipulating the pointer\\r\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\r\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\r\\n\\r\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\r\\n    // algorithms.\\r\\n\\r\\n    // Why bytes29?\\r\\n    // We want to avoid confusion between views, digests, and other common\\r\\n    // types so we chose a large and uncommonly used odd number of bytes\\r\\n    //\\r\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\r\\n    // are right-aligned. This means when working in assembly we have to\\r\\n    // account for the 3 unused bytes on the righthand side\\r\\n    //\\r\\n    // First 5 bytes are a type flag.\\r\\n    // - ff_ffff_fffe is reserved for unknown type.\\r\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\r\\n    // next 12 are memory address\\r\\n    // next 12 are len\\r\\n    // bottom 3 bytes are empty\\r\\n\\r\\n    // Assumptions:\\r\\n    // - non-modification of memory.\\r\\n    // - No Solidity updates\\r\\n    // - - wrt free mem point\\r\\n    // - - wrt bytes representation in memory\\r\\n    // - - wrt memory addressing in general\\r\\n\\r\\n    // Usage:\\r\\n    // - create type constants\\r\\n    // - use `assertType` for runtime type assertions\\r\\n    // - - unfortunately we can't do this at compile time yet :(\\r\\n    // - recommended: implement modifiers that perform type checking\\r\\n    // - - e.g.\\r\\n    // - - `uint40 constant MY_TYPE = 3;`\\r\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\r\\n    // - instantiate a typed view from a bytearray using `ref`\\r\\n    // - use `index` to inspect the contents of the view\\r\\n    // - use `slice` to create smaller views into the same memory\\r\\n    // - - `slice` can increase the offset\\r\\n    // - - `slice can decrease the length`\\r\\n    // - - must specify the output type of `slice`\\r\\n    // - - `slice` will return a null view if you try to overrun\\r\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\r\\n    // - use `equal` for typed comparisons.\\r\\n\\r\\n\\r\\n    // The null view\\r\\n    bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\r\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\r\\n    uint8 constant TWELVE_BYTES = 96;\\r\\n\\r\\n    /**\\r\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\r\\n     * @param _b    The byte\\r\\n     * @return      char - The encoded hex character\\r\\n     */\\r\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\r\\n        // This can probably be done more efficiently, but it's only in error\\r\\n        // paths, so we don't really care :)\\r\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\r\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\r\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\r\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\r\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\r\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\r\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\r\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\r\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\r\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\r\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\r\\n        if (_nibble == 0xfa) {return 0x61;} // a\\r\\n        if (_nibble == 0xfb) {return 0x62;} // b\\r\\n        if (_nibble == 0xfc) {return 0x63;} // c\\r\\n        if (_nibble == 0xfd) {return 0x64;} // d\\r\\n        if (_nibble == 0xfe) {return 0x65;} // e\\r\\n        if (_nibble == 0xff) {return 0x66;} // f\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\r\\n     * @param _b    The byte\\r\\n     * @return      encoded - The hex-encoded byte\\r\\n     */\\r\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\r\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\r\\n        encoded <<= 8;\\r\\n        encoded |= nibbleHex(_b); // lower 4 bits\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\r\\n     *              `second` contains the encoded lower 16 bytes.\\r\\n     *\\r\\n     * @param _b    The 32 bytes as uint256\\r\\n     * @return      first - The top 16 bytes\\r\\n     * @return      second - The bottom 16 bytes\\r\\n     */\\r\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\r\\n        for (uint8 i = 31; i > 15; i -= 1) {\\r\\n            uint8 _byte = uint8(_b >> (i * 8));\\r\\n            first |= byteHex(_byte);\\r\\n            if (i != 16) {\\r\\n                first <<= 16;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // abusing underflow here =_=\\r\\n        for (uint8 i = 15; i < 255 ; i -= 1) {\\r\\n            uint8 _byte = uint8(_b >> (i * 8));\\r\\n            second |= byteHex(_byte);\\r\\n            if (i != 0) {\\r\\n                second <<= 16;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Changes the endianness of a uint256.\\r\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\r\\n     * @param _b        The unsigned integer to reverse\\r\\n     * @return          v - The reversed value\\r\\n     */\\r\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\r\\n        v = _b;\\r\\n\\r\\n        // swap bytes\\r\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\r\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\r\\n        // swap 2-byte long pairs\\r\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\r\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\r\\n        // swap 4-byte long pairs\\r\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\r\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\r\\n        // swap 8-byte long pairs\\r\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\r\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\r\\n        // swap 16-byte long pairs\\r\\n        v = (v >> 128) | (v << 128);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice      Create a mask with the highest `_len` bits set.\\r\\n     * @param _len  The length\\r\\n     * @return      mask - The mask\\r\\n     */\\r\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\r\\n        // ugly. redo without assembly?\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            mask := sar(\\r\\n                sub(_len, 1),\\r\\n                0x8000000000000000000000000000000000000000000000000000000000000000\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice      Return the null view.\\r\\n     * @return      bytes29 - The null view\\r\\n     */\\r\\n    function nullView() internal pure returns (bytes29) {\\r\\n        return NULL;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice      Check if the view is null.\\r\\n     * @return      bool - True if the view is null\\r\\n     */\\r\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\r\\n        return memView == NULL;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice      Check if the view is not null.\\r\\n     * @return      bool - True if the view is not null\\r\\n     */\\r\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\r\\n        return !isNull(memView);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Check if the view is of a valid type and points to a valid location\\r\\n     *                  in memory.\\r\\n     * @dev             We perform this check by examining solidity's unallocated memory\\r\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\r\\n     * @param memView   The view\\r\\n     * @return          ret - True if the view is valid\\r\\n     */\\r\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\r\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\r\\n        uint256 _end = end(memView);\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            ret := not(gt(_end, mload(0x40)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Require that a typed memory view be valid.\\r\\n     * @dev             Returns the view for easy chaining.\\r\\n     * @param memView   The view\\r\\n     * @return          bytes29 - The validated view\\r\\n     */\\r\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\r\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\r\\n        return memView;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\r\\n     * @param memView   The view\\r\\n     * @param _expected The expected type\\r\\n     * @return          bool - True if the memview is of the expected type\\r\\n     */\\r\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\r\\n        return typeOf(memView) == _expected;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Require that a typed memory view has a specific type.\\r\\n     * @dev             Returns the view for easy chaining.\\r\\n     * @param memView   The view\\r\\n     * @param _expected The expected type\\r\\n     * @return          bytes29 - The view with validated type\\r\\n     */\\r\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\r\\n        if (!isType(memView, _expected)) {\\r\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\r\\n            (, uint256 e) = encodeHex(uint256(_expected));\\r\\n            string memory err = string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"Type assertion failed. Got 0x\\\",\\r\\n                    uint80(g),\\r\\n                    \\\". Expected 0x\\\",\\r\\n                    uint80(e)\\r\\n                )\\r\\n            );\\r\\n            revert(err);\\r\\n        }\\r\\n        return memView;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Return an identical view with a different type.\\r\\n     * @param memView   The view\\r\\n     * @param _newType  The new type\\r\\n     * @return          newView - The new view with the specified type\\r\\n     */\\r\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\r\\n        // then | in the new type\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            // shift off the top 5 bytes\\r\\n            newView := or(newView, shr(40, shl(40, memView)))\\r\\n            newView := or(newView, shl(216, _newType))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\r\\n     *                  directly. Prefer `ref` wherever possible.\\r\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\r\\n     *                  directly. Prefer `ref` wherever possible.\\r\\n     * @param _type     The type\\r\\n     * @param _loc      The memory address\\r\\n     * @param _len      The length\\r\\n     * @return          newView - The new view with the specified type, location and length\\r\\n     */\\r\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            newView := shl(96, or(newView, _type)) // insert type\\r\\n            newView := shl(96, or(newView, _loc))  // insert loc\\r\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Instantiate a new memory view. This should generally not be called\\r\\n     *                  directly. Prefer `ref` wherever possible.\\r\\n     * @dev             Instantiate a new memory view. This should generally not be called\\r\\n     *                  directly. Prefer `ref` wherever possible.\\r\\n     * @param _type     The type\\r\\n     * @param _loc      The memory address\\r\\n     * @param _len      The length\\r\\n     * @return          newView - The new view with the specified type, location and length\\r\\n     */\\r\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\r\\n        uint256 _end = _loc.add(_len);\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            if gt(_end, mload(0x40)) {\\r\\n                _end := 0\\r\\n            }\\r\\n        }\\r\\n        if (_end == 0) {\\r\\n            return NULL;\\r\\n        }\\r\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Instantiate a memory view from a byte array.\\r\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\r\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\r\\n     * @param arr       The byte array\\r\\n     * @param newType   The type\\r\\n     * @return          bytes29 - The memory view\\r\\n     */\\r\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\r\\n        uint256 _len = arr.length;\\r\\n\\r\\n        uint256 _loc;\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\r\\n        }\\r\\n\\r\\n        return build(newType, _loc, _len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Return the associated type information.\\r\\n     * @param memView   The memory view\\r\\n     * @return          _type - The type associated with the view\\r\\n     */\\r\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            // 216 == 256 - 40\\r\\n            _type := shr(216, memView) // shift out lower 24 bytes\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\r\\n     * @param left      The first view\\r\\n     * @param right     The second view\\r\\n     * @return          bool - True if the 5-byte type flag is equal\\r\\n     */\\r\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\r\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Return the memory address of the underlying bytes.\\r\\n     * @param memView   The view\\r\\n     * @return          _loc - The memory address\\r\\n     */\\r\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\r\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\r\\n            _loc := and(shr(120, memView), _mask)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\r\\n     * @param memView   The view\\r\\n     * @return          uint256 - The number of memory words\\r\\n     */\\r\\n    function words(bytes29 memView) internal pure returns (uint256) {\\r\\n        return uint256(len(memView)).add(32) / 32;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\r\\n     * @param memView   The view\\r\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\r\\n     */\\r\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\r\\n        return words(memView) * 32;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          The number of bytes of the view.\\r\\n     * @param memView   The view\\r\\n     * @return          _len - The length of the view\\r\\n     */\\r\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\r\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            _len := and(shr(24, memView), _mask)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Returns the endpoint of `memView`.\\r\\n     * @param memView   The view\\r\\n     * @return          uint256 - The endpoint of `memView`\\r\\n     */\\r\\n    function end(bytes29 memView) internal pure returns (uint256) {\\r\\n        return loc(memView) + len(memView);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Safe slicing without memory modification.\\r\\n     * @param memView   The view\\r\\n     * @param _index    The start index\\r\\n     * @param _len      The length\\r\\n     * @param newType   The new type\\r\\n     * @return          bytes29 - The new view\\r\\n     */\\r\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\r\\n        uint256 _loc = loc(memView);\\r\\n\\r\\n        // Ensure it doesn't overrun the view\\r\\n        if (_loc.add(_index).add(_len) > end(memView)) {\\r\\n            return NULL;\\r\\n        }\\r\\n\\r\\n        _loc = _loc.add(_index);\\r\\n        return build(newType, _loc, _len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\r\\n     * @param memView   The view\\r\\n     * @param _len      The length\\r\\n     * @param newType   The new type\\r\\n     * @return          bytes29 - The new view\\r\\n     */\\r\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\r\\n        return slice(memView, 0, _len, newType);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\r\\n     * @param memView   The view\\r\\n     * @param _len      The length\\r\\n     * @param newType   The new type\\r\\n     * @return          bytes29 - The new view\\r\\n     */\\r\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\r\\n        return slice(memView, uint256(len(memView)).sub(_len), _len, newType);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Construct an error message for an indexing overrun.\\r\\n     * @param _loc      The memory address\\r\\n     * @param _len      The length\\r\\n     * @param _index    The index\\r\\n     * @param _slice    The slice where the overrun occurred\\r\\n     * @return          err - The err\\r\\n     */\\r\\n    function indexErrOverrun(\\r\\n        uint256 _loc,\\r\\n        uint256 _len,\\r\\n        uint256 _index,\\r\\n        uint256 _slice\\r\\n    ) internal pure returns (string memory err) {\\r\\n        (, uint256 a) = encodeHex(_loc);\\r\\n        (, uint256 b) = encodeHex(_len);\\r\\n        (, uint256 c) = encodeHex(_index);\\r\\n        (, uint256 d) = encodeHex(_slice);\\r\\n        err = string(\\r\\n            abi.encodePacked(\\r\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\r\\n                uint48(a),\\r\\n                \\\" with length 0x\\\",\\r\\n                uint48(b),\\r\\n                \\\". Attempted to index at offset 0x\\\",\\r\\n                uint48(c),\\r\\n                \\\" with length 0x\\\",\\r\\n                uint48(d),\\r\\n                \\\".\\\"\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\r\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\r\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\r\\n     *                  To automatically cast to an integer, use `indexUint`.\\r\\n     * @param memView   The view\\r\\n     * @param _index    The index\\r\\n     * @param _bytes    The bytes\\r\\n     * @return          result - The 32 byte result\\r\\n     */\\r\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\r\\n        if (_bytes == 0) {return bytes32(0);}\\r\\n        if (_index.add(_bytes) > len(memView)) {\\r\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\r\\n        }\\r\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\r\\n\\r\\n        uint8 bitLength;\\r\\n        unchecked {\\r\\n            bitLength = _bytes * 8;\\r\\n        }\\r\\n        uint256 _loc = loc(memView);\\r\\n        uint256 _mask = leftMask(bitLength);\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            result := and(mload(add(_loc, _index)), _mask)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\r\\n     * @dev             Requires that the view have >= `_bytes` bytes following that index.\\r\\n     * @param memView   The view\\r\\n     * @param _index    The index\\r\\n     * @param _bytes    The bytes\\r\\n     * @return          result - The unsigned integer\\r\\n     */\\r\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\r\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Parse an unsigned integer from LE bytes.\\r\\n     * @param memView   The view\\r\\n     * @param _index    The index\\r\\n     * @param _bytes    The bytes\\r\\n     * @return          result - The unsigned integer\\r\\n     */\\r\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\r\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\r\\n     *                  following that index.\\r\\n     * @param memView   The view\\r\\n     * @param _index    The index\\r\\n     * @return          address - The address\\r\\n     */\\r\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\r\\n        return address(uint160(indexUint(memView, _index, 20)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Return the keccak256 hash of the underlying memory\\r\\n     * @param memView   The view\\r\\n     * @return          digest - The keccak256 hash of the underlying memory\\r\\n     */\\r\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\r\\n        uint256 _loc = loc(memView);\\r\\n        uint256 _len = len(memView);\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            digest := keccak256(_loc, _len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Return the sha2 digest of the underlying memory.\\r\\n     * @dev             We explicitly deallocate memory afterwards.\\r\\n     * @param memView   The view\\r\\n     * @return          digest - The sha2 hash of the underlying memory\\r\\n     */\\r\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\r\\n        uint256 _loc = loc(memView);\\r\\n        uint256 _len = len(memView);\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            let ptr := mload(0x40)\\r\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\r\\n            digest := mload(ptr)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\r\\n     * @param memView   The pre-image\\r\\n     * @return          digest - the Digest\\r\\n     */\\r\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\r\\n        uint256 _loc = loc(memView);\\r\\n        uint256 _len = len(memView);\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            let ptr := mload(0x40)\\r\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\r\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\r\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\r\\n     * @param memView   A view of the preimage\\r\\n     * @return          digest - the Digest\\r\\n     */\\r\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\r\\n        uint256 _loc = loc(memView);\\r\\n        uint256 _len = len(memView);\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            let ptr := mload(0x40)\\r\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\r\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\r\\n            digest := mload(ptr)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Return true if the underlying memory is equal. Else false.\\r\\n     * @param left      The first view\\r\\n     * @param right     The second view\\r\\n     * @return          bool - True if the underlying memory is equal\\r\\n     */\\r\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\r\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Return false if the underlying memory is equal. Else true.\\r\\n     * @param left      The first view\\r\\n     * @param right     The second view\\r\\n     * @return          bool - False if the underlying memory is equal\\r\\n     */\\r\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\r\\n        return !untypedEqual(left, right);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Compares type equality.\\r\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\r\\n     * @param left      The first view\\r\\n     * @param right     The second view\\r\\n     * @return          bool - True if the types are the same\\r\\n     */\\r\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\r\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Compares type inequality.\\r\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\r\\n     * @param left      The first view\\r\\n     * @param right     The second view\\r\\n     * @return          bool - True if the types are not the same\\r\\n     */\\r\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\r\\n        return !equal(left, right);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\r\\n     * @dev             Super Dangerous direct memory access.\\r\\n     *\\r\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\r\\n     *                  As such it MUST be consumed IMMEDIATELY.\\r\\n     *                  This function is private to prevent unsafe usage by callers.\\r\\n     * @param memView   The view\\r\\n     * @param _newLoc   The new location\\r\\n     * @return          written - the unsafe memory reference\\r\\n     */\\r\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\r\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\r\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\r\\n        uint256 _len = len(memView);\\r\\n        uint256 _oldLoc = loc(memView);\\r\\n\\r\\n        uint256 ptr;\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            ptr := mload(0x40)\\r\\n            // revert if we're writing in occupied memory\\r\\n            if gt(ptr, _newLoc) {\\r\\n                revert(0x60, 0x20) // empty revert message\\r\\n            }\\r\\n\\r\\n            // use the identity precompile to copy\\r\\n            // guaranteed not to fail, so pop the success\\r\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\r\\n        }\\r\\n\\r\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\r\\n     *                  the new memory\\r\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\r\\n     * @param memView   The view\\r\\n     * @return          ret - The view pointing to the new memory\\r\\n     */\\r\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\r\\n        uint256 ptr;\\r\\n        uint256 _len = len(memView);\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            ptr := mload(0x40) // load unused memory pointer\\r\\n            ret := ptr\\r\\n        }\\r\\n        unsafeCopyTo(memView, ptr + 0x20);\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\r\\n            mstore(ptr, _len) // write len of new array (in bytes)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\r\\n     * @dev             Super Dangerous direct memory access.\\r\\n     *\\r\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\r\\n     *                  As such it MUST be consumed IMMEDIATELY.\\r\\n     *                  This function is private to prevent unsafe usage by callers.\\r\\n     * @param memViews  The views\\r\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\r\\n     */\\r\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            let ptr := mload(0x40)\\r\\n            // revert if we're writing in occupied memory\\r\\n            if gt(ptr, _location) {\\r\\n                revert(0x60, 0x20) // empty revert message\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 _offset = 0;\\r\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\r\\n            bytes29 memView = memViews[i];\\r\\n            unsafeCopyTo(memView, _location + _offset);\\r\\n            _offset += len(memView);\\r\\n        }\\r\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\r\\n     * @param memViews  The views\\r\\n     * @return          bytes32 - The keccak256 digest\\r\\n     */\\r\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\r\\n        uint256 ptr;\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            ptr := mload(0x40) // load unused memory pointer\\r\\n        }\\r\\n        return keccak(unsafeJoin(memViews, ptr));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\r\\n     * @param memViews  The views\\r\\n     * @return          bytes32 - The sha256 digest\\r\\n     */\\r\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\r\\n        uint256 ptr;\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            ptr := mload(0x40) // load unused memory pointer\\r\\n        }\\r\\n        return sha2(unsafeJoin(memViews, ptr));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          copies all views, joins them into a new bytearray.\\r\\n     * @param memViews  The views\\r\\n     * @return          ret - The new byte array\\r\\n     */\\r\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\r\\n        uint256 ptr;\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            ptr := mload(0x40) // load unused memory pointer\\r\\n        }\\r\\n\\r\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\r\\n        uint256 _written = len(_newView);\\r\\n        uint256 _footprint = footprint(_newView);\\r\\n\\r\\n        assembly {\\r\\n            // solium-disable-previous-line security/no-inline-assembly\\r\\n            // store the legnth\\r\\n            mstore(ptr, _written)\\r\\n            // new pointer is old + 0x20 + the footprint of the body\\r\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\r\\n            ret := ptr\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x44f9cff1dbf97c3835e9e1f2712268f7a7b328bc662d83feaad7355439a5d94d\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ Internal Imports ============\\r\\nimport {XAppConnectionClient} from \\\"./XAppConnectionClient.sol\\\";\\r\\n// ============ External Imports ============\\r\\nimport {IMessageRecipient} from \\\"../../nomad-core/interfaces/IMessageRecipient.sol\\\";\\r\\n\\r\\nabstract contract Router is XAppConnectionClient, IMessageRecipient {\\r\\n    // ============ Mutable Storage ============\\r\\n\\r\\n    mapping(uint32 => bytes32) public remotes;\\r\\n    uint256[49] private __GAP; // gap for upgrade safety\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    /**\\r\\n     * @notice Only accept messages from a remote Router contract\\r\\n     * @param _origin The domain the message is coming from\\r\\n     * @param _router The address the message is coming from\\r\\n     */\\r\\n    modifier onlyRemoteRouter(uint32 _origin, bytes32 _router) {\\r\\n        require(_isRemoteRouter(_origin, _router), \\\"!remote router\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ External functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Register the address of a Router contract for the same xApp on a remote chain\\r\\n     * @param _domain The domain of the remote xApp Router\\r\\n     * @param _router The address of the remote xApp Router\\r\\n     */\\r\\n    function enrollRemoteRouter(uint32 _domain, bytes32 _router)\\r\\n        external\\r\\n    {\\r\\n        remotes[_domain] = _router;\\r\\n    }\\r\\n\\r\\n    // ============ Virtual functions ============\\r\\n\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        uint32 _nonce,\\r\\n        bytes32 _sender,\\r\\n        bytes memory _message\\r\\n    ) external virtual override;\\r\\n\\r\\n    // ============ Internal functions ============\\r\\n    /**\\r\\n     * @notice Return true if the given domain / router is the address of a remote xApp Router\\r\\n     * @param _domain The domain of the potential remote xApp Router\\r\\n     * @param _router The address of the potential remote xApp Router\\r\\n     */\\r\\n    function _isRemoteRouter(uint32 _domain, bytes32 _router)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return remotes[_domain] == _router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Assert that the given domain has a xApp Router registered and return its address\\r\\n     * @param _domain The domain of the chain for which to get the xApp Router\\r\\n     * @return _remote The address of the remote xApp Router on _domain\\r\\n     */\\r\\n    function _mustHaveRemote(uint32 _domain)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32 _remote)\\r\\n    {\\r\\n        _remote = remotes[_domain];\\r\\n        require(_remote != bytes32(0), \\\"!remote\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xce5a3871284335181baeac8dcc9d7d26382687fb5e4d12639e0376568700530e\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/XAppConnectionClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ External Imports ============\\r\\n// import {Home} from \\\"../../../../nomad-core-sol/contracts/Home.sol\\\";\\r\\nimport {Home} from \\\"../../nomad-core/contracts/Home.sol\\\";\\r\\nimport {XAppConnectionManager} from \\\"../../nomad-core/contracts/XAppConnectionManager.sol\\\";\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract XAppConnectionClient is OwnableUpgradeable {\\r\\n    // ============ Mutable Storage ============\\r\\n\\r\\n    XAppConnectionManager public xAppConnectionManager;\\r\\n    uint256[49] private __GAP; // gap for upgrade safety\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    /**\\r\\n     * @notice Only accept messages from an Nomad Replica contract\\r\\n     */\\r\\n    modifier onlyReplica() {\\r\\n        require(_isReplica(msg.sender), \\\"!replica\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ======== Initializer =========\\r\\n\\r\\n    function __XAppConnectionClient_initialize(address _xAppConnectionManager)\\r\\n        internal\\r\\n        initializer\\r\\n    {\\r\\n        xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);\\r\\n        __Ownable_init();\\r\\n    }\\r\\n\\r\\n    // ============ External functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Modify the contract the xApp uses to validate Replica contracts\\r\\n     * @param _xAppConnectionManager The address of the xAppConnectionManager contract\\r\\n     */\\r\\n    function setXAppConnectionManager(address _xAppConnectionManager)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);\\r\\n    }\\r\\n\\r\\n    // ============ Internal functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Get the local Home contract from the xAppConnectionManager\\r\\n     * @return The local Home contract\\r\\n     */\\r\\n    function _home() internal view returns (Home) {\\r\\n        return xAppConnectionManager.home();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine whether _potentialReplcia is an enrolled Replica from the xAppConnectionManager\\r\\n     * @return True if _potentialReplica is an enrolled Replica\\r\\n     */\\r\\n    function _isReplica(address _potentialReplica)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return xAppConnectionManager.isReplica(_potentialReplica);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the local domain from the xAppConnectionManager\\r\\n     * @return The local domain\\r\\n     */\\r\\n    function _localDomain() internal view virtual returns (uint32) {\\r\\n        return xAppConnectionManager.localDomain();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb64f19f167ab0d925436a22913fee553d81e747a0c9ee16dbe67da0a53d08944\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/bridge/BridgeMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ External Imports ============\\r\\n// import {TypedMemView} from \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\r\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\r\\n\\r\\nlibrary BridgeMessage {\\r\\n    // ============ Libraries ============\\r\\n\\r\\n    using TypedMemView for bytes;\\r\\n    using TypedMemView for bytes29;\\r\\n\\r\\n    // ============ Enums ============\\r\\n\\r\\n    // WARNING: do NOT re-write the numbers / order\\r\\n    // of message types in an upgrade;\\r\\n    // will cause in-flight messages to be mis-interpreted\\r\\n    enum Types {\\r\\n        Invalid, // 0\\r\\n        TokenId, // 1\\r\\n        Message, // 2\\r\\n        Transfer, // 3\\r\\n        FastTransfer // 4\\r\\n    }\\r\\n\\r\\n    // ============ Structs ============\\r\\n\\r\\n    // Tokens are identified by a TokenId:\\r\\n    // domain - 4 byte chain ID of the chain from which the token originates\\r\\n    // id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\r\\n    struct TokenId {\\r\\n        uint32 domain;\\r\\n        bytes32 id;\\r\\n    }\\r\\n\\r\\n    // ============ Constants ============\\r\\n\\r\\n    uint256 private constant TOKEN_ID_LEN = 36; // 4 bytes domain + 32 bytes id\\r\\n    uint256 private constant IDENTIFIER_LEN = 1;\\r\\n    uint256 private constant TRANSFER_LEN = 161;\\r\\n    // uint256 private constant TRANSFER_LEN = 97;\\r\\n    // 1 byte identifier + 32 bytes recipient + 32 bytes amount + 32 bytes detailsHash + 32 bytes externalId + 32 bytes external hash\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    /**\\r\\n     * @notice Asserts a message is of type `_t`\\r\\n     * @param _view The message\\r\\n     * @param _t The expected type\\r\\n     */\\r\\n    modifier typeAssert(bytes29 _view, Types _t) {\\r\\n        _view.assertType(uint40(_t));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Internal Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Checks that Action is valid type\\r\\n     * @param _action The action\\r\\n     * @return TRUE if action is valid\\r\\n     */\\r\\n    function isValidAction(bytes29 _action) internal pure returns (bool) {\\r\\n        return isTransfer(_action) || isFastTransfer(_action);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks that view is a valid message length\\r\\n     * @param _view The bytes string\\r\\n     * @return TRUE if message is valid\\r\\n     */\\r\\n    function isValidMessageLength(bytes29 _view) internal pure returns (bool) {\\r\\n        uint256 _len = _view.len();\\r\\n        return _len == TOKEN_ID_LEN + TRANSFER_LEN;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Formats an action message\\r\\n     * @param _tokenId The token ID\\r\\n     * @param _action The action\\r\\n     * @return The formatted message\\r\\n     */\\r\\n    function formatMessage(bytes29 _tokenId, bytes29 _action)\\r\\n        internal\\r\\n        view\\r\\n        typeAssert(_tokenId, Types.TokenId)\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        require(isValidAction(_action), \\\"!action\\\");\\r\\n        bytes29[] memory _views = new bytes29[](2);\\r\\n        _views[0] = _tokenId;\\r\\n        _views[1] = _action;\\r\\n        return TypedMemView.join(_views);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the type of the message\\r\\n     * @param _view The message\\r\\n     * @return The type of the message\\r\\n     */\\r\\n    function messageType(bytes29 _view) internal pure returns (Types) {\\r\\n        return Types(uint8(_view.typeOf()));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks that the message is of the specified type\\r\\n     * @param _type the type to check for\\r\\n     * @param _action The message\\r\\n     * @return True if the message is of the specified type\\r\\n     */\\r\\n    function isType(bytes29 _action, Types _type) internal pure returns (bool) {\\r\\n        return\\r\\n            actionType(_action) == uint8(_type) &&\\r\\n            messageType(_action) == _type;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks that the message is of type Transfer\\r\\n     * @param _action The message\\r\\n     * @return True if the message is of type Transfer\\r\\n     */\\r\\n    function isTransfer(bytes29 _action) internal pure returns (bool) {\\r\\n        return isType(_action, Types.Transfer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks that the message is of type FastTransfer\\r\\n     * @param _action The message\\r\\n     * @return True if the message is of type FastTransfer\\r\\n     */\\r\\n    function isFastTransfer(bytes29 _action) internal pure returns (bool) {\\r\\n        return isType(_action, Types.FastTransfer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Formats Transfer\\r\\n     * @param _to The recipient address as bytes32\\r\\n     * @param _amnt The transfer amount\\r\\n     * @param _enableFast True to format FastTransfer, False to format regular Transfer\\r\\n     * @return\\r\\n     */\\r\\n    function formatTransfer(\\r\\n        bytes32 _to,\\r\\n        uint256 _amnt,\\r\\n        bytes32 _detailsHash,\\r\\n        bool _enableFast,\\r\\n        bytes32 _externalId,\\r\\n        bytes32 _externalHash\\r\\n    ) internal pure returns (bytes29) {\\r\\n        Types _type = _enableFast ? Types.FastTransfer : Types.Transfer;\\r\\n        return\\r\\n            abi.encodePacked(_type, _to, _amnt, _detailsHash, _externalId, _externalHash).ref(0).castTo(\\r\\n                uint40(_type)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Serializes a Token ID struct\\r\\n     * @param _tokenId The token id struct\\r\\n     * @return The formatted Token ID\\r\\n     */\\r\\n    function formatTokenId(TokenId memory _tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes29)\\r\\n    {\\r\\n        return formatTokenId(_tokenId.domain, _tokenId.id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a serialized Token ID from components\\r\\n     * @param _domain The domain\\r\\n     * @param _id The ID\\r\\n     * @return The formatted Token ID\\r\\n     */\\r\\n    function formatTokenId(uint32 _domain, bytes32 _id)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes29)\\r\\n    {\\r\\n        return abi.encodePacked(_domain, _id).ref(0).castTo(uint40(Types.TokenId));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Formats the keccak256 hash of the token details\\r\\n     * Token Details Format:\\r\\n     *      length of name cast to bytes - 32 bytes\\r\\n     *      name - x bytes (variable)\\r\\n     *      length of symbol cast to bytes - 32 bytes\\r\\n     *      symbol - x bytes (variable)\\r\\n     *      decimals - 1 byte\\r\\n     * @param _name The name\\r\\n     * @param _symbol The symbol\\r\\n     * @param _decimals The decimals\\r\\n     * @return The Details message\\r\\n     */\\r\\n    function getDetailsHash(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimals\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    bytes(_name).length,\\r\\n                    _name,\\r\\n                    bytes(_symbol).length,\\r\\n                    _symbol,\\r\\n                    _decimals\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get the preFillId used to identify\\r\\n     * fast liquidity provision for incoming token send messages\\r\\n     * @dev used to identify a token/transfer pair in the prefill LP mapping.\\r\\n     * @param _origin The domain of the chain from which the transfer originated\\r\\n     * @param _nonce The unique identifier for the message from origin to destination\\r\\n     * @param _tokenId The token ID\\r\\n     * @param _action The action\\r\\n     */\\r\\n    function getPreFillId(\\r\\n        uint32 _origin,\\r\\n        uint32 _nonce,\\r\\n        bytes29 _tokenId,\\r\\n        bytes29 _action\\r\\n    ) internal view returns (bytes32) {\\r\\n        bytes29[] memory _views = new bytes29[](3);\\r\\n        _views[0] = abi.encodePacked(_origin, _nonce).ref(0);\\r\\n        _views[1] = _tokenId;\\r\\n        _views[2] = _action;\\r\\n        return TypedMemView.joinKeccak(_views);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the domain from a TokenID\\r\\n     * @param _tokenId The message\\r\\n     * @return The domain\\r\\n     */\\r\\n    function domain(bytes29 _tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        typeAssert(_tokenId, Types.TokenId)\\r\\n        returns (uint32)\\r\\n    {\\r\\n        return uint32(_tokenId.indexUint(0, 4));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the ID from a TokenID\\r\\n     * @param _tokenId The message\\r\\n     * @return The ID\\r\\n     */\\r\\n    function id(bytes29 _tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        typeAssert(_tokenId, Types.TokenId)\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        // before = 4 bytes domain\\r\\n        return _tokenId.index(4, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the EVM ID\\r\\n     * @param _tokenId The message\\r\\n     * @return The EVM ID\\r\\n     */\\r\\n    function evmId(bytes29 _tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        typeAssert(_tokenId, Types.TokenId)\\r\\n        returns (address)\\r\\n    {\\r\\n        // before = 4 bytes domain + 12 bytes empty to trim for address\\r\\n        return _tokenId.indexAddress(16);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the action identifier from message\\r\\n     * @param _message The action\\r\\n     * @return The message type\\r\\n     */\\r\\n    function msgType(bytes29 _message) internal pure returns (uint8) {\\r\\n        return uint8(_message.indexUint(TOKEN_ID_LEN, 1));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the identifier from action\\r\\n     * @param _action The action\\r\\n     * @return The action type\\r\\n     */\\r\\n    function actionType(bytes29 _action) internal pure returns (uint8) {\\r\\n        return uint8(_action.indexUint(0, 1));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the recipient from a Transfer\\r\\n     * @param _transferAction The message\\r\\n     * @return The recipient address as bytes32\\r\\n     */\\r\\n    function recipient(bytes29 _transferAction)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        // before = 1 byte identifier\\r\\n        return _transferAction.index(1, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the EVM Recipient from a Transfer\\r\\n     * @param _transferAction The message\\r\\n     * @return The EVM Recipient\\r\\n     */\\r\\n    function evmRecipient(bytes29 _transferAction)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        // before = 1 byte identifier + 12 bytes empty to trim for address = 13 bytes\\r\\n        return _transferAction.indexAddress(13);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the amount from a Transfer\\r\\n     * @param _transferAction The message\\r\\n     * @return The amount\\r\\n     */\\r\\n    function amnt(bytes29 _transferAction) internal pure returns (uint256) {\\r\\n        // before = 1 byte identifier + 32 bytes ID = 33 bytes\\r\\n        return _transferAction.indexUint(33, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the external call hash from a Transfer\\r\\n     * @param _transferAction The message\\r\\n     * @return The amount\\r\\n     */\\r\\n    function externalCallHash(bytes29 _transferAction) internal pure returns (bytes32) {\\r\\n        // before = 1 byte identifier + 32 bytes ID + 32 bytes amount + 32 bytes detailsHash + 32 bytes external id = 129 bytes\\r\\n        return _transferAction.index(129, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the external identifier from a Transfer\\r\\n     * @param _transferAction The message\\r\\n     * @return The amount\\r\\n     */\\r\\n    function externalId(bytes29 _transferAction) internal pure returns (bytes32) {\\r\\n        // before = 1 byte identifier + 32 bytes ID + 32 bytes amount + 32 bytes detailsHash = 97 bytes\\r\\n        return _transferAction.index(97, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the detailsHash from a Transfer\\r\\n     * @param _transferAction The message\\r\\n     * @return The detailsHash\\r\\n     */\\r\\n    function detailsHash(bytes29 _transferAction)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        // before = 1 byte identifier + 32 bytes ID + 32 bytes amount = 65 bytes\\r\\n        return _transferAction.index(65, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the token ID from a Message\\r\\n     * @param _message The message\\r\\n     * @return The ID\\r\\n     */\\r\\n    function tokenId(bytes29 _message)\\r\\n        internal\\r\\n        pure\\r\\n        typeAssert(_message, Types.Message)\\r\\n        returns (bytes29)\\r\\n    {\\r\\n        return _message.slice(0, TOKEN_ID_LEN, uint40(Types.TokenId));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the action data from a Message\\r\\n     * @param _message The message\\r\\n     * @return The action\\r\\n     */\\r\\n    function action(bytes29 _message)\\r\\n        internal\\r\\n        pure\\r\\n        typeAssert(_message, Types.Message)\\r\\n        returns (bytes29)\\r\\n    {\\r\\n        uint256 _actionLen = _message.len() - TOKEN_ID_LEN;\\r\\n        uint40 _type = uint40(msgType(_message));\\r\\n        return _message.slice(TOKEN_ID_LEN, _actionLen, _type);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Converts to a Message\\r\\n     * @param _message The message\\r\\n     * @return The newly typed message\\r\\n     */\\r\\n    function tryAsMessage(bytes29 _message) internal pure returns (bytes29) {\\r\\n        if (isValidMessageLength(_message)) {\\r\\n            return _message.castTo(uint40(Types.Message));\\r\\n        }\\r\\n        return TypedMemView.nullView();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Asserts that the message is of type Message\\r\\n     * @param _view The message\\r\\n     * @return The message\\r\\n     */\\r\\n    function mustBeMessage(bytes29 _view) internal pure returns (bytes29) {\\r\\n        return tryAsMessage(_view).assertValid();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1bc97fa6f50e0cbbf4a039dbc7165a525d807c1b4ab582d926f0f4fbac0294b2\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/bridge/BridgeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ Internal Imports ============\\r\\nimport {ITokenRegistry} from \\\"../../interfaces/bridge/ITokenRegistry.sol\\\";\\r\\nimport {ITransactionManager} from \\\"../../interfaces/bridge/ITransactionManager.sol\\\";\\r\\nimport {Router} from \\\"../Router.sol\\\";\\r\\nimport {XAppConnectionClient} from \\\"../XAppConnectionClient.sol\\\";\\r\\nimport {BridgeMessage} from \\\"./BridgeMessage.sol\\\";\\r\\nimport {IBridgeToken} from \\\"../../interfaces/bridge/IBridgeToken.sol\\\";\\r\\n// ============ External Imports ============\\r\\nimport {Home} from \\\"../../../nomad-core/contracts/Home.sol\\\";\\r\\nimport {Version0} from \\\"../../../nomad-core/contracts/Version0.sol\\\";\\r\\n// import {TypedMemView} from \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\r\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BridgeRouter\\r\\n */\\r\\ncontract BridgeRouter is Version0, Router {\\r\\n    // ============ Libraries ============\\r\\n\\r\\n    using TypedMemView for bytes;\\r\\n    using TypedMemView for bytes29;\\r\\n    using BridgeMessage for bytes29;\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    // ============ Constants ============\\r\\n\\r\\n    // 5 bps (0.05%) hardcoded fast liquidity fee. Can be changed by contract upgrade\\r\\n    uint256 public constant PRE_FILL_FEE_NUMERATOR = 9995;\\r\\n    uint256 public constant PRE_FILL_FEE_DENOMINATOR = 10000;\\r\\n    uint256 public constant DUST_AMOUNT = 0.06 ether;\\r\\n\\r\\n    // ============ Public Storage ============\\r\\n\\r\\n    // contract that manages registry representation tokens\\r\\n    ITokenRegistry public tokenRegistry;\\r\\n    // token transfer prefill ID => LP that pre-filled message to provide fast liquidity\\r\\n    mapping(bytes32 => address) public liquidityProvider;\\r\\n\\r\\n    ITransactionManager public transactionManager;\\r\\n\\r\\n    // ============ Upgrade Gap ============\\r\\n\\r\\n    // gap for upgrade safety\\r\\n    uint256[49] private __GAP;\\r\\n\\r\\n    // ======== Events =========\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when tokens are sent from this domain to another domain\\r\\n     * @param token the address of the token contract\\r\\n     * @param from the address sending tokens\\r\\n     * @param toDomain the domain of the chain the tokens are being sent to\\r\\n     * @param toId the bytes32 address of the recipient of the tokens\\r\\n     * @param amount the amount of tokens sent\\r\\n     * @param fastLiquidityEnabled True if fast liquidity is enabled, False otherwise\\r\\n     */\\r\\n    event Send(\\r\\n        address indexed token,\\r\\n        address indexed from,\\r\\n        uint32 indexed toDomain,\\r\\n        bytes32 toId,\\r\\n        uint256 amount,\\r\\n        bool fastLiquidityEnabled,\\r\\n        bytes32 externalHash,\\r\\n        bytes message\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when tokens are dispensed to an account on this domain\\r\\n     * emitted both when fast liquidity is provided, and when the transfer ultimately settles\\r\\n     * @param originAndNonce Domain where the transfer originated and the unique identifier\\r\\n     * for the message from origin to destination, combined in a single field ((origin << 32) & nonce)\\r\\n     * @param token The address of the local token contract being received\\r\\n     * @param recipient The address receiving the tokens; the original recipient of the transfer\\r\\n     * @param liquidityProvider The account providing liquidity\\r\\n     * @param amount The amount of tokens being received\\r\\n     */\\r\\n    event Receive(\\r\\n        uint64 indexed originAndNonce,\\r\\n        address indexed token,\\r\\n        address indexed recipient,\\r\\n        address liquidityProvider,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    // ======== Receive =======\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    // ======== Initializer ========\\r\\n\\r\\n    function initialize(address _tokenRegistry, address _xAppConnectionManager)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        tokenRegistry = ITokenRegistry(_tokenRegistry);\\r\\n        __XAppConnectionClient_initialize(_xAppConnectionManager);\\r\\n    }\\r\\n\\r\\n    // ======== External: Handle =========\\r\\n\\r\\n    /**\\r\\n     * @notice Handles an incoming message\\r\\n     * @param _origin The origin domain\\r\\n     * @param _nonce The unique identifier for the message from origin to destination\\r\\n     * @param _sender The sender address\\r\\n     * @param _message The message\\r\\n     */\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        uint32 _nonce,\\r\\n        bytes32 _sender,\\r\\n        bytes memory _message\\r\\n    ) external override onlyReplica onlyRemoteRouter(_origin, _sender) {\\r\\n        // parse tokenId and action from message\\r\\n        bytes29 _msg = _message.ref(0).mustBeMessage();\\r\\n        bytes29 _tokenId = _msg.tokenId();\\r\\n        bytes29 _action = _msg.action();\\r\\n        // handle message based on the intended action\\r\\n        if (_action.isTransfer()) {\\r\\n            _handleTransfer(_origin, _nonce, _tokenId, _action, false);\\r\\n        } else if (_action.isFastTransfer()) {\\r\\n            _handleTransfer(_origin, _nonce, _tokenId, _action, true);\\r\\n        } else {\\r\\n            require(false, \\\"!valid action\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ======== External: Send Token =========\\r\\n\\r\\n    /**\\r\\n     * @notice Send tokens to a recipient on a remote chain\\r\\n     * @param _token The token address\\r\\n     * @param _amount The token amount\\r\\n     * @param _destination The destination domain\\r\\n     * @param _recipient The recipient address\\r\\n     * @param _enableFast True to enable fast liquidity\\r\\n     */\\r\\n    function send(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint32 _destination,\\r\\n        bytes32 _recipient,\\r\\n        bool _enableFast,\\r\\n        bytes32 _externalId,\\r\\n        bytes32 _externalHash\\r\\n    ) external {\\r\\n        require(_amount > 0, \\\"!amnt\\\");\\r\\n        require(_recipient != bytes32(0), \\\"!recip\\\");\\r\\n        // get remote BridgeRouter address; revert if not found\\r\\n        bytes32 _remote = _mustHaveRemote(_destination);\\r\\n        // Setup vars used in both if branches\\r\\n        IBridgeToken _t = IBridgeToken(_token);\\r\\n        bytes32 _detailsHash;\\r\\n        // remove tokens from circulation on this chain\\r\\n        if (tokenRegistry.isLocalOrigin(_token)) {\\r\\n            // if the token originates on this chain,\\r\\n            // hold the tokens in escrow in the Router\\r\\n            IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            // query token contract for details and calculate detailsHash\\r\\n            _detailsHash = BridgeMessage.getDetailsHash(\\r\\n                _t.name(),\\r\\n                _t.symbol(),\\r\\n                _t.decimals()\\r\\n            );\\r\\n        } else {\\r\\n            // if the token originates on a remote chain,\\r\\n            // burn the representation tokens on this chain\\r\\n            _t.burn(msg.sender, _amount);\\r\\n            _detailsHash = _t.detailsHash();\\r\\n        }\\r\\n        // format Transfer Tokens action\\r\\n        bytes29 _action = BridgeMessage.formatTransfer(\\r\\n            _recipient,\\r\\n            _amount,\\r\\n            _detailsHash,\\r\\n            _enableFast,\\r\\n            _externalId,\\r\\n            _externalHash\\r\\n        );\\r\\n        bytes29 _tokenId = dispatchAction(_action, _token, _destination, _remote);\\r\\n        // emit Send event to record token sender\\r\\n        emit Send(\\r\\n            _token,\\r\\n            msg.sender,\\r\\n            _destination,\\r\\n            _recipient,\\r\\n            _amount,\\r\\n            _enableFast,\\r\\n            _externalHash,\\r\\n            BridgeMessage.formatMessage(_tokenId, _action)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function dispatchAction(\\r\\n        bytes29 _action,\\r\\n        address _token,\\r\\n        uint32 _destination,\\r\\n        bytes32 _remote\\r\\n    ) internal returns (bytes29) {\\r\\n        // get the tokenID\\r\\n        (uint32 _domain, bytes32 _id) = tokenRegistry.getTokenId(_token);\\r\\n        bytes29 _tokenId = BridgeMessage.formatTokenId(_domain, _id);\\r\\n        // send message to remote chain via Nomad\\r\\n        Home(xAppConnectionManager.home()).dispatch(\\r\\n            _destination,\\r\\n            _remote,\\r\\n            BridgeMessage.formatMessage(_tokenId, _action)\\r\\n        );\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    // ======== External: Fast Liquidity =========\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the transaction manager.\\r\\n     * @dev Transacion manager and bridge router store references to each other\\r\\n     * @param _transactionManager the address of the transaction manager implementation\\r\\n     */\\r\\n    function setTransactionManager(\\r\\n        address _transactionManager\\r\\n    ) external onlyOwner {\\r\\n        transactionManager = ITransactionManager(_transactionManager);\\r\\n    }\\r\\n\\r\\n    // ======== External: Custom Tokens =========\\r\\n\\r\\n    /**\\r\\n     * @notice Enroll a custom token. This allows projects to work with\\r\\n     * governance to specify a custom representation.\\r\\n     * @param _domain the domain of the canonical Token to enroll\\r\\n     * @param _id the bytes32 ID of the canonical of the Token to enroll\\r\\n     * @param _custom the address of the custom implementation to use.\\r\\n     */\\r\\n    function enrollCustom(\\r\\n        uint32 _domain,\\r\\n        bytes32 _id,\\r\\n        address _custom\\r\\n    ) external onlyOwner {\\r\\n        // Sanity check. Ensures that human error doesn't cause an\\r\\n        // unpermissioned contract to be enrolled.\\r\\n        IBridgeToken(_custom).mint(address(this), 1);\\r\\n        IBridgeToken(_custom).burn(address(this), 1);\\r\\n        tokenRegistry.enrollCustom(_domain, _id, _custom);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Migrate all tokens in a previous representation to the latest\\r\\n     * custom representation. This works by looking up local mappings and then\\r\\n     * burning old tokens and minting new tokens.\\r\\n     * @dev This is explicitly opt-in to allow dapps to decide when and how to\\r\\n     * upgrade to the new representation.\\r\\n     * @param _oldRepr The address of the old token to migrate\\r\\n     */\\r\\n    function migrate(address _oldRepr) external {\\r\\n        address _currentRepr = tokenRegistry.oldReprToCurrentRepr(_oldRepr);\\r\\n        require(_currentRepr != _oldRepr, \\\"!different\\\");\\r\\n        // burn the total balance of old tokens & mint the new ones\\r\\n        IBridgeToken _old = IBridgeToken(_oldRepr);\\r\\n        uint256 _bal = _old.balanceOf(msg.sender);\\r\\n        _old.burn(msg.sender, _bal);\\r\\n        IBridgeToken(_currentRepr).mint(msg.sender, _bal);\\r\\n    }\\r\\n\\r\\n    // ============ Internal: Handle ============\\r\\n\\r\\n    /**\\r\\n     * @notice Handles an incoming Transfer message.\\r\\n     *\\r\\n     * If the token is of local origin, the amount is sent from escrow.\\r\\n     * Otherwise, a representation token is minted.\\r\\n     *\\r\\n     * @param _origin The domain of the chain from which the transfer originated\\r\\n     * @param _nonce The unique identifier for the message from origin to destination\\r\\n     * @param _tokenId The token ID\\r\\n     * @param _action The action\\r\\n     * @param _fastEnabled True if fast liquidity was enabled, False otherwise\\r\\n     */\\r\\n    function _handleTransfer(\\r\\n        uint32 _origin,\\r\\n        uint32 _nonce,\\r\\n        bytes29 _tokenId,\\r\\n        bytes29 _action,\\r\\n        bool _fastEnabled\\r\\n    ) internal {\\r\\n        // get the token contract for the given tokenId on this chain;\\r\\n        // (if the token is of remote origin and there is\\r\\n        // no existing representation token contract, the TokenRegistry will\\r\\n        // deploy a new one)\\r\\n        address _token = tokenRegistry.ensureLocalToken(\\r\\n            _tokenId.domain(),\\r\\n            _tokenId.id()\\r\\n        );\\r\\n        // load the original recipient of the tokens\\r\\n        address _recipient = _action.evmRecipient();\\r\\n        // load amount once\\r\\n        uint256 _amount = _action.amnt();\\r\\n        bytes32 _details = _action.detailsHash();\\r\\n        if (_fastEnabled) {\\r\\n            // Mint more of token if needed\\r\\n            _handleFundsDisbursal(address(transactionManager), _token, _amount, _details);\\r\\n\\r\\n            // Call reconcile\\r\\n            transactionManager.reconcile(\\r\\n                _action.externalId(),\\r\\n                _token,\\r\\n                _recipient,\\r\\n                _amount,\\r\\n                _action.externalCallHash()\\r\\n            );\\r\\n        } else {\\r\\n            _handleFundsDisbursal(_recipient, _token, _amount, _details);\\r\\n\\r\\n            // dust the recipient if appropriate\\r\\n            _dust(_recipient);\\r\\n        }\\r\\n        \\r\\n        // emit Receive event\\r\\n        emit Receive(\\r\\n            _originAndNonce(_origin, _nonce),\\r\\n            _token,\\r\\n            _recipient,\\r\\n            address(0),\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ============ Internal: Fast Liquidity ============\\r\\n\\r\\n    function _handleFundsDisbursal(address _recipient, address _token, uint256 _amount, bytes32 _details) internal {\\r\\n        if (tokenRegistry.isLocalOrigin(_token)) {\\r\\n            // if the token is of local origin, the tokens have been held in\\r\\n            // escrow in this contract\\r\\n            // while they have been circulating on remote chains;\\r\\n            // transfer the tokens to the recipient\\r\\n            IERC20Upgradeable(_token).safeTransfer(_recipient, _amount);\\r\\n        } else {\\r\\n            // if the token is of remote origin, mint the tokens to the\\r\\n            // recipient on this chain\\r\\n            IBridgeToken(_token).mint(_recipient, _amount);\\r\\n            // Tell the token what its detailsHash is\\r\\n            IBridgeToken(_token).setDetailsHash(_details);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the token amount after\\r\\n     * taking a 5 bps (0.05%) liquidity provider fee\\r\\n     * @param _amnt The token amount before the fee is taken\\r\\n     * @return _amtAfterFee The token amount after the fee is taken\\r\\n     */\\r\\n    function _applyPreFillFee(uint256 _amnt)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 _amtAfterFee)\\r\\n    {\\r\\n        // overflow only possible if (2**256 / 9995) tokens sent once\\r\\n        // in which case, probably not a real token\\r\\n        _amtAfterFee =\\r\\n            (_amnt * PRE_FILL_FEE_NUMERATOR) /\\r\\n            PRE_FILL_FEE_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Dust the recipient. This feature allows chain operators to use\\r\\n     * the Bridge as a faucet if so desired. Any gas asset held by the\\r\\n     * bridge will be slowly sent to users who need initial gas bootstrapping\\r\\n     * @dev Does not dust if insufficient funds, or if user has funds already\\r\\n     */\\r\\n    function _dust(address _recipient) internal {\\r\\n        if (\\r\\n            _recipient.balance < DUST_AMOUNT &&\\r\\n            address(this).balance >= DUST_AMOUNT\\r\\n        ) {\\r\\n            // `send` gives execution 2300 gas and returns a `success` boolean.\\r\\n            // however, we do not care if the call fails. A failed call\\r\\n            // indicates a smart contract attempting to execute logic, which we\\r\\n            // specifically do not want.\\r\\n            // While we could check EXTCODESIZE, it seems sufficient to rely on\\r\\n            // the 2300 gas stipend to ensure that no state change logic can\\r\\n            // be executed.\\r\\n            payable(_recipient).send(DUST_AMOUNT);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev explicit override for compiler inheritance\\r\\n     * @dev explicit override for compiler inheritance\\r\\n     * @return domain of chain on which the contract is deployed\\r\\n     */\\r\\n    function _localDomain()\\r\\n        internal\\r\\n        view\\r\\n        override(XAppConnectionClient)\\r\\n        returns (uint32)\\r\\n    {\\r\\n        return XAppConnectionClient._localDomain();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal utility function that combines\\r\\n     * `_origin` and `_nonce`.\\r\\n     * @dev Both origin and nonce should be less than 2^32 - 1\\r\\n     * @param _origin Domain of chain where the transfer originated\\r\\n     * @param _nonce The unique identifier for the message from origin to destination\\r\\n     * @return Returns (`_origin` << 32) & `_nonce`\\r\\n     */\\r\\n    function _originAndNonce(uint32 _origin, uint32 _nonce)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint64)\\r\\n    {\\r\\n        return (uint64(_origin) << 32) | _nonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1cf1bab5a9c40950fcdd451ed961ad3a119ff8966038b759c1296bc5cb6f5332\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/bridge/Encoding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\nlibrary Encoding {\\r\\n    // ============ Constants ============\\r\\n\\r\\n    bytes private constant NIBBLE_LOOKUP = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    // ============ Internal Functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice Encode a uint32 in its DECIMAL representation, with leading\\r\\n     * zeroes.\\r\\n     * @param _num The number to encode\\r\\n     * @return _encoded The encoded number, suitable for use in abi.\\r\\n     * encodePacked\\r\\n     */\\r\\n    function decimalUint32(uint32 _num)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint80 _encoded)\\r\\n    {\\r\\n        uint80 ASCII_0 = 0x30;\\r\\n        // all over/underflows are impossible\\r\\n        // this will ALWAYS produce 10 decimal characters\\r\\n        for (uint8 i = 0; i < 10; i += 1) {\\r\\n            _encoded |= ((_num % 10) + ASCII_0) << (i * 8);\\r\\n            _num = _num / 10;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\r\\n     * `second` contains the encoded lower 16 bytes.\\r\\n     * @param _bytes The 32 bytes as uint256\\r\\n     * @return _firstHalf The top 16 bytes\\r\\n     * @return _secondHalf The bottom 16 bytes\\r\\n     */\\r\\n    function encodeHex(uint256 _bytes)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 _firstHalf, uint256 _secondHalf)\\r\\n    {\\r\\n        for (uint8 i = 31; i > 15; i -= 1) {\\r\\n            uint8 _b = uint8(_bytes >> (i * 8));\\r\\n            _firstHalf |= _byteHex(_b);\\r\\n            if (i != 16) {\\r\\n                _firstHalf <<= 16;\\r\\n            }\\r\\n        }\\r\\n        // abusing underflow here =_=\\r\\n        unchecked {\\r\\n            for (uint8 i = 15; i < 255; i -= 1) {\\r\\n                uint8 _b = uint8(_bytes >> (i * 8));\\r\\n                _secondHalf |= _byteHex(_b);\\r\\n                if (i != 0) {\\r\\n                    _secondHalf <<= 16;\\r\\n                }\\r\\n            }   \\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\\r\\n     * @param _byte The byte\\r\\n     * @return _char The encoded hex character\\r\\n     */\\r\\n    function _nibbleHex(uint8 _byte) private pure returns (uint8 _char) {\\r\\n        uint8 _nibble = _byte & 0x0f; // keep bottom 4, 0 top 4\\r\\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a uint16 containing the hex-encoded byte.\\r\\n     * @param _byte The byte\\r\\n     * @return _encoded The hex-encoded byte\\r\\n     */\\r\\n    function _byteHex(uint8 _byte) private pure returns (uint16 _encoded) {\\r\\n        _encoded |= _nibbleHex(_byte >> 4); // top 4 bits\\r\\n        _encoded <<= 8;\\r\\n        _encoded |= _nibbleHex(_byte); // lower 4 bits\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x81031fa86da6fde300bb5a84e435a8cc0a80e6775d88f388bb70506f2948e64c\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/bridge/TokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ Nomad Contracts ============\\r\\nimport {BridgeMessage} from \\\"./BridgeMessage.sol\\\";\\r\\nimport {XAppConnectionClient} from \\\"../XAppConnectionClient.sol\\\";\\r\\nimport {Encoding} from \\\"./Encoding.sol\\\";\\r\\nimport {TypeCasts} from \\\"../../../nomad-core/contracts/XAppConnectionManager.sol\\\";\\r\\nimport {UpgradeBeaconProxy} from \\\"../../../nomad-core/contracts/upgrade/UpgradeBeaconProxy.sol\\\";\\r\\n// ============ Interfaces ============\\r\\nimport {ITokenRegistry} from \\\"../../interfaces/bridge/ITokenRegistry.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IBridgeToken} from \\\"../../interfaces/bridge/IBridgeToken.sol\\\";\\r\\n// ============ External Contracts ============\\r\\n// import {TypedMemView} from \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\r\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title TokenRegistry\\r\\n * @notice manages a registry of token contracts on this chain\\r\\n * -\\r\\n * We sort token types as \\\"representation token\\\" or \\\"locally originating token\\\".\\r\\n * Locally originating - a token contract that was originally deployed on the local chain\\r\\n * Representation (repr) - a token that was originally deployed on some other chain\\r\\n * -\\r\\n * When the BridgeRouter handles an incoming message, it determines whether the\\r\\n * transfer is for an asset of local origin. If not, it checks for an existing\\r\\n * representation contract. If no such representation exists, it deploys a new\\r\\n * representation contract. It then stores the relationship in the\\r\\n * \\\"reprToCanonical\\\" and \\\"canonicalToRepr\\\" mappings to ensure we can always\\r\\n * perform a lookup in either direction\\r\\n * Note that locally originating tokens should NEVER be represented in these lookup tables.\\r\\n */\\r\\ncontract TokenRegistry is Initializable, XAppConnectionClient, ITokenRegistry {\\r\\n    // ============ Libraries ============\\r\\n\\r\\n    using TypedMemView for bytes;\\r\\n    using TypedMemView for bytes29;\\r\\n    using BridgeMessage for bytes29;\\r\\n\\r\\n    // ============ Public Storage ============\\r\\n    uint32 private _local;\\r\\n\\r\\n    // UpgradeBeacon from which new token proxies will get their implementation\\r\\n    address public tokenBeacon;\\r\\n    // local representation token address => token ID\\r\\n    mapping(address => BridgeMessage.TokenId) public representationToCanonical;\\r\\n    // hash of the tightly-packed TokenId => local representation token address\\r\\n    // If the token is of local origin, this MUST map to address(0).\\r\\n    mapping(bytes32 => address) public canonicalToRepresentation;\\r\\n\\r\\n    // ============ Upgrade Gap ============\\r\\n\\r\\n    // gap for upgrade safety\\r\\n    uint256[49] private __GAP;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when a representation token contract is deployed\\r\\n     * @param domain the domain of the chain where the canonical asset is deployed\\r\\n     * @param id the bytes32 address of the canonical token contract\\r\\n     * @param representation the address of the newly locally deployed representation contract\\r\\n     */\\r\\n    event TokenDeployed(\\r\\n        uint32 indexed domain,\\r\\n        bytes32 indexed id,\\r\\n        address indexed representation\\r\\n    );\\r\\n\\r\\n    // ======== Initializer =========\\r\\n    function setLocalDomain(uint32 domain) public {\\r\\n        _local = domain;\\r\\n    }\\r\\n\\r\\n    function initialize(address _tokenBeacon, address _xAppConnectionManager)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        tokenBeacon = _tokenBeacon;\\r\\n        __XAppConnectionClient_initialize(_xAppConnectionManager);\\r\\n    }\\r\\n\\r\\n    // ======== TokenId & Address Lookup for Representation Tokens =========\\r\\n\\r\\n    /**\\r\\n     * @notice Look up the canonical token ID for a representation token\\r\\n     * @param _representation the address of the representation contract\\r\\n     * @return _domain the domain of the canonical version.\\r\\n     * @return _id the identifier of the canonical version in its domain.\\r\\n     */\\r\\n    function getCanonicalTokenId(address _representation)\\r\\n        external\\r\\n        view\\r\\n        returns (uint32 _domain, bytes32 _id)\\r\\n    {\\r\\n        BridgeMessage.TokenId memory _canonical = representationToCanonical[\\r\\n            _representation\\r\\n        ];\\r\\n        _domain = _canonical.domain;\\r\\n        _id = _canonical.id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Look up the representation address for a canonical token\\r\\n     * @param _domain the domain of the canonical version.\\r\\n     * @param _id the identifier of the canonical version in its domain.\\r\\n     * @return _representation the address of the representation contract\\r\\n     */\\r\\n    function getRepresentationAddress(uint32 _domain, bytes32 _id)\\r\\n        public\\r\\n        view\\r\\n        returns (address _representation)\\r\\n    {\\r\\n        bytes29 _tokenId = BridgeMessage.formatTokenId(_domain, _id);\\r\\n        bytes32 _idHash = _tokenId.keccak();\\r\\n        _representation = canonicalToRepresentation[_idHash];\\r\\n    }\\r\\n\\r\\n    // ======== External: Deploying Representation Tokens =========\\r\\n\\r\\n    /**\\r\\n     * @notice Get the address of the local token for the provided tokenId;\\r\\n     * if the token is remote and no local representation exists, deploy the representation contract\\r\\n     * @param _domain the token's native domain\\r\\n     * @param _id the token's id on its native domain\\r\\n     * @return _local the address of the local token contract\\r\\n     */\\r\\n    function ensureLocalToken(uint32 _domain, bytes32 _id)\\r\\n        external\\r\\n        override\\r\\n        returns (address _local)\\r\\n    {\\r\\n        _local = getLocalAddress(_domain, _id);\\r\\n        if (_local == address(0)) {\\r\\n            // Representation does not exist yet;\\r\\n            // deploy representation contract\\r\\n            _local = _deployToken(_domain, _id);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ======== External: Enrolling Representation Tokens =========\\r\\n\\r\\n    /**\\r\\n     * @notice Enroll a custom token. This allows projects to work with\\r\\n     * governance to specify a custom representation.\\r\\n     * @dev This is done by inserting the custom representation into the token\\r\\n     * lookup tables. It is permissioned to the owner (governance) and can\\r\\n     * potentially break token representations. It must be used with extreme\\r\\n     * caution.\\r\\n     * After the token is inserted, new mint instructions will be sent to the\\r\\n     * custom token. The default representation (and old custom representations)\\r\\n     * may still be burnt. Until all users have explicitly called migrate, both\\r\\n     * representations will continue to exist.\\r\\n     * The custom representation MUST be trusted, and MUST allow the router to\\r\\n     * both mint AND burn tokens at will.\\r\\n     * @param _domain the domain of the canonical Token to enroll\\r\\n     * @param _id the bytes32 ID pf the canonical of the Token to enroll\\r\\n     * @param _custom the address of the custom implementation to use.\\r\\n     */\\r\\n    function enrollCustom(\\r\\n        uint32 _domain,\\r\\n        bytes32 _id,\\r\\n        address _custom\\r\\n    ) external override {\\r\\n        // update mappings with custom token\\r\\n        _setRepresentationToCanonical(_domain, _id, _custom);\\r\\n        _setCanonicalToRepresentation(_domain, _id, _custom);\\r\\n    }\\r\\n\\r\\n    // ======== Match Old Representation Tokens =========\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current representation contract\\r\\n     * for the same canonical token as the old representation contract\\r\\n     * @dev If _oldRepr is not a representation, this will error.\\r\\n     * @param _oldRepr The address of the old representation token\\r\\n     * @return _currentRepr The address of the current representation token\\r\\n     */\\r\\n    function oldReprToCurrentRepr(address _oldRepr)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address _currentRepr)\\r\\n    {\\r\\n        // get the canonical token ID for the old representation contract\\r\\n        BridgeMessage.TokenId memory _tokenId = representationToCanonical[\\r\\n            _oldRepr\\r\\n        ];\\r\\n        require(_tokenId.domain != 0, \\\"!repr\\\");\\r\\n        // get the current primary representation for the same canonical token ID\\r\\n        _currentRepr = getRepresentationAddress(_tokenId.domain, _tokenId.id);\\r\\n    }\\r\\n\\r\\n    // ======== TokenId & Address Lookup for ALL Local Tokens (Representation AND Canonical) =========\\r\\n\\r\\n    /**\\r\\n     * @notice Return tokenId for a local token address\\r\\n     * @param _local the local address of the token contract (representation or canonical)\\r\\n     * @return _domain canonical domain\\r\\n     * @return _id canonical identifier on that domain\\r\\n     */\\r\\n    function getTokenId(address _local)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint32 _domain, bytes32 _id)\\r\\n    {\\r\\n        BridgeMessage.TokenId memory _tokenId = representationToCanonical[\\r\\n            _local\\r\\n        ];\\r\\n        if (_tokenId.domain == 0) {\\r\\n            _domain = _localDomain();\\r\\n            _id = TypeCasts.addressToBytes32(_local);\\r\\n        } else {\\r\\n            _domain = _tokenId.domain;\\r\\n            _id = _tokenId.id;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Looks up the local address corresponding to a domain/id pair.\\r\\n     * @dev If the token is local, it will return the local address.\\r\\n     * If the token is non-local and no local representation exists, this\\r\\n     * will return `address(0)`.\\r\\n     * @param _domain the domain of the canonical version.\\r\\n     * @param _id the identifier of the canonical version in its domain.\\r\\n     * @return _local the local address of the token contract (representation or canonical)\\r\\n     */\\r\\n    function getLocalAddress(uint32 _domain, address _id)\\r\\n        external\\r\\n        view\\r\\n        returns (address _local)\\r\\n    {\\r\\n        _local = getLocalAddress(_domain, TypeCasts.addressToBytes32(_id));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Looks up the local address corresponding to a domain/id pair.\\r\\n     * @dev If the token is local, it will return the local address.\\r\\n     * If the token is non-local and no local representation exists, this\\r\\n     * will return `address(0)`.\\r\\n     * @param _domain the domain of the canonical version.\\r\\n     * @param _id the identifier of the canonical version in its domain.\\r\\n     * @return _local the local address of the token contract (representation or canonical)\\r\\n     */\\r\\n    function getLocalAddress(uint32 _domain, bytes32 _id)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address _local)\\r\\n    {\\r\\n        if (_domain == _localDomain()) {\\r\\n            // Token is of local origin\\r\\n            _local = TypeCasts.bytes32ToAddress(_id);\\r\\n        } else {\\r\\n            // Token is a representation of a token of remote origin\\r\\n            _local = getRepresentationAddress(_domain, _id);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the local token contract for the\\r\\n     * canonical tokenId; revert if there is no local token\\r\\n     * @param _domain the token's native domain\\r\\n     * @param _id the token's id on its native domain\\r\\n     * @return the local IERC20 token contract\\r\\n     */\\r\\n    function mustHaveLocalToken(uint32 _domain, bytes32 _id)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (IERC20)\\r\\n    {\\r\\n        address _local = getLocalAddress(_domain, _id);\\r\\n        require(_local != address(0), \\\"!token\\\");\\r\\n        return IERC20(_local);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine if token is of local origin\\r\\n     * @return TRUE if token is locally originating\\r\\n     */\\r\\n    function isLocalOrigin(address _token) public view override returns (bool) {\\r\\n        // If the contract WAS deployed by the TokenRegistry,\\r\\n        // it will be stored in this mapping.\\r\\n        // If so, it IS NOT of local origin\\r\\n        if (representationToCanonical[_token].domain != 0) {\\r\\n            return false;\\r\\n        }\\r\\n        // If the contract WAS NOT deployed by the TokenRegistry,\\r\\n        // and the contract exists, then it IS of local origin\\r\\n        // Return true if code exists at _addr\\r\\n        uint256 _codeSize;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _codeSize := extcodesize(_token)\\r\\n        }\\r\\n        return _codeSize != 0;\\r\\n    }\\r\\n\\r\\n    // ======== Internal Functions =========\\r\\n\\r\\n    /**\\r\\n     * @notice Set the primary representation for a given canonical\\r\\n     * @param _domain the domain of the canonical token\\r\\n     * @param _id the bytes32 ID pf the canonical of the token\\r\\n     * @param _representation the address of the representation token\\r\\n     */\\r\\n    function _setRepresentationToCanonical(\\r\\n        uint32 _domain,\\r\\n        bytes32 _id,\\r\\n        address _representation\\r\\n    ) internal {\\r\\n        representationToCanonical[_representation].domain = _domain;\\r\\n        representationToCanonical[_representation].id = _id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the canonical token for a given representation\\r\\n     * @param _domain the domain of the canonical token\\r\\n     * @param _id the bytes32 ID pf the canonical of the token\\r\\n     * @param _representation the address of the representation token\\r\\n     */\\r\\n    function _setCanonicalToRepresentation(\\r\\n        uint32 _domain,\\r\\n        bytes32 _id,\\r\\n        address _representation\\r\\n    ) internal {\\r\\n        bytes29 _tokenId = BridgeMessage.formatTokenId(_domain, _id);\\r\\n        bytes32 _idHash = _tokenId.keccak();\\r\\n        canonicalToRepresentation[_idHash] = _representation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deploy and initialize a new token contract\\r\\n     * @dev Each token contract is a proxy which\\r\\n     * points to the token upgrade beacon\\r\\n     * @return _token the address of the token contract\\r\\n     */\\r\\n    function _deployToken(uint32 _domain, bytes32 _id)\\r\\n        internal\\r\\n        returns (address _token)\\r\\n    {\\r\\n        // deploy and initialize the token contract\\r\\n        _token = address(new UpgradeBeaconProxy(tokenBeacon, \\\"\\\"));\\r\\n        // initialize the token separately from the\\r\\n        IBridgeToken(_token).initialize();\\r\\n        // set the default token name & symbol\\r\\n        (string memory _name, string memory _symbol) = _defaultDetails(\\r\\n            _domain,\\r\\n            _id\\r\\n        );\\r\\n        IBridgeToken(_token).setDetails(_name, _symbol, 18);\\r\\n        // transfer ownership to bridgeRouter\\r\\n        IBridgeToken(_token).transferOwnership(owner());\\r\\n        // store token in mappings\\r\\n        _setCanonicalToRepresentation(_domain, _id, _token);\\r\\n        _setRepresentationToCanonical(_domain, _id, _token);\\r\\n        // emit event upon deploying new token\\r\\n        emit TokenDeployed(_domain, _id, _token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get default name and details for a token\\r\\n     * Sets name to \\\"nomad.[domain].[id]\\\"\\r\\n     * and symbol to\\r\\n     * @param _domain the domain of the canonical token\\r\\n     * @param _id the bytes32 ID pf the canonical of the token\\r\\n     */\\r\\n    function _defaultDetails(uint32 _domain, bytes32 _id)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory _name, string memory _symbol)\\r\\n    {\\r\\n        // get the first and second half of the token ID\\r\\n        (, uint256 _secondHalfId) = Encoding.encodeHex(uint256(_id));\\r\\n        // encode the default token name: \\\"[decimal domain].[hex 4 bytes of ID]\\\"\\r\\n        _name = string(\\r\\n            abi.encodePacked(\\r\\n                Encoding.decimalUint32(_domain), // 10\\r\\n                \\\".\\\", // 1\\r\\n                uint32(_secondHalfId) // 4\\r\\n            )\\r\\n        );\\r\\n        // allocate the memory for a new 32-byte string\\r\\n        _symbol = new string(10 + 1 + 4);\\r\\n        assembly {\\r\\n            mstore(add(_symbol, 0x20), mload(add(_name, 0x20)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev explicit override for compiler inheritance\\r\\n     * @dev explicit override for compiler inheritance\\r\\n     * @return domain of chain on which the contract is deployed\\r\\n     */\\r\\n    function _localDomain()\\r\\n        internal\\r\\n        view\\r\\n        override(XAppConnectionClient)\\r\\n        returns (uint32)\\r\\n    {\\r\\n        // return XAppConnectionClient._localDomain();\\r\\n        return _local;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb123bd0dd4d5553432acc54332b96c4f4b0308be3829173f1d73d8aeacdd94c7\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/interfaces/bridge/IBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\ninterface IBridgeToken {\\r\\n    function initialize() external;\\r\\n\\r\\n    function name() external returns (string memory);\\r\\n\\r\\n    function balanceOf(address _account) external view returns (uint256);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function detailsHash() external view returns (bytes32);\\r\\n\\r\\n    function burn(address _from, uint256 _amnt) external;\\r\\n\\r\\n    function mint(address _to, uint256 _amnt) external;\\r\\n\\r\\n    function setDetailsHash(bytes32 _detailsHash) external;\\r\\n\\r\\n    function setDetails(\\r\\n        string calldata _name,\\r\\n        string calldata _symbol,\\r\\n        uint8 _decimals\\r\\n    ) external;\\r\\n\\r\\n    // inherited from ownable\\r\\n    function transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4d9409acf590bae2db6356288cdc21080533417e73ad5d21347280ed60cdd87f\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/interfaces/bridge/ITokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// ============ Internal Imports ============\\r\\nimport {IBridgeToken} from \\\"./IBridgeToken.sol\\\";\\r\\nimport {BridgeMessage} from \\\"../../contracts/bridge/BridgeMessage.sol\\\";\\r\\n\\r\\n// ============ External Imports ============\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ITokenRegistry {\\r\\n    function isLocalOrigin(address _token) external view returns (bool);\\r\\n\\r\\n    function ensureLocalToken(uint32 _domain, bytes32 _id) external returns (address _local);\\r\\n\\r\\n    function mustHaveLocalToken(uint32 _domain, bytes32 _id) external view returns (IERC20);\\r\\n\\r\\n    function getLocalAddress(uint32 _domain, bytes32 _id)\\r\\n    external\\r\\n    view\\r\\n    returns (address _local);\\r\\n\\r\\n    function getTokenId(address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint32, bytes32);\\r\\n\\r\\n    function enrollCustom(\\r\\n        uint32 _domain,\\r\\n        bytes32 _id,\\r\\n        address _custom\\r\\n    ) external;\\r\\n\\r\\n    function oldReprToCurrentRepr(address _oldRepr) external view returns (address _currentRepr);\\r\\n}\\r\\n\",\"keccak256\":\"0x17e645f632b8c2d399e23cbc4ab9d168ff167ba3797cda8e42c0dfd15383586b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/interfaces/bridge/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\ninterface ITransactionManager {\\r\\n  function reconcile(\\r\\n    bytes32 _id,\\r\\n    address _local,\\r\\n    address _recipient,\\r\\n    uint256 _amount,\\r\\n    bytes32 _externalCallHash\\r\\n  ) external payable;\\r\\n}\",\"keccak256\":\"0x029ca4b7485e765aca60a4671502a1c7f7728f55092b0518235255c6d7c1ab20\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615029806100206000396000f3fe608060405260043610620002b75760003560e01c80638741eac5116200016b578063c0c17baf11620000d1578063d232c2201162000084578063d232c2201462000902578063e070da091462000923578063e47602f7146200093a578063e8be0dfc1462000952578063ea7a904d146200096a578063f31abcc4146200098f57600080fd5b8063c0c17baf146200086c578063c1a049591462000884578063c2fb26a6146200089b578063c5b350df14620008b3578063c95f9d0e14620008cb578063d1851c9214620008e257600080fd5b8063ac210cc7116200012a578063ac210cc7146200077d578063affed0e0146200079f578063b1f8100d14620007b7578063bb7363cc14620007dc578063bd7e1e2e146200080d578063bff32da8146200084757600080fd5b80638741eac514620006be5780638ba4508514620006d65780638da5cb5b14620007245780639d23c4c714620007445780639e4394ea146200076657600080fd5b8063445b1e4b116200021d5780636a42b8f811620001d05780636a42b8f814620005ee5780636ae0b1541462000606578063715018a6146200062b578063754d1d5414620006435780637b298e27146200066857806383c68876146200068d57600080fd5b8063445b1e4b146200047c578063569d29e414620004b057806357bd0a3214620004d55780636006209114620005095780636414091814620005675780636a41633a14620005d757600080fd5b80632c1999d011620002765780632c1999d0146200037a5780633855b46714620003cd5780633a35cf1714620003e55780633cf52ffb146200040757806341258b5c146200041e57806341af5b52146200045a57600080fd5b80631506e46314620002c45780631eab28f914620002eb5780632004ef45146200031557806320774909146200033e57806324ca984e146200035557600080fd5b36620002bf57005b600080fd5b348015620002d157600080fd5b50620002e9620002e336600462003af7565b620009b4565b005b62000302620002fc36600462003b34565b620009fa565b6040519081526020015b60405180910390f35b3480156200032257600080fd5b506200032d62000caf565b60405190151581526020016200030c565b620002e96200034f36600462003b72565b62000cd2565b3480156200036257600080fd5b50620002e96200037436600462003b72565b62000d04565b3480156200038757600080fd5b50620003b46200039936600462003b92565b607a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016200030c565b348015620003da57600080fd5b50620002e962000e28565b348015620003f257600080fd5b50606e54620003b4906001600160a01b031681565b3480156200041457600080fd5b5060355462000302565b3480156200042b57600080fd5b50620003026200043d36600462003bac565b607560209081526000928352604080842090915290825290205481565b3480156200046757600080fd5b50606b54620003b4906001600160a01b031681565b3480156200048957600080fd5b506200032d6200049b36600462003b72565b60776020526000908152604090205460ff1681565b348015620004bd57600080fd5b50620002e9620004cf36600462003bdf565b62000f30565b348015620004e257600080fd5b506200032d620004f436600462003b92565b60786020526000908152604090205460ff1681565b3480156200051657600080fd5b506200054a6200052836600462003b72565b6079602052600090815260409020805460019091015463ffffffff9091169082565b6040805163ffffffff90931683526020830191909152016200030c565b3480156200057457600080fd5b50620005b16200058636600462003b92565b6071602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b0390941684526020840192909252908201526060016200030c565b348015620005e457600080fd5b5060395462000302565b348015620005fb57600080fd5b5062093a8062000302565b3480156200061357600080fd5b50620002e96200062536600462003b72565b62000f7a565b3480156200063857600080fd5b50620002e962001099565b3480156200065057600080fd5b50620002e96200066236600462003c30565b620011ad565b3480156200067557600080fd5b50620002e96200068736600462003c8a565b62001322565b3480156200069a57600080fd5b5062000302620006ac36600462003b72565b60766020526000908152604090205481565b348015620006cb57600080fd5b50620002e962001355565b348015620006e357600080fd5b506200070e620006f536600462003b92565b6072602052600090815260409020805460019091015482565b604080519283526020830191909152016200030c565b3480156200073157600080fd5b506033546001600160a01b0316620003b4565b3480156200075157600080fd5b50606f54620003b4906001600160a01b031681565b620002e96200077736600462003cb2565b620013cd565b3480156200078a57600080fd5b50606c54620003b4906001600160a01b031681565b348015620007ac57600080fd5b5062000302606d5481565b348015620007c457600080fd5b50620002e9620007d636600462003b72565b6200157e565b348015620007e957600080fd5b5062000302620007fb36600462003b92565b60736020526000908152604090205481565b3480156200081a57600080fd5b50620003b46200082c36600462003b92565b6070602052600090815260409020546001600160a01b031681565b3480156200085457600080fd5b50620003026200086636600462003d09565b62001662565b3480156200087957600080fd5b50620002e9620019b6565b3480156200089157600080fd5b5060375462000302565b348015620008a857600080fd5b506200030260745481565b348015620008c057600080fd5b50620002e962001abc565b620002e9620008dc36600462003c8a565b62001b9e565b348015620008ef57600080fd5b506034546001600160a01b0316620003b4565b3480156200090f57600080fd5b506033546001600160a01b0316156200032d565b620002e96200093436600462003d47565b62001bde565b3480156200094757600080fd5b50620002e962001c1f565b3480156200095f57600080fd5b506200032d62001c97565b3480156200097757600080fd5b50620002e96200098936600462003c8a565b62001cb8565b3480156200099c57600080fd5b50620002e9620009ae36600462003d47565b62001df3565b6033546001600160a01b03163314620009ea5760405162461bcd60e51b8152600401620009e19062003d83565b60405180910390fd5b620009f6828262001f8d565b5050565b6000806079818062000a13604087016020880162003b72565b6001600160a01b03161462000a3a5762000a34604086016020870162003b72565b62000a47565b606c546001600160a01b03165b6001600160a01b03166001600160a01b0316815260200190815260200160002060010154141562000aae5760405162461bcd60e51b815260206004820152601060248201526f085cdd5c1c1bdc9d195917d85cdcd95d60821b6044820152606401620009e1565b60008062000ad262000ac7604086016020870162003b72565b85604001356200201c565b9150915060008062000ae584846200222c565b91509150600062000b21606d54607454604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b606d8054919250600062000b358362003dba565b9091555062000c1f905062000b4b888062003dd8565b62000b5e9060a081019060800162003e1e565b62000b6a898062003dd8565b62000b7a90602081019062003b72565b84868562000c1962000b8d8e8062003dd8565b62000b9d90602081019062003b72565b62000ba98f8062003dd8565b62000bbc90604081019060200162003b72565b8f806000019062000bce919062003dd8565b62000bde90604081019062003e3e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620023db92505050565b6200243c565b62000c2b878062003dd8565b62000c3b90602081019062003b72565b6001600160a01b0316817faa858d2a751f10ba408efe39c65b526420ce14aabd065785ab25f2ee860bc0db62000c728a8062003dd8565b888689896001606d5462000c87919062003e88565b3360405162000c9d979695949392919062003f99565b60405180910390a39695505050505050565b6033546000906001600160a01b0316158062000ccd575060365460ff165b905090565b6001600160a01b0381166000908152607660205260408120805434929062000cfc90849062003fed565b909155505050565b6033546001600160a01b0316331462000d315760405162461bcd60e51b8152600401620009e19062003d83565b6001600160a01b03811662000d735760405162461bcd60e51b81526020600482015260076024820152662341523a30303160c81b6044820152606401620009e1565b6001600160a01b03811660009081526077602052604090205460ff161562000dc85760405162461bcd60e51b815260206004820152600760248201526611a0a91d18199960c91b6044820152606401620009e1565b6001600160a01b038116600081815260776020908152604091829020805460ff19166001179055815192835233908301527fbc68405e644da2aaf25623ce2199da82c6dfd2e1de102b400eba6a091704d4f491015b60405180910390a150565b6033546001600160a01b0316331462000e555760405162461bcd60e51b8152600401620009e19062003d83565b60385460ff161562000e955760405162461bcd60e51b8152602060048201526008602482015267046a4829e746066760c31b6044820152606401620009e1565b60006039541162000ed45760405162461bcd60e51b81526020600482015260086024820152672352414f3a30333760c01b6044820152606401620009e1565b62093a806039544262000ee8919062003e88565b1162000f225760405162461bcd60e51b815260206004820152600860248201526702352414f3a3033360c41b6044820152606401620009e1565b62000f2e60016200250b565b565b6033546001600160a01b0316331462000f5d5760405162461bcd60e51b8152600401620009e19062003d83565b62000f69838362002552565b62000f75838262001f8d565b505050565b6033546001600160a01b0316331462000fa75760405162461bcd60e51b8152600401620009e19062003d83565b6001600160a01b03811662000fe95760405162461bcd60e51b81526020600482015260076024820152662352523a30303160c81b6044820152606401620009e1565b6001600160a01b03811660009081526077602052604090205460ff161515600114620010425760405162461bcd60e51b81526020600482015260076024820152662352523a30333360c81b6044820152606401620009e1565b6001600160a01b038116600081815260776020908152604091829020805460ff19169055815192835233908301527fbee3e974bb6a6f44f20096ede047c191eef60322e65e4ee4bd3392230a8716d5910162000e1d565b6033546001600160a01b03163314620010c65760405162461bcd60e51b8152600401620009e19062003d83565b600060355411620011045760405162461bcd60e51b815260206004820152600760248201526623524f3a30333760c81b6044820152606401620009e1565b62093a806035544262001118919062003e88565b11620011515760405162461bcd60e51b8152602060048201526007602482015266023524f3a3033360cc1b6044820152606401620009e1565b6034546001600160a01b031615620011965760405162461bcd60e51b815260206004820152600760248201526611a9279d18199b60c91b6044820152606401620009e1565b60345462000f2e906001600160a01b0316620026ab565b600054610100900460ff16620011ca5760005460ff1615620011ce565b303b155b620012335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620009e1565b600054610100900460ff1615801562001256576000805461ffff19166101011790555b6200126062002704565b6200126a62002738565b6000606d556074859055606b80546001600160a01b0319166001600160a01b03861617905560405130906200129f9062003aba565b6001600160a01b039091168152602001604051809103906000f080158015620012cc573d6000803e3d6000fd5b50606e80546001600160a01b03199081166001600160a01b0393841617909155606f80548216868416179055606c805490911691841691909117905580156200131b576000805461ff00191690555b5050505050565b33600090815260766020526040812080548492906200134390849062003e88565b90915550620009f6905081836200276c565b6033546001600160a01b03163314620013825760405162461bcd60e51b8152600401620009e19062003d83565b60385460ff1615620013c35760405162461bcd60e51b8152602060048201526009602482015268046a0829ea4746066760bb1b6044820152606401620009e1565b62000f2e6200288b565b606b546001600160a01b03163314620014135760405162461bcd60e51b81526020600482015260076024820152662162726964676560c81b6044820152606401620009e1565b600085815260716020908152604091829020825160608101845281546001600160a01b0316808252600183015493820193909352600290910154928101929092526200147c576200146785858585620028c7565b600087815260736020526040902055620014fe565b81816040015114620014bd5760405162461bcd60e51b815260206004820152600960248201526808595e1d195c9b985b60ba1b6044820152606401620009e1565b80516001600160a01b03908116600090815260756020908152604080832093891683529290529081208054859290620014f890849062003fed565b90915550505b8051604080516001600160a01b038881168252602080830188905282840187905285518216606084015285015160808301529184015160a08201523360c0820152918116919086169088907fcadf9cf98df75c21f161e3c701edaa004eb9756d7413b30b2c4cf359fc95d8de9060e00160405180910390a4505050505050565b6033546001600160a01b03163314620015ab5760405162461bcd60e51b8152600401620009e19062003d83565b6034546001600160a01b038281169116141580620015d057506001600160a01b038116155b620016095760405162461bcd60e51b815260206004820152600860248201526711a827279d18199b60c11b6044820152606401620009e1565b6033546001600160a01b0382811691161415620016545760405162461bcd60e51b8152602060048201526008602482015267046a09c9e746066760c31b6044820152606401620009e1565b6200165f8162002934565b50565b6000805a90506000620016c460808501356200167f868062003dd8565b6200169290608081019060600162003e1e565b63ffffffff16604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6000818152607360205260409020549091501562001718620016e7868062003dd8565b83620016fa6040890160208a0162003b72565b6200170c60608a0160408b0162003b72565b858a60a0013562002982565b6000806200173c620017316040890160208a0162003b72565b8860a0013562002b54565b909250905060006200174f888062003dd8565b6200176290604081019060200162003b72565b6001600160a01b03161415620017a0576200179a8162001783898062003dd8565b6200179390602081019062003b72565b8462002c27565b62001897565b606e54620017ba9082906001600160a01b03168462002c27565b606e546001600160a01b031663cf9a360485620017d88a8062003dd8565b620017eb90604081019060200162003b72565b84620017f88c8062003dd8565b6200180890602081019062003b72565b87620018158e8062003dd8565b6200182590604081019062003e3e565b6040518863ffffffff1660e01b815260040162001849979695949392919062004008565b6000604051808303816000875af115801562001869573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620018939190810190620040af565b5050505b8215620018da5760405180604001604052805a620018b6908862003e88565b81523a60209182015260008681526072825260409020825181559101516001909101555b6200191b620018f06060890160408a0162003b72565b60808901803590620019069060608c0162003e1e565b6200191560c08c018c62003e3e565b62002cf9565b3362001928888062003dd8565b6200193890602081019062003b72565b6001600160a01b0316857ff5e90e5901380e22041aa14a3278bd65b49393e071767d2c405e015b075f86406200196f8b8062003dd8565b60808c01356200198660408e0160208f0162003b72565b878e60a001358a33604051620019a397969594939291906200418f565b60405180910390a4509195945050505050565b6033546001600160a01b03163314620019e35760405162461bcd60e51b8152600401620009e19062003d83565b60365460ff161562001a235760405162461bcd60e51b8152602060048201526008602482015267046a4a49e746066760c31b6044820152606401620009e1565b60006037541162001a625760405162461bcd60e51b81526020600482015260086024820152672352524f3a30333760c01b6044820152606401620009e1565b62093a806037544262001a76919062003e88565b1162001ab05760405162461bcd60e51b815260206004820152600860248201526702352524f3a3033360c41b6044820152606401620009e1565b62000f2e600162002e19565b6034546001600160a01b0316331462001b025760405162461bcd60e51b8152602060048201526007602482015266234f503a30333560c81b6044820152606401620009e1565b6034546033546001600160a01b039081169116141562001b505760405162461bcd60e51b815260206004820152600860248201526704682a09e746066760c31b6044820152606401620009e1565b62093a806035544262001b64919062003e88565b11620011965760405162461bcd60e51b815260206004820152600860248201526702341504f3a3033360c41b6044820152606401620009e1565b6002600154141562001bc45760405162461bcd60e51b8152600401620009e190620041e0565b600260015562001bd682823362002e60565b505060018055565b6002600154141562001c045760405162461bcd60e51b8152600401620009e190620041e0565b600260015562001c1683838362002e60565b50506001805550565b6033546001600160a01b0316331462001c4c5760405162461bcd60e51b8152600401620009e19062003d83565b60365460ff161562001c8d5760405162461bcd60e51b8152602060048201526009602482015268046a0a49ea4746066760bb1b6044820152606401620009e1565b62000f2e620030f3565b6033546000906001600160a01b0316158062000ccd57505060385460ff1690565b6033546001600160a01b0316331462001ce55760405162461bcd60e51b8152600401620009e19062003d83565b60008281526078602052604090205460ff16151560011462001d345760405162461bcd60e51b81526020600482015260076024820152662352413a30333360c81b6044820152606401620009e1565b6000828152607860209081526040808320805460ff191690556070909152812080546001600160a01b03191690556079906001600160a01b0383161562001d7c578262001d89565b606c546001600160a01b03165b6001600160a01b0316815260208082019290925260409081016000908120805463ffffffff1916815560010155805184815233928101929092527f9d181adb70e733f5235f839c1eed929407ea8526e41d01f49b9fef703e78dddf91015b60405180910390a15050565b6002600154141562001e195760405162461bcd60e51b8152600401620009e190620041e0565b60026001556001600160a01b03811662001e605760405162461bcd60e51b815260206004820152600760248201526623524c3a30303760c81b6044820152606401620009e1565b6000831162001e9c5760405162461bcd60e51b815260206004820152600760248201526611a9261d18181960c91b6044820152606401620009e1565b3360009081526075602090815260408083206001600160a01b03861684529091529020548381101562001efc5760405162461bcd60e51b8152602060048201526007602482015266046a498746060760cb1b6044820152606401620009e1565b3360009081526075602090815260408083206001600160a01b03871684529091529020848203905562001f3183838662002c27565b604080516001600160a01b03848116825285166020820152808201869052336060820181905291517f63b05915120b3d5a231e7c3625a411c15b2a79c35e3b1432a4f1ea95468cc6349181900360800190a25050600180555050565b6020828101803560008181526070909352604090922080546001600160a01b0319166001600160a01b0385161790557fd6f882d8fd8cc867bb57db3880bc4ad0b9b84689b57bba1b51feec7be397e3c2919062001feb908562003e1e565b6040805192835263ffffffff90911660208301526001600160a01b0384169082015233606082015260800162001de7565b600080826001600160a01b038516620020ea578334146200206a5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401620009e1565b606c60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015620020bb57600080fd5b505af1158015620020d0573d6000803e3d6000fd5b5050606c546001600160a01b031697506200221f92505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa15801562002132573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002158919062004217565b90503415620021945760405162461bcd60e51b815260206004820152600760248201526611aa209d18181b60c91b6044820152606401620009e1565b620021a2863330886200312a565b6040516370a0823160e01b815230600482015281906001600160a01b038816906370a0823190602401602060405180830381865afa158015620021e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200220f919062004217565b6200221b919062003e88565b9150505b84925090505b9250929050565b6001600160a01b03821660009081526079602090815260408083208151808301909252805463ffffffff16825260010154918101829052829162002277578385925092505062002225565b606f5481516020830151604051631626cf1960e21b815263ffffffff909216600483015260248201526000916001600160a01b03169063589b3c6490604401602060405180830381865afa158015620022d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022fa919062004231565b9050856001600160a01b0316816001600160a01b031614156200232557848693509350505062002225565b6020808301516000908152607090915260409020546001600160a01b0316620023508782886200319d565b60405163d5914c4560e01b8152600481018790526001600160a01b038881166024830152838116604483015282169063d5914c45906064016020604051808303816000875af1158015620023a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023ce919062004217565b9791965090945050505050565b60006040518060600160405280856001600160a01b03168152602001846001600160a01b03168152602001838152506040516020016200241c91906200427f565b6040516020818303038152906040528051906020012090505b9392505050565b606b54620024569085906001600160a01b031685620032ba565b606b546001600160a01b031663adadc0dc8585896200247b8a6001600160a01b031690565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925263ffffffff16604483015260648201526001608482015260a4810185905260c4810184905260e401600060405180830381600087803b158015620024ea57600080fd5b505af1158015620024ff573d6000803e3d6000fd5b50505050505050505050565b6038805460ff191682151590811790915560006039556040519081527f868d89ead22a5d10f456845ac0014901d9af7203e71cf0892d70d9dc262c2fb99060200162000e1d565b60208083013560009081526078909152604090205460ff1615620025a35760405162461bcd60e51b815260206004820152600760248201526611a0a09d18199960c91b6044820152606401620009e1565b6020808301356000908152607882526040808220805460ff191660011790556001600160a01b03841682526079909252208290620025e28282620042bc565b50600090506001600160a01b03821615620025fe57816200260b565b606c546001600160a01b03165b602084810180356000818152607a909352604090922080546001600160a01b0319166001600160a01b0385161790559192507f42e28d2d3431c24c3f3b6e2623a169bd4a31dd1f66780c4499af54a28632779b916200266b908662003e1e565b6040805192835263ffffffff9190911660208301526001600160a01b038581168383015284166060830152336080830152519081900360a00190a1505050565b603380546001600160a01b038381166001600160a01b0319831681179093556000603581905560405191909216929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054610100900460ff166200272e5760405162461bcd60e51b8152600401620009e190620042eb565b62000f2e62003373565b600054610100900460ff16620027625760405162461bcd60e51b8152600401620009e190620042eb565b62000f2e620033a8565b80471015620027be5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401620009e1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146200280d576040519150601f19603f3d011682016040523d82523d6000602084013e62002812565b606091505b505090508062000f755760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401620009e1565b4260398190556040519081527fa78fdca214e4619ef34a695316d423f5b0d8274bc919d29733bf8f92ec8cbb7a906020015b60405180910390a1565b60408051608080820183528382526001600160a01b039687166020808401918252838501968752968816606093840190815284518089019690965290518816858501529451918401919091529251909416818301528351808203909201825260a001909252815191012090565b42603555603480546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b6000620029b862002997602089018962003b72565b620029a960408a0160208b0162003b72565b62000bde60408b018b62003e3e565b9050821562002aac576000868152607160205260409020546001600160a01b03161562002a115760405162461bcd60e51b815260206004820152600660248201526521656d70747960d01b6044820152606401620009e1565b6001600160a01b0380851660009081526075602090815260408083209389168352929052908120805484929062002a4a90849062003e88565b9091555050604080516060810182526001600160a01b038681168252602080830186815283850186815260008c8152607190935294909120925183546001600160a01b0319169216919091178255516001820155905160029091015562002b4b565b6000868152607360205260409020548062002af35760405162461bcd60e51b815260206004820152600660248201526508599bdd5b9960d21b6044820152606401620009e1565b62002b0f8662002b0760208b018b62003b72565b8585620028c7565b811462002b495760405162461bcd60e51b815260206004820152600760248201526621706172616d7360c81b6044820152606401620009e1565b505b50505050505050565b606f5460405163b9730eaf60e01b81526001600160a01b038481166004830152600092839283929091169063b9730eaf906024016040805180830381865afa15801562002ba5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002bcb919062004336565b6000818152607a60205260409020549092506001600160a01b039081169150861681141562002c0257848693509350505062002225565b6000828152607060205260409020546001600160a01b0316620023508782886200319d565b6001600160a01b03831662002c695760405162461bcd60e51b8152602060048201526007602482015266216e617469766560c81b6044820152606401620009e1565b606c546001600160a01b038481169116141562002cec57606c54604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801562002cc757600080fd5b505af115801562002cdc573d6000803e3d6000fd5b5050505062000f7582826200276c565b62000f75838383620033d8565b336001600160a01b038616141562002d11576200131b565b62002d4f848460405160200162002d3892919091825263ffffffff16602082015260400190565b60405160208183030381529060405283836200340a565b6001600160a01b0316856001600160a01b03161462002d9c5760405162461bcd60e51b8152602060048201526008602482015267217274725f73696760c01b6044820152606401620009e1565b63ffffffff831662002dae576200131b565b6000606462002dc463ffffffff86164862004367565b62002dd0919062004389565b6001600160a01b03871660009081526076602052604081208054929350839290919062002dff90849062003e88565b9091555062002e11905033826200276c565b505050505050565b6036805460ff191682151590811790915560006037556040519081527f243ebbb2f905234bbf0556bb38e1f7c23b09ffd2e441a16e58b844eb2ab7a3979060200162000e1d565b6001600160a01b03811662002ea25760405162461bcd60e51b815260206004820152600760248201526623414c3a30303160c81b6044820152606401620009e1565b6000831162002ede5760405162461bcd60e51b815260206004820152600760248201526611a0a61d18181960c91b6044820152606401620009e1565b606f546000906001600160a01b039081169063f15376869085161562002f05578462002f12565b606c546001600160a01b03165b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016040805180830381865afa15801562002f56573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f7c919062004336565b91505062002f8962000caf565b8062002fad57506001600160a01b03821660009081526077602052604090205460ff165b62002fe55760405162461bcd60e51b815260206004820152600760248201526623414c3a30303360c81b6044820152606401620009e1565b62002fef62001c97565b8062003009575060008181526078602052604090205460ff165b620030415760405162461bcd60e51b815260206004820152600760248201526608d0530e8c0c0d60ca1b6044820152606401620009e1565b6000806200305085876200201c565b6001600160a01b0380871660009081526075602090815260408083209386168352929052908120805493955091935083926200308e90849062003fed565b9091555050604080516001600160a01b03808716825284166020820152908101849052606081018290523360808201527fc30593c06911f2f2fc32a69df3a28e4a0b116d8d461b47a005ae4d28cd49282b9060a00160405180910390a1505050505050565b4260378190556040519081527fa52048c5f468d21a62e4644ac4db19bcaa1a20f0cf37d163ba49c7217d35feb890602001620028bd565b6040516001600160a01b0380851660248301528316604482015260648101829052620031979085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152620034b4565b50505050565b8015806200321b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015620031f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003219919062004217565b155b620032885760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401620009e1565b6040516001600160a01b03831660248201526044810182905262000f7590849063095ea7b360e01b906064016200315f565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156200330c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003332919062004217565b6200333e919062003fed565b6040516001600160a01b0385166024820152604481018290529091506200319790859063095ea7b360e01b906064016200315f565b600054610100900460ff166200339d5760405162461bcd60e51b8152600401620009e190620042eb565b62000f2e33620026ab565b600054610100900460ff16620033d25760405162461bcd60e51b8152600401620009e190620042eb565b60018055565b6040516001600160a01b03831660248201526044810182905262000f7590849063a9059cbb60e01b906064016200315f565b6000620034ac6200346f85805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506200358d92505050565b949350505050565b60006200350b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620035b59092919063ffffffff16565b80519091501562000f7557808060200190518101906200352c9190620043ac565b62000f755760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620009e1565b60008060006200359e8585620035c6565b91509150620035ad816200363c565b509392505050565b6060620034ac84846000856200380f565b600080825160411415620036015760208301516040840151606085015160001a620035f4878285856200394a565b9450945050505062002225565b8251604014156200362f57602083015160408401516200362386838362003a3f565b93509350505062002225565b5060009050600262002225565b6000816004811115620036535762003653620043ca565b14156200365d5750565b6001816004811115620036745762003674620043ca565b1415620036c45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401620009e1565b6002816004811115620036db57620036db620043ca565b14156200372b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401620009e1565b6003816004811115620037425762003742620043ca565b14156200379d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401620009e1565b6004816004811115620037b457620037b4620043ca565b14156200165f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401620009e1565b606082471015620038725760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620009e1565b6001600160a01b0385163b620038cb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620009e1565b600080866001600160a01b03168587604051620038e99190620043e0565b60006040518083038185875af1925050503d806000811462003928576040519150601f19603f3d011682016040523d82523d6000602084013e6200392d565b606091505b50915091506200393f82828662003a7c565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111562003983575060009050600362003a36565b8460ff16601b141580156200399c57508460ff16601c14155b15620039af575060009050600462003a36565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801562003a04573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811662003a2f5760006001925092505062003a36565b9150600090505b94509492505050565b6000806001600160ff1b0383168162003a5e60ff86901c601b62003fed565b905062003a6e878288856200394a565b935093505050935093915050565b6060831562003a8d57508162002435565b82511562003a9e5782518084602001fd5b8160405162461bcd60e51b8152600401620009e19190620043f4565b610bea806200440a83390190565b60006040828403121562003adb57600080fd5b50919050565b6001600160a01b03811681146200165f57600080fd5b6000806060838503121562003b0b57600080fd5b62003b17848462003ac8565b9150604083013562003b298162003ae1565b809150509250929050565b60006020828403121562003b4757600080fd5b813567ffffffffffffffff81111562003b5f57600080fd5b8201606081850312156200243557600080fd5b60006020828403121562003b8557600080fd5b8135620024358162003ae1565b60006020828403121562003ba557600080fd5b5035919050565b6000806040838503121562003bc057600080fd5b823562003bcd8162003ae1565b9150602083013562003b298162003ae1565b60008060006080848603121562003bf557600080fd5b62003c01858562003ac8565b9250604084013562003c138162003ae1565b9150606084013562003c258162003ae1565b809150509250925092565b6000806000806080858703121562003c4757600080fd5b84359350602085013562003c5b8162003ae1565b9250604085013562003c6d8162003ae1565b9150606085013562003c7f8162003ae1565b939692955090935050565b6000806040838503121562003c9e57600080fd5b82359150602083013562003b298162003ae1565b600080600080600060a0868803121562003ccb57600080fd5b85359450602086013562003cdf8162003ae1565b9350604086013562003cf18162003ae1565b94979396509394606081013594506080013592915050565b60006020828403121562003d1c57600080fd5b813567ffffffffffffffff81111562003d3457600080fd5b820160e081850312156200243557600080fd5b60008060006060848603121562003d5d57600080fd5b83359250602084013562003d718162003ae1565b9150604084013562003c258162003ae1565b602080825260079082015266234f4f3a30323960c81b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600060001982141562003dd15762003dd162003da4565b5060010190565b60008235609e1983360301811262003def57600080fd5b9190910192915050565b63ffffffff811681146200165f57600080fd5b803562003e198162003df9565b919050565b60006020828403121562003e3157600080fd5b8135620024358162003df9565b6000808335601e1984360301811262003e5657600080fd5b83018035915067ffffffffffffffff82111562003e7257600080fd5b6020019150368190038213156200222557600080fd5b60008282101562003e9d5762003e9d62003da4565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000813562003eda8162003ae1565b6001600160a01b03908116845260208301359062003ef88262003ae1565b166020840152604082013536839003601e1901811262003f1757600080fd5b8201803567ffffffffffffffff81111562003f3157600080fd5b80360384131562003f4157600080fd5b60a0604086015262003f5b60a08601826020850162003ea2565b91505062003f6c6060840162003e0c565b63ffffffff16606085015262003f856080840162003e0c565b63ffffffff81166080860152509392505050565b60e08152600062003fae60e083018a62003ecb565b6001600160a01b0398891660208401529688166040830152506060810194909452608084019290925260a083015290921660c090920191909152919050565b6000821982111562004003576200400362003da4565b500190565b8781526001600160a01b0387811660208301528681166040830152851660608201526080810184905260c060a082018190526000906200404c908301848662003ea2565b9998505050505050505050565b8051801515811462003e1957600080fd5b634e487b7160e01b600052604160045260246000fd5b60005b838110156200409d57818101518382015260200162004083565b83811115620031975750506000910152565b600080600060608486031215620040c557600080fd5b620040d08462004059565b9250620040e06020850162004059565b9150604084015167ffffffffffffffff80821115620040fe57600080fd5b818601915086601f8301126200411357600080fd5b8151818111156200412857620041286200406a565b604051601f8201601f19908116603f011681019083821181831017156200415357620041536200406a565b816040528281528960208487010111156200416d57600080fd5b6200418083602083016020880162004080565b80955050505050509250925092565b60e081526000620041a460e083018a62003ecb565b6020830198909852506001600160a01b0395861660408201529385166060850152608084019290925260a083015290911660c090910152919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156200422a57600080fd5b5051919050565b6000602082840312156200424457600080fd5b8151620024358162003ae1565b600081518084526200426b81602086016020860162004080565b601f01601f19169290920160200192915050565b60208152600060018060a01b03808451166020840152806020850151166040840152506040830151606080840152620034ac608084018262004251565b8135620042c98162003df9565b63ffffffff811663ffffffff1983541617825550602082013560018201555050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600080604083850312156200434a57600080fd5b8251620043578162003df9565b6020939093015192949293505050565b600081600019048311821515161562004384576200438462003da4565b500290565b600082620043a757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215620043bf57600080fd5b620024358262004059565b634e487b7160e01b600052602160045260246000fd5b6000825162003def81846020870162004080565b6020815260006200243560208301846200425156fe60a060405234801561001057600080fd5b50604051610bea380380610bea83398101604081905261002f91610045565b60016000556001600160a01b0316608052610075565b60006020828403121561005757600080fd5b81516001600160a01b038116811461006e57600080fd5b9392505050565b608051610b55610095600039600081816048015260a90152610b556000f3fe6080604052600436106100295760003560e01c806396f32fb81461002e578063cf9a360414610077575b600080fd5b34801561003a57600080fd5b506040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020015b60405180910390f35b61008a6100853660046108b0565b610099565b60405161006e939291906109c6565b6000806060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101065760405162461bcd60e51b8152602060048201526008602482015267234f544d3a30323760c01b60448201526064015b60405180910390fd5b6001600160a01b038816158061012157610121898b89610224565b600060606001600160a01b038c163b158015906101a9578c6001600160a01b03168461014e576000610150565b8a5b8a8a6040516101609291906109f2565b60006040518083038185875af1925050503d806000811461019d576040519150601f19603f3d011682016040523d82523d6000602084013e6101a2565b606091505b5090935091505b826101c9576101b98c8c8c610274565b836101c9576101c98c8e8c610298565b8d7f03196b76502b81bbf14393f8b5ed67dff323f1f86667b064820f1fdf293686a18e8e8e8e8e8e898b8a60405161020999989796959493929190610a02565b60405180910390a2919d919c509a5098505050505050505050565b6001600160a01b0383166102645760405162461bcd60e51b815260206004820152600760248201526608d2504e8c0ccd60ca1b60448201526064016100fd565b61026f8383836102e3565b505050565b6001600160a01b0383161561028e5761026f8383836103ce565b61026f82826103d9565b6001600160a01b0383166102d85760405162461bcd60e51b815260206004820152600760248201526608d1104e8c0ccd60ca1b60448201526064016100fd565b61026f8383836103e7565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103589190610a8f565b6103629190610aa8565b6040516001600160a01b0385166024820152604481018290529091506103c890859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526104fa565b50505050565b61026f8383836105cc565b6103e382826105fc565b5050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015610437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045b9190610a8f565b9050818110156104bf5760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e63652062604482015268656c6f77207a65726f60b81b60648201526084016100fd565b6040516001600160a01b038416602482015282820360448201819052906104f390869063095ea7b360e01b90606401610391565b5050505050565b600061054f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107159092919063ffffffff16565b80519091501561026f578080602001905181019061056d9190610ace565b61026f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100fd565b6040516001600160a01b03831660248201526044810182905261026f90849063a9059cbb60e01b90606401610391565b8047101561064c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016100fd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610699576040519150601f19603f3d011682016040523d82523d6000602084013e61069e565b606091505b505090508061026f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016100fd565b6060610724848460008561072e565b90505b9392505050565b60608247101561078f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100fd565b6001600160a01b0385163b6107e65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100fd565b600080866001600160a01b031685876040516108029190610af0565b60006040518083038185875af1925050503d806000811461083f576040519150601f19603f3d011682016040523d82523d6000602084013e610844565b606091505b509150915061085482828661085f565b979650505050505050565b6060831561086e575081610727565b82511561087e5782518084602001fd5b8160405162461bcd60e51b81526004016100fd9190610b0c565b6001600160a01b03811681146108ad57600080fd5b50565b600080600080600080600060c0888a0312156108cb57600080fd5b8735965060208801356108dd81610898565b955060408801356108ed81610898565b945060608801356108fd81610898565b93506080880135925060a088013567ffffffffffffffff8082111561092157600080fd5b818a0191508a601f83011261093557600080fd5b81358181111561094457600080fd5b8b602082850101111561095657600080fd5b60208301945080935050505092959891949750929550565b60005b83811015610989578181015183820152602001610971565b838111156103c85750506000910152565b600081518084526109b281602086016020860161096e565b601f01601f19169290920160200192915050565b831515815282151560208201526060604082015260006109e9606083018461099a565b95945050505050565b8183823760009101908152919050565b6001600160a01b038a811682528981166020830152881660408201526060810187905261010060808201819052810185905260006101208688828501376000838801820152601f8701601f19168301838103820160a0850152610a678183018861099a565b9250505083151560c0830152610a8160e083018415159052565b9a9950505050505050505050565b600060208284031215610aa157600080fd5b5051919050565b60008219821115610ac957634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610ae057600080fd5b8151801515811461072757600080fd5b60008251610b0281846020870161096e565b9190910192915050565b602081526000610727602083018461099a56fea26469706673582212201e02c2ccece5754bc449014383bcf1f525dd0ccb14ec95f7a21edda9b52e205964736f6c634300080b0033a2646970667358221220d8ead213e6a330abe1d50afb9e17de7af8bb1ebdb06ea3dbe62bb95c685a322c64736f6c634300080b0033",
  "deployedBytecode": "0x608060405260043610620002b75760003560e01c80638741eac5116200016b578063c0c17baf11620000d1578063d232c2201162000084578063d232c2201462000902578063e070da091462000923578063e47602f7146200093a578063e8be0dfc1462000952578063ea7a904d146200096a578063f31abcc4146200098f57600080fd5b8063c0c17baf146200086c578063c1a049591462000884578063c2fb26a6146200089b578063c5b350df14620008b3578063c95f9d0e14620008cb578063d1851c9214620008e257600080fd5b8063ac210cc7116200012a578063ac210cc7146200077d578063affed0e0146200079f578063b1f8100d14620007b7578063bb7363cc14620007dc578063bd7e1e2e146200080d578063bff32da8146200084757600080fd5b80638741eac514620006be5780638ba4508514620006d65780638da5cb5b14620007245780639d23c4c714620007445780639e4394ea146200076657600080fd5b8063445b1e4b116200021d5780636a42b8f811620001d05780636a42b8f814620005ee5780636ae0b1541462000606578063715018a6146200062b578063754d1d5414620006435780637b298e27146200066857806383c68876146200068d57600080fd5b8063445b1e4b146200047c578063569d29e414620004b057806357bd0a3214620004d55780636006209114620005095780636414091814620005675780636a41633a14620005d757600080fd5b80632c1999d011620002765780632c1999d0146200037a5780633855b46714620003cd5780633a35cf1714620003e55780633cf52ffb146200040757806341258b5c146200041e57806341af5b52146200045a57600080fd5b80631506e46314620002c45780631eab28f914620002eb5780632004ef45146200031557806320774909146200033e57806324ca984e146200035557600080fd5b36620002bf57005b600080fd5b348015620002d157600080fd5b50620002e9620002e336600462003af7565b620009b4565b005b62000302620002fc36600462003b34565b620009fa565b6040519081526020015b60405180910390f35b3480156200032257600080fd5b506200032d62000caf565b60405190151581526020016200030c565b620002e96200034f36600462003b72565b62000cd2565b3480156200036257600080fd5b50620002e96200037436600462003b72565b62000d04565b3480156200038757600080fd5b50620003b46200039936600462003b92565b607a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016200030c565b348015620003da57600080fd5b50620002e962000e28565b348015620003f257600080fd5b50606e54620003b4906001600160a01b031681565b3480156200041457600080fd5b5060355462000302565b3480156200042b57600080fd5b50620003026200043d36600462003bac565b607560209081526000928352604080842090915290825290205481565b3480156200046757600080fd5b50606b54620003b4906001600160a01b031681565b3480156200048957600080fd5b506200032d6200049b36600462003b72565b60776020526000908152604090205460ff1681565b348015620004bd57600080fd5b50620002e9620004cf36600462003bdf565b62000f30565b348015620004e257600080fd5b506200032d620004f436600462003b92565b60786020526000908152604090205460ff1681565b3480156200051657600080fd5b506200054a6200052836600462003b72565b6079602052600090815260409020805460019091015463ffffffff9091169082565b6040805163ffffffff90931683526020830191909152016200030c565b3480156200057457600080fd5b50620005b16200058636600462003b92565b6071602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b0390941684526020840192909252908201526060016200030c565b348015620005e457600080fd5b5060395462000302565b348015620005fb57600080fd5b5062093a8062000302565b3480156200061357600080fd5b50620002e96200062536600462003b72565b62000f7a565b3480156200063857600080fd5b50620002e962001099565b3480156200065057600080fd5b50620002e96200066236600462003c30565b620011ad565b3480156200067557600080fd5b50620002e96200068736600462003c8a565b62001322565b3480156200069a57600080fd5b5062000302620006ac36600462003b72565b60766020526000908152604090205481565b348015620006cb57600080fd5b50620002e962001355565b348015620006e357600080fd5b506200070e620006f536600462003b92565b6072602052600090815260409020805460019091015482565b604080519283526020830191909152016200030c565b3480156200073157600080fd5b506033546001600160a01b0316620003b4565b3480156200075157600080fd5b50606f54620003b4906001600160a01b031681565b620002e96200077736600462003cb2565b620013cd565b3480156200078a57600080fd5b50606c54620003b4906001600160a01b031681565b348015620007ac57600080fd5b5062000302606d5481565b348015620007c457600080fd5b50620002e9620007d636600462003b72565b6200157e565b348015620007e957600080fd5b5062000302620007fb36600462003b92565b60736020526000908152604090205481565b3480156200081a57600080fd5b50620003b46200082c36600462003b92565b6070602052600090815260409020546001600160a01b031681565b3480156200085457600080fd5b50620003026200086636600462003d09565b62001662565b3480156200087957600080fd5b50620002e9620019b6565b3480156200089157600080fd5b5060375462000302565b348015620008a857600080fd5b506200030260745481565b348015620008c057600080fd5b50620002e962001abc565b620002e9620008dc36600462003c8a565b62001b9e565b348015620008ef57600080fd5b506034546001600160a01b0316620003b4565b3480156200090f57600080fd5b506033546001600160a01b0316156200032d565b620002e96200093436600462003d47565b62001bde565b3480156200094757600080fd5b50620002e962001c1f565b3480156200095f57600080fd5b506200032d62001c97565b3480156200097757600080fd5b50620002e96200098936600462003c8a565b62001cb8565b3480156200099c57600080fd5b50620002e9620009ae36600462003d47565b62001df3565b6033546001600160a01b03163314620009ea5760405162461bcd60e51b8152600401620009e19062003d83565b60405180910390fd5b620009f6828262001f8d565b5050565b6000806079818062000a13604087016020880162003b72565b6001600160a01b03161462000a3a5762000a34604086016020870162003b72565b62000a47565b606c546001600160a01b03165b6001600160a01b03166001600160a01b0316815260200190815260200160002060010154141562000aae5760405162461bcd60e51b815260206004820152601060248201526f085cdd5c1c1bdc9d195917d85cdcd95d60821b6044820152606401620009e1565b60008062000ad262000ac7604086016020870162003b72565b85604001356200201c565b9150915060008062000ae584846200222c565b91509150600062000b21606d54607454604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b606d8054919250600062000b358362003dba565b9091555062000c1f905062000b4b888062003dd8565b62000b5e9060a081019060800162003e1e565b62000b6a898062003dd8565b62000b7a90602081019062003b72565b84868562000c1962000b8d8e8062003dd8565b62000b9d90602081019062003b72565b62000ba98f8062003dd8565b62000bbc90604081019060200162003b72565b8f806000019062000bce919062003dd8565b62000bde90604081019062003e3e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620023db92505050565b6200243c565b62000c2b878062003dd8565b62000c3b90602081019062003b72565b6001600160a01b0316817faa858d2a751f10ba408efe39c65b526420ce14aabd065785ab25f2ee860bc0db62000c728a8062003dd8565b888689896001606d5462000c87919062003e88565b3360405162000c9d979695949392919062003f99565b60405180910390a39695505050505050565b6033546000906001600160a01b0316158062000ccd575060365460ff165b905090565b6001600160a01b0381166000908152607660205260408120805434929062000cfc90849062003fed565b909155505050565b6033546001600160a01b0316331462000d315760405162461bcd60e51b8152600401620009e19062003d83565b6001600160a01b03811662000d735760405162461bcd60e51b81526020600482015260076024820152662341523a30303160c81b6044820152606401620009e1565b6001600160a01b03811660009081526077602052604090205460ff161562000dc85760405162461bcd60e51b815260206004820152600760248201526611a0a91d18199960c91b6044820152606401620009e1565b6001600160a01b038116600081815260776020908152604091829020805460ff19166001179055815192835233908301527fbc68405e644da2aaf25623ce2199da82c6dfd2e1de102b400eba6a091704d4f491015b60405180910390a150565b6033546001600160a01b0316331462000e555760405162461bcd60e51b8152600401620009e19062003d83565b60385460ff161562000e955760405162461bcd60e51b8152602060048201526008602482015267046a4829e746066760c31b6044820152606401620009e1565b60006039541162000ed45760405162461bcd60e51b81526020600482015260086024820152672352414f3a30333760c01b6044820152606401620009e1565b62093a806039544262000ee8919062003e88565b1162000f225760405162461bcd60e51b815260206004820152600860248201526702352414f3a3033360c41b6044820152606401620009e1565b62000f2e60016200250b565b565b6033546001600160a01b0316331462000f5d5760405162461bcd60e51b8152600401620009e19062003d83565b62000f69838362002552565b62000f75838262001f8d565b505050565b6033546001600160a01b0316331462000fa75760405162461bcd60e51b8152600401620009e19062003d83565b6001600160a01b03811662000fe95760405162461bcd60e51b81526020600482015260076024820152662352523a30303160c81b6044820152606401620009e1565b6001600160a01b03811660009081526077602052604090205460ff161515600114620010425760405162461bcd60e51b81526020600482015260076024820152662352523a30333360c81b6044820152606401620009e1565b6001600160a01b038116600081815260776020908152604091829020805460ff19169055815192835233908301527fbee3e974bb6a6f44f20096ede047c191eef60322e65e4ee4bd3392230a8716d5910162000e1d565b6033546001600160a01b03163314620010c65760405162461bcd60e51b8152600401620009e19062003d83565b600060355411620011045760405162461bcd60e51b815260206004820152600760248201526623524f3a30333760c81b6044820152606401620009e1565b62093a806035544262001118919062003e88565b11620011515760405162461bcd60e51b8152602060048201526007602482015266023524f3a3033360cc1b6044820152606401620009e1565b6034546001600160a01b031615620011965760405162461bcd60e51b815260206004820152600760248201526611a9279d18199b60c91b6044820152606401620009e1565b60345462000f2e906001600160a01b0316620026ab565b600054610100900460ff16620011ca5760005460ff1615620011ce565b303b155b620012335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620009e1565b600054610100900460ff1615801562001256576000805461ffff19166101011790555b6200126062002704565b6200126a62002738565b6000606d556074859055606b80546001600160a01b0319166001600160a01b03861617905560405130906200129f9062003aba565b6001600160a01b039091168152602001604051809103906000f080158015620012cc573d6000803e3d6000fd5b50606e80546001600160a01b03199081166001600160a01b0393841617909155606f80548216868416179055606c805490911691841691909117905580156200131b576000805461ff00191690555b5050505050565b33600090815260766020526040812080548492906200134390849062003e88565b90915550620009f6905081836200276c565b6033546001600160a01b03163314620013825760405162461bcd60e51b8152600401620009e19062003d83565b60385460ff1615620013c35760405162461bcd60e51b8152602060048201526009602482015268046a0829ea4746066760bb1b6044820152606401620009e1565b62000f2e6200288b565b606b546001600160a01b03163314620014135760405162461bcd60e51b81526020600482015260076024820152662162726964676560c81b6044820152606401620009e1565b600085815260716020908152604091829020825160608101845281546001600160a01b0316808252600183015493820193909352600290910154928101929092526200147c576200146785858585620028c7565b600087815260736020526040902055620014fe565b81816040015114620014bd5760405162461bcd60e51b815260206004820152600960248201526808595e1d195c9b985b60ba1b6044820152606401620009e1565b80516001600160a01b03908116600090815260756020908152604080832093891683529290529081208054859290620014f890849062003fed565b90915550505b8051604080516001600160a01b038881168252602080830188905282840187905285518216606084015285015160808301529184015160a08201523360c0820152918116919086169088907fcadf9cf98df75c21f161e3c701edaa004eb9756d7413b30b2c4cf359fc95d8de9060e00160405180910390a4505050505050565b6033546001600160a01b03163314620015ab5760405162461bcd60e51b8152600401620009e19062003d83565b6034546001600160a01b038281169116141580620015d057506001600160a01b038116155b620016095760405162461bcd60e51b815260206004820152600860248201526711a827279d18199b60c11b6044820152606401620009e1565b6033546001600160a01b0382811691161415620016545760405162461bcd60e51b8152602060048201526008602482015267046a09c9e746066760c31b6044820152606401620009e1565b6200165f8162002934565b50565b6000805a90506000620016c460808501356200167f868062003dd8565b6200169290608081019060600162003e1e565b63ffffffff16604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6000818152607360205260409020549091501562001718620016e7868062003dd8565b83620016fa6040890160208a0162003b72565b6200170c60608a0160408b0162003b72565b858a60a0013562002982565b6000806200173c620017316040890160208a0162003b72565b8860a0013562002b54565b909250905060006200174f888062003dd8565b6200176290604081019060200162003b72565b6001600160a01b03161415620017a0576200179a8162001783898062003dd8565b6200179390602081019062003b72565b8462002c27565b62001897565b606e54620017ba9082906001600160a01b03168462002c27565b606e546001600160a01b031663cf9a360485620017d88a8062003dd8565b620017eb90604081019060200162003b72565b84620017f88c8062003dd8565b6200180890602081019062003b72565b87620018158e8062003dd8565b6200182590604081019062003e3e565b6040518863ffffffff1660e01b815260040162001849979695949392919062004008565b6000604051808303816000875af115801562001869573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620018939190810190620040af565b5050505b8215620018da5760405180604001604052805a620018b6908862003e88565b81523a60209182015260008681526072825260409020825181559101516001909101555b6200191b620018f06060890160408a0162003b72565b60808901803590620019069060608c0162003e1e565b6200191560c08c018c62003e3e565b62002cf9565b3362001928888062003dd8565b6200193890602081019062003b72565b6001600160a01b0316857ff5e90e5901380e22041aa14a3278bd65b49393e071767d2c405e015b075f86406200196f8b8062003dd8565b60808c01356200198660408e0160208f0162003b72565b878e60a001358a33604051620019a397969594939291906200418f565b60405180910390a4509195945050505050565b6033546001600160a01b03163314620019e35760405162461bcd60e51b8152600401620009e19062003d83565b60365460ff161562001a235760405162461bcd60e51b8152602060048201526008602482015267046a4a49e746066760c31b6044820152606401620009e1565b60006037541162001a625760405162461bcd60e51b81526020600482015260086024820152672352524f3a30333760c01b6044820152606401620009e1565b62093a806037544262001a76919062003e88565b1162001ab05760405162461bcd60e51b815260206004820152600860248201526702352524f3a3033360c41b6044820152606401620009e1565b62000f2e600162002e19565b6034546001600160a01b0316331462001b025760405162461bcd60e51b8152602060048201526007602482015266234f503a30333560c81b6044820152606401620009e1565b6034546033546001600160a01b039081169116141562001b505760405162461bcd60e51b815260206004820152600860248201526704682a09e746066760c31b6044820152606401620009e1565b62093a806035544262001b64919062003e88565b11620011965760405162461bcd60e51b815260206004820152600860248201526702341504f3a3033360c41b6044820152606401620009e1565b6002600154141562001bc45760405162461bcd60e51b8152600401620009e190620041e0565b600260015562001bd682823362002e60565b505060018055565b6002600154141562001c045760405162461bcd60e51b8152600401620009e190620041e0565b600260015562001c1683838362002e60565b50506001805550565b6033546001600160a01b0316331462001c4c5760405162461bcd60e51b8152600401620009e19062003d83565b60365460ff161562001c8d5760405162461bcd60e51b8152602060048201526009602482015268046a0a49ea4746066760bb1b6044820152606401620009e1565b62000f2e620030f3565b6033546000906001600160a01b0316158062000ccd57505060385460ff1690565b6033546001600160a01b0316331462001ce55760405162461bcd60e51b8152600401620009e19062003d83565b60008281526078602052604090205460ff16151560011462001d345760405162461bcd60e51b81526020600482015260076024820152662352413a30333360c81b6044820152606401620009e1565b6000828152607860209081526040808320805460ff191690556070909152812080546001600160a01b03191690556079906001600160a01b0383161562001d7c578262001d89565b606c546001600160a01b03165b6001600160a01b0316815260208082019290925260409081016000908120805463ffffffff1916815560010155805184815233928101929092527f9d181adb70e733f5235f839c1eed929407ea8526e41d01f49b9fef703e78dddf91015b60405180910390a15050565b6002600154141562001e195760405162461bcd60e51b8152600401620009e190620041e0565b60026001556001600160a01b03811662001e605760405162461bcd60e51b815260206004820152600760248201526623524c3a30303760c81b6044820152606401620009e1565b6000831162001e9c5760405162461bcd60e51b815260206004820152600760248201526611a9261d18181960c91b6044820152606401620009e1565b3360009081526075602090815260408083206001600160a01b03861684529091529020548381101562001efc5760405162461bcd60e51b8152602060048201526007602482015266046a498746060760cb1b6044820152606401620009e1565b3360009081526075602090815260408083206001600160a01b03871684529091529020848203905562001f3183838662002c27565b604080516001600160a01b03848116825285166020820152808201869052336060820181905291517f63b05915120b3d5a231e7c3625a411c15b2a79c35e3b1432a4f1ea95468cc6349181900360800190a25050600180555050565b6020828101803560008181526070909352604090922080546001600160a01b0319166001600160a01b0385161790557fd6f882d8fd8cc867bb57db3880bc4ad0b9b84689b57bba1b51feec7be397e3c2919062001feb908562003e1e565b6040805192835263ffffffff90911660208301526001600160a01b0384169082015233606082015260800162001de7565b600080826001600160a01b038516620020ea578334146200206a5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401620009e1565b606c60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015620020bb57600080fd5b505af1158015620020d0573d6000803e3d6000fd5b5050606c546001600160a01b031697506200221f92505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa15801562002132573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002158919062004217565b90503415620021945760405162461bcd60e51b815260206004820152600760248201526611aa209d18181b60c91b6044820152606401620009e1565b620021a2863330886200312a565b6040516370a0823160e01b815230600482015281906001600160a01b038816906370a0823190602401602060405180830381865afa158015620021e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200220f919062004217565b6200221b919062003e88565b9150505b84925090505b9250929050565b6001600160a01b03821660009081526079602090815260408083208151808301909252805463ffffffff16825260010154918101829052829162002277578385925092505062002225565b606f5481516020830151604051631626cf1960e21b815263ffffffff909216600483015260248201526000916001600160a01b03169063589b3c6490604401602060405180830381865afa158015620022d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022fa919062004231565b9050856001600160a01b0316816001600160a01b031614156200232557848693509350505062002225565b6020808301516000908152607090915260409020546001600160a01b0316620023508782886200319d565b60405163d5914c4560e01b8152600481018790526001600160a01b038881166024830152838116604483015282169063d5914c45906064016020604051808303816000875af1158015620023a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023ce919062004217565b9791965090945050505050565b60006040518060600160405280856001600160a01b03168152602001846001600160a01b03168152602001838152506040516020016200241c91906200427f565b6040516020818303038152906040528051906020012090505b9392505050565b606b54620024569085906001600160a01b031685620032ba565b606b546001600160a01b031663adadc0dc8585896200247b8a6001600160a01b031690565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925263ffffffff16604483015260648201526001608482015260a4810185905260c4810184905260e401600060405180830381600087803b158015620024ea57600080fd5b505af1158015620024ff573d6000803e3d6000fd5b50505050505050505050565b6038805460ff191682151590811790915560006039556040519081527f868d89ead22a5d10f456845ac0014901d9af7203e71cf0892d70d9dc262c2fb99060200162000e1d565b60208083013560009081526078909152604090205460ff1615620025a35760405162461bcd60e51b815260206004820152600760248201526611a0a09d18199960c91b6044820152606401620009e1565b6020808301356000908152607882526040808220805460ff191660011790556001600160a01b03841682526079909252208290620025e28282620042bc565b50600090506001600160a01b03821615620025fe57816200260b565b606c546001600160a01b03165b602084810180356000818152607a909352604090922080546001600160a01b0319166001600160a01b0385161790559192507f42e28d2d3431c24c3f3b6e2623a169bd4a31dd1f66780c4499af54a28632779b916200266b908662003e1e565b6040805192835263ffffffff9190911660208301526001600160a01b038581168383015284166060830152336080830152519081900360a00190a1505050565b603380546001600160a01b038381166001600160a01b0319831681179093556000603581905560405191909216929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054610100900460ff166200272e5760405162461bcd60e51b8152600401620009e190620042eb565b62000f2e62003373565b600054610100900460ff16620027625760405162461bcd60e51b8152600401620009e190620042eb565b62000f2e620033a8565b80471015620027be5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401620009e1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146200280d576040519150601f19603f3d011682016040523d82523d6000602084013e62002812565b606091505b505090508062000f755760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401620009e1565b4260398190556040519081527fa78fdca214e4619ef34a695316d423f5b0d8274bc919d29733bf8f92ec8cbb7a906020015b60405180910390a1565b60408051608080820183528382526001600160a01b039687166020808401918252838501968752968816606093840190815284518089019690965290518816858501529451918401919091529251909416818301528351808203909201825260a001909252815191012090565b42603555603480546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b6000620029b862002997602089018962003b72565b620029a960408a0160208b0162003b72565b62000bde60408b018b62003e3e565b9050821562002aac576000868152607160205260409020546001600160a01b03161562002a115760405162461bcd60e51b815260206004820152600660248201526521656d70747960d01b6044820152606401620009e1565b6001600160a01b0380851660009081526075602090815260408083209389168352929052908120805484929062002a4a90849062003e88565b9091555050604080516060810182526001600160a01b038681168252602080830186815283850186815260008c8152607190935294909120925183546001600160a01b0319169216919091178255516001820155905160029091015562002b4b565b6000868152607360205260409020548062002af35760405162461bcd60e51b815260206004820152600660248201526508599bdd5b9960d21b6044820152606401620009e1565b62002b0f8662002b0760208b018b62003b72565b8585620028c7565b811462002b495760405162461bcd60e51b815260206004820152600760248201526621706172616d7360c81b6044820152606401620009e1565b505b50505050505050565b606f5460405163b9730eaf60e01b81526001600160a01b038481166004830152600092839283929091169063b9730eaf906024016040805180830381865afa15801562002ba5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002bcb919062004336565b6000818152607a60205260409020549092506001600160a01b039081169150861681141562002c0257848693509350505062002225565b6000828152607060205260409020546001600160a01b0316620023508782886200319d565b6001600160a01b03831662002c695760405162461bcd60e51b8152602060048201526007602482015266216e617469766560c81b6044820152606401620009e1565b606c546001600160a01b038481169116141562002cec57606c54604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801562002cc757600080fd5b505af115801562002cdc573d6000803e3d6000fd5b5050505062000f7582826200276c565b62000f75838383620033d8565b336001600160a01b038616141562002d11576200131b565b62002d4f848460405160200162002d3892919091825263ffffffff16602082015260400190565b60405160208183030381529060405283836200340a565b6001600160a01b0316856001600160a01b03161462002d9c5760405162461bcd60e51b8152602060048201526008602482015267217274725f73696760c01b6044820152606401620009e1565b63ffffffff831662002dae576200131b565b6000606462002dc463ffffffff86164862004367565b62002dd0919062004389565b6001600160a01b03871660009081526076602052604081208054929350839290919062002dff90849062003e88565b9091555062002e11905033826200276c565b505050505050565b6036805460ff191682151590811790915560006037556040519081527f243ebbb2f905234bbf0556bb38e1f7c23b09ffd2e441a16e58b844eb2ab7a3979060200162000e1d565b6001600160a01b03811662002ea25760405162461bcd60e51b815260206004820152600760248201526623414c3a30303160c81b6044820152606401620009e1565b6000831162002ede5760405162461bcd60e51b815260206004820152600760248201526611a0a61d18181960c91b6044820152606401620009e1565b606f546000906001600160a01b039081169063f15376869085161562002f05578462002f12565b606c546001600160a01b03165b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016040805180830381865afa15801562002f56573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f7c919062004336565b91505062002f8962000caf565b8062002fad57506001600160a01b03821660009081526077602052604090205460ff165b62002fe55760405162461bcd60e51b815260206004820152600760248201526623414c3a30303360c81b6044820152606401620009e1565b62002fef62001c97565b8062003009575060008181526078602052604090205460ff165b620030415760405162461bcd60e51b815260206004820152600760248201526608d0530e8c0c0d60ca1b6044820152606401620009e1565b6000806200305085876200201c565b6001600160a01b0380871660009081526075602090815260408083209386168352929052908120805493955091935083926200308e90849062003fed565b9091555050604080516001600160a01b03808716825284166020820152908101849052606081018290523360808201527fc30593c06911f2f2fc32a69df3a28e4a0b116d8d461b47a005ae4d28cd49282b9060a00160405180910390a1505050505050565b4260378190556040519081527fa52048c5f468d21a62e4644ac4db19bcaa1a20f0cf37d163ba49c7217d35feb890602001620028bd565b6040516001600160a01b0380851660248301528316604482015260648101829052620031979085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152620034b4565b50505050565b8015806200321b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015620031f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003219919062004217565b155b620032885760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401620009e1565b6040516001600160a01b03831660248201526044810182905262000f7590849063095ea7b360e01b906064016200315f565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156200330c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003332919062004217565b6200333e919062003fed565b6040516001600160a01b0385166024820152604481018290529091506200319790859063095ea7b360e01b906064016200315f565b600054610100900460ff166200339d5760405162461bcd60e51b8152600401620009e190620042eb565b62000f2e33620026ab565b600054610100900460ff16620033d25760405162461bcd60e51b8152600401620009e190620042eb565b60018055565b6040516001600160a01b03831660248201526044810182905262000f7590849063a9059cbb60e01b906064016200315f565b6000620034ac6200346f85805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506200358d92505050565b949350505050565b60006200350b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620035b59092919063ffffffff16565b80519091501562000f7557808060200190518101906200352c9190620043ac565b62000f755760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620009e1565b60008060006200359e8585620035c6565b91509150620035ad816200363c565b509392505050565b6060620034ac84846000856200380f565b600080825160411415620036015760208301516040840151606085015160001a620035f4878285856200394a565b9450945050505062002225565b8251604014156200362f57602083015160408401516200362386838362003a3f565b93509350505062002225565b5060009050600262002225565b6000816004811115620036535762003653620043ca565b14156200365d5750565b6001816004811115620036745762003674620043ca565b1415620036c45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401620009e1565b6002816004811115620036db57620036db620043ca565b14156200372b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401620009e1565b6003816004811115620037425762003742620043ca565b14156200379d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401620009e1565b6004816004811115620037b457620037b4620043ca565b14156200165f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401620009e1565b606082471015620038725760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620009e1565b6001600160a01b0385163b620038cb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620009e1565b600080866001600160a01b03168587604051620038e99190620043e0565b60006040518083038185875af1925050503d806000811462003928576040519150601f19603f3d011682016040523d82523d6000602084013e6200392d565b606091505b50915091506200393f82828662003a7c565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111562003983575060009050600362003a36565b8460ff16601b141580156200399c57508460ff16601c14155b15620039af575060009050600462003a36565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801562003a04573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811662003a2f5760006001925092505062003a36565b9150600090505b94509492505050565b6000806001600160ff1b0383168162003a5e60ff86901c601b62003fed565b905062003a6e878288856200394a565b935093505050935093915050565b6060831562003a8d57508162002435565b82511562003a9e5782518084602001fd5b8160405162461bcd60e51b8152600401620009e19190620043f4565b610bea806200440a83390190565b60006040828403121562003adb57600080fd5b50919050565b6001600160a01b03811681146200165f57600080fd5b6000806060838503121562003b0b57600080fd5b62003b17848462003ac8565b9150604083013562003b298162003ae1565b809150509250929050565b60006020828403121562003b4757600080fd5b813567ffffffffffffffff81111562003b5f57600080fd5b8201606081850312156200243557600080fd5b60006020828403121562003b8557600080fd5b8135620024358162003ae1565b60006020828403121562003ba557600080fd5b5035919050565b6000806040838503121562003bc057600080fd5b823562003bcd8162003ae1565b9150602083013562003b298162003ae1565b60008060006080848603121562003bf557600080fd5b62003c01858562003ac8565b9250604084013562003c138162003ae1565b9150606084013562003c258162003ae1565b809150509250925092565b6000806000806080858703121562003c4757600080fd5b84359350602085013562003c5b8162003ae1565b9250604085013562003c6d8162003ae1565b9150606085013562003c7f8162003ae1565b939692955090935050565b6000806040838503121562003c9e57600080fd5b82359150602083013562003b298162003ae1565b600080600080600060a0868803121562003ccb57600080fd5b85359450602086013562003cdf8162003ae1565b9350604086013562003cf18162003ae1565b94979396509394606081013594506080013592915050565b60006020828403121562003d1c57600080fd5b813567ffffffffffffffff81111562003d3457600080fd5b820160e081850312156200243557600080fd5b60008060006060848603121562003d5d57600080fd5b83359250602084013562003d718162003ae1565b9150604084013562003c258162003ae1565b602080825260079082015266234f4f3a30323960c81b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600060001982141562003dd15762003dd162003da4565b5060010190565b60008235609e1983360301811262003def57600080fd5b9190910192915050565b63ffffffff811681146200165f57600080fd5b803562003e198162003df9565b919050565b60006020828403121562003e3157600080fd5b8135620024358162003df9565b6000808335601e1984360301811262003e5657600080fd5b83018035915067ffffffffffffffff82111562003e7257600080fd5b6020019150368190038213156200222557600080fd5b60008282101562003e9d5762003e9d62003da4565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000813562003eda8162003ae1565b6001600160a01b03908116845260208301359062003ef88262003ae1565b166020840152604082013536839003601e1901811262003f1757600080fd5b8201803567ffffffffffffffff81111562003f3157600080fd5b80360384131562003f4157600080fd5b60a0604086015262003f5b60a08601826020850162003ea2565b91505062003f6c6060840162003e0c565b63ffffffff16606085015262003f856080840162003e0c565b63ffffffff81166080860152509392505050565b60e08152600062003fae60e083018a62003ecb565b6001600160a01b0398891660208401529688166040830152506060810194909452608084019290925260a083015290921660c090920191909152919050565b6000821982111562004003576200400362003da4565b500190565b8781526001600160a01b0387811660208301528681166040830152851660608201526080810184905260c060a082018190526000906200404c908301848662003ea2565b9998505050505050505050565b8051801515811462003e1957600080fd5b634e487b7160e01b600052604160045260246000fd5b60005b838110156200409d57818101518382015260200162004083565b83811115620031975750506000910152565b600080600060608486031215620040c557600080fd5b620040d08462004059565b9250620040e06020850162004059565b9150604084015167ffffffffffffffff80821115620040fe57600080fd5b818601915086601f8301126200411357600080fd5b8151818111156200412857620041286200406a565b604051601f8201601f19908116603f011681019083821181831017156200415357620041536200406a565b816040528281528960208487010111156200416d57600080fd5b6200418083602083016020880162004080565b80955050505050509250925092565b60e081526000620041a460e083018a62003ecb565b6020830198909852506001600160a01b0395861660408201529385166060850152608084019290925260a083015290911660c090910152919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156200422a57600080fd5b5051919050565b6000602082840312156200424457600080fd5b8151620024358162003ae1565b600081518084526200426b81602086016020860162004080565b601f01601f19169290920160200192915050565b60208152600060018060a01b03808451166020840152806020850151166040840152506040830151606080840152620034ac608084018262004251565b8135620042c98162003df9565b63ffffffff811663ffffffff1983541617825550602082013560018201555050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600080604083850312156200434a57600080fd5b8251620043578162003df9565b6020939093015192949293505050565b600081600019048311821515161562004384576200438462003da4565b500290565b600082620043a757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215620043bf57600080fd5b620024358262004059565b634e487b7160e01b600052602160045260246000fd5b6000825162003def81846020870162004080565b6020815260006200243560208301846200425156fe60a060405234801561001057600080fd5b50604051610bea380380610bea83398101604081905261002f91610045565b60016000556001600160a01b0316608052610075565b60006020828403121561005757600080fd5b81516001600160a01b038116811461006e57600080fd5b9392505050565b608051610b55610095600039600081816048015260a90152610b556000f3fe6080604052600436106100295760003560e01c806396f32fb81461002e578063cf9a360414610077575b600080fd5b34801561003a57600080fd5b506040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020015b60405180910390f35b61008a6100853660046108b0565b610099565b60405161006e939291906109c6565b6000806060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101065760405162461bcd60e51b8152602060048201526008602482015267234f544d3a30323760c01b60448201526064015b60405180910390fd5b6001600160a01b038816158061012157610121898b89610224565b600060606001600160a01b038c163b158015906101a9578c6001600160a01b03168461014e576000610150565b8a5b8a8a6040516101609291906109f2565b60006040518083038185875af1925050503d806000811461019d576040519150601f19603f3d011682016040523d82523d6000602084013e6101a2565b606091505b5090935091505b826101c9576101b98c8c8c610274565b836101c9576101c98c8e8c610298565b8d7f03196b76502b81bbf14393f8b5ed67dff323f1f86667b064820f1fdf293686a18e8e8e8e8e8e898b8a60405161020999989796959493929190610a02565b60405180910390a2919d919c509a5098505050505050505050565b6001600160a01b0383166102645760405162461bcd60e51b815260206004820152600760248201526608d2504e8c0ccd60ca1b60448201526064016100fd565b61026f8383836102e3565b505050565b6001600160a01b0383161561028e5761026f8383836103ce565b61026f82826103d9565b6001600160a01b0383166102d85760405162461bcd60e51b815260206004820152600760248201526608d1104e8c0ccd60ca1b60448201526064016100fd565b61026f8383836103e7565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103589190610a8f565b6103629190610aa8565b6040516001600160a01b0385166024820152604481018290529091506103c890859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526104fa565b50505050565b61026f8383836105cc565b6103e382826105fc565b5050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015610437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045b9190610a8f565b9050818110156104bf5760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e63652062604482015268656c6f77207a65726f60b81b60648201526084016100fd565b6040516001600160a01b038416602482015282820360448201819052906104f390869063095ea7b360e01b90606401610391565b5050505050565b600061054f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107159092919063ffffffff16565b80519091501561026f578080602001905181019061056d9190610ace565b61026f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100fd565b6040516001600160a01b03831660248201526044810182905261026f90849063a9059cbb60e01b90606401610391565b8047101561064c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016100fd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610699576040519150601f19603f3d011682016040523d82523d6000602084013e61069e565b606091505b505090508061026f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016100fd565b6060610724848460008561072e565b90505b9392505050565b60608247101561078f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100fd565b6001600160a01b0385163b6107e65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100fd565b600080866001600160a01b031685876040516108029190610af0565b60006040518083038185875af1925050503d806000811461083f576040519150601f19603f3d011682016040523d82523d6000602084013e610844565b606091505b509150915061085482828661085f565b979650505050505050565b6060831561086e575081610727565b82511561087e5782518084602001fd5b8160405162461bcd60e51b81526004016100fd9190610b0c565b6001600160a01b03811681146108ad57600080fd5b50565b600080600080600080600060c0888a0312156108cb57600080fd5b8735965060208801356108dd81610898565b955060408801356108ed81610898565b945060608801356108fd81610898565b93506080880135925060a088013567ffffffffffffffff8082111561092157600080fd5b818a0191508a601f83011261093557600080fd5b81358181111561094457600080fd5b8b602082850101111561095657600080fd5b60208301945080935050505092959891949750929550565b60005b83811015610989578181015183820152602001610971565b838111156103c85750506000910152565b600081518084526109b281602086016020860161096e565b601f01601f19169290920160200192915050565b831515815282151560208201526060604082015260006109e9606083018461099a565b95945050505050565b8183823760009101908152919050565b6001600160a01b038a811682528981166020830152881660408201526060810187905261010060808201819052810185905260006101208688828501376000838801820152601f8701601f19168301838103820160a0850152610a678183018861099a565b9250505083151560c0830152610a8160e083018415159052565b9a9950505050505050505050565b600060208284031215610aa157600080fd5b5051919050565b60008219821115610ac957634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610ae057600080fd5b8151801515811461072757600080fd5b60008251610b0281846020870161096e565b9190910192915050565b602081526000610727602083018461099a56fea26469706673582212201e02c2ccece5754bc449014383bcf1f525dd0ccb14ec95f7a21edda9b52e205964736f6c634300080b0033a2646970667358221220d8ead213e6a330abe1d50afb9e17de7af8bb1ebdb06ea3dbe62bb95c685a322c64736f6c634300080b0033",
  "devdoc": {
    "events": {
      "AssetAdded(bytes32,uint32,address,address,address)": {
        "params": {
          "adoptedAsset": "- The address of the adopted (user-expected) asset",
          "caller": "- The account that called the function",
          "canonicalId": "- The canonical identifier of the token the local <> adopted AMM is for",
          "domain": "- The domain of the canonical token for the local <> adopted amm",
          "supportedAsset": "- The address of the whitelisted asset. If the native asset is to be whitelisted, the address of the wrapped version will be stored"
        }
      },
      "AssetRemoved(bytes32,address)": {
        "params": {
          "caller": "- The account that called the function",
          "canonicalId": "- The canonical identifier of the token removed"
        }
      },
      "Fulfilled(bytes32,address,address,(address,address,bytes,uint32,uint32),uint256,address,address,uint256,uint256,address)": {
        "details": "`fulfill` may be called when providing fast liquidity *or* when processing a reconciled transaction",
        "params": {
          "caller": "- The account that called the function",
          "localAmount": "- The amount that was provided by the bridge",
          "localAsset": "- The asset that was provided by the bridge",
          "nonce": "- The nonce of the origin domain contract. Used to create the unique identifier for the transaction",
          "params": "- The CallParams provided to the function",
          "recipient": "- The CallParams.recipient provided, created as indexed parameter",
          "router": "- The router that supplied fast liquidity, if applicable",
          "transactingAmount": "- The amount of transacting asset the recipient receives or the external call is executed with",
          "transactingAsset": "- The asset the recipient gets or the external call is executed with. Should be the adopted asset on that chain.",
          "transactionId": "- The unique identifier of the crosschain transaction"
        }
      },
      "LiquidityAdded(address,address,bytes32,uint256,address)": {
        "params": {
          "amount": "- The amount of liquidity added",
          "caller": "- The account that called the function",
          "local": "- The address of the token added (all liquidity held in local asset)",
          "router": "- The address of the router the funds were credited to"
        }
      },
      "LiquidityRemoved(address,address,address,uint256,address)": {
        "params": {
          "amount": "- The amount of liquidity withdrawn",
          "caller": "- The account that called the function",
          "local": "- The address of the token withdrawn",
          "recipient": "- The address the funds were withdrawn to",
          "router": "- The router you are removing liquidity from"
        }
      },
      "Prepared(bytes32,address,(address,address,bytes,uint32,uint32),address,address,uint256,uint256,uint256,address)": {
        "params": {
          "caller": "- The account that called the function",
          "localAmount": "- The amount sent over the bridge (initialAmount with slippage)",
          "localAsset": "- The asset sent over the bridge. Will be the local asset of nomad that corresponds to the provided `transactingAsset`",
          "nonce": "- The nonce of the origin domain contract. Used to create the unique identifier for the transaction",
          "params": "- The CallParams provided to the function",
          "recipient": "- The CallParams.recipient provided, created as indexed parameter",
          "transactingAmount": "- The amount of transacting asset the tx prepared with",
          "transactingAsset": "- The asset the caller sent with the transaction. Can be the adopted, canonical, or the representational asset",
          "transactionId": "- The unique identifier of the crosschain transaction"
        }
      },
      "Reconciled(bytes32,address,address,address,uint256,bytes32,(address,uint256,bytes32),address)": {
        "params": {
          "caller": "- The account that called the function",
          "externalHash": "- Hash of the `ExternalCall` passed through bridge",
          "fulfilled": "- Record of the `FulfilledTransaction` stored onchain if fast liquidity is provided",
          "localAmount": "- The amount that was provided by the bridge",
          "localAsset": "- The asset that was provided by the bridge",
          "recipient": "- The CallParams.recipient provided, created as indexed parameter",
          "router": "- The router that supplied fast liquidity, if applicable",
          "transactionId": "- The unique identifier of the crosschain transaction"
        }
      },
      "RouterAdded(address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "router": "- The address of the added router"
        }
      },
      "RouterRemoved(address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "router": "- The address of the removed router"
        }
      },
      "StableSwapAdded(bytes32,uint32,address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "canonicalId": "- The canonical identifier of the token the local <> adopted AMM is for",
          "domain": "- The domain of the canonical token for the local <> adopted amm",
          "swapPool": "- The address of the AMM"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,address)": {
        "details": "The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.",
        "params": {
          "amount": "- The amount of liquidity to add for the router",
          "local": "- The address of the asset you're adding liquidity for. If adding liquidity of the native asset, routers may use `address(0)` or the wrapped asset"
        }
      },
      "addLiquidityFor(uint256,address,address)": {
        "details": "The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.",
        "params": {
          "amount": "- The amount of liquidity to add for the router",
          "local": "- The address of the asset you're adding liquidity for. If adding liquidity of the native asset, routers may use `address(0)` or the wrapped asset",
          "router": "The router you are adding liquidity on behalf of"
        }
      },
      "addRelayerFees(address)": {
        "params": {
          "router": "- The router to credit"
        }
      },
      "addRouter(address)": {
        "params": {
          "router": "Router address to add"
        }
      },
      "fulfill(((address,address,bytes,uint32,uint32),address,address,uint32,uint256,uint256,bytes))": {
        "details": "Will store the `FulfilledTransaction` if fast liquidity is provided, or assert the hash of the `ReconciledTransaction` when using bridge liquidity",
        "params": {
          "_args": "- The `FulfillArgs` for the transaction"
        },
        "returns": {
          "_0": "The transaction id of the crosschain transaction"
        }
      },
      "prepare(((address,address,bytes,uint32,uint32),address,uint256))": {
        "details": "This contract must have approval to transfer the adopted assets. They are then swapped to the local nomad assets via the configured AMM and sent over the bridge router.",
        "params": {
          "_args": "- The PrepareArgs"
        },
        "returns": {
          "_0": "The transaction id of the crosschain transaction"
        }
      },
      "reconcile(bytes32,address,address,uint256,bytes32)": {
        "details": "If fast liquidity was provided, the `amount` and `externalHash` are asserted against the `FulfilledTransaction` struct stored onchain. If no fast liqudity was provided, the hash of the `ReconciledTransaction` is stored onchain to enforce correctness when `fulfill` is called",
        "params": {
          "_externalHash": "- The hash of the `ExternalCall` passed through the bridge",
          "_id": "- The transaction id",
          "_local": "- The address of the asset delivered by the bridge",
          "_recipient": "- The address that will receive funds on the destination domain"
        }
      },
      "removeAssetId(bytes32,address)": {
        "params": {
          "adoptedAssetId": "- Corresponding adopted asset to remove",
          "canonicalId": "- Token id to remove"
        }
      },
      "removeLiquidity(uint256,address,address)": {
        "params": {
          "amount": "- The amount of liquidity to remove for the router",
          "local": "- The address of the asset you're removing liquidity from. If removing liquidity of the native asset, routers may use `address(0)` or the wrapped asset",
          "recipient": "The address that will receive the liquidity being removed"
        }
      },
      "removeRelayerFees(uint256,address)": {
        "details": "Must be called by the router you are decrementing relayer fees for",
        "params": {
          "amount": "- The amount of relayer fee to remove",
          "recipient": "- Who to send funds to"
        }
      },
      "removeRouter(address)": {
        "params": {
          "router": "Router address to remove"
        }
      },
      "setupAsset((uint32,bytes32),address,address)": {
        "details": "When whitelisting the canonical asset, all representational assets would be whitelisted as well. In the event you have a different adopted asset (i.e. PoS USDC on polygon), you should *not* whitelist the adopted asset. The stable swap pool address used should allow you to swap between the local <> adopted asset",
        "params": {
          "adoptedAssetId": "- The used asset id for this domain (i.e. PoS USDC for polygon)",
          "canonical": "- The canonical asset to add by id and domain. All representations will be whitelisted as well",
          "stableSwapPool": "- Address of the pool to swap adopted <> local asset"
        }
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      },
      "adoptedToCanonical": {
        "details": "If the adopted asset is the native asset, the keyed address will be the wrapped asset address"
      },
      "adoptedToLocalPools": {
        "details": "Swaps for an adopted asset <> nomad local asset (i.e. POS USDC <> madUSDC on polygon)"
      },
      "approvedAssets": {
        "details": "Mapping is keyed on the canonical token identifier matching what is stored in the token registry"
      },
      "canonicalToAdopted": {
        "details": "If the adopted asset is the native asset, the stored address will be the wrapped asset address"
      },
      "domain": {
        "details": "Must match the nomad domain, which is distinct from the \"chainId\""
      },
      "nonce": {
        "details": "Assigned at first interaction (prepare on origin domain);"
      },
      "reconciledTransactions": {
        "details": "This information is stored onchain if the transaction has not been fulfilled at the time of reconcile"
      },
      "routedTransactions": {
        "details": "This information is stored onchain if fast liquidity is provided"
      },
      "routedTransactionsGas": {
        "details": "This informaion is stored onchain if fast liquidity is provided"
      },
      "routerBalances": {
        "details": "Routers should always store liquidity that they can expect to receive via the bridge on this domain (the nomad local asset)"
      },
      "routerRelayerFees": {
        "details": "Right now, routers only store native asset onchain. TODO: allow for approved relaying assets"
      },
      "wrapper": {
        "details": "Needed because the nomad only handles ERC20 assets"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(bytes32,uint32,address,address,address)": {
        "notice": "Emitted when a new asset is added"
      },
      "AssetRemoved(bytes32,address)": {
        "notice": "Emitted when an asset is removed from whitelists"
      },
      "Fulfilled(bytes32,address,address,(address,address,bytes,uint32,uint32),uint256,address,address,uint256,uint256,address)": {
        "notice": "Emitted when `fulfill` is called on the destination chain"
      },
      "LiquidityAdded(address,address,bytes32,uint256,address)": {
        "notice": "Emitted when a router adds liquidity to the contract"
      },
      "LiquidityRemoved(address,address,address,uint256,address)": {
        "notice": "Emitted when a router withdraws liquidity from the contract"
      },
      "Prepared(bytes32,address,(address,address,bytes,uint32,uint32),address,address,uint256,uint256,uint256,address)": {
        "notice": "Emitted when `prepare` is called on the origin domain"
      },
      "Reconciled(bytes32,address,address,address,uint256,bytes32,(address,uint256,bytes32),address)": {
        "notice": "Emitted when `reconciled` is called by the bridge on the destination domain"
      },
      "RouterAdded(address,address)": {
        "notice": "Emitted when a new router is added"
      },
      "RouterRemoved(address,address)": {
        "notice": "Emitted when an existing router is removed"
      },
      "StableSwapAdded(bytes32,uint32,address,address)": {
        "notice": "Emitted when a new stable-swap AMM is added for the local <> adopted token"
      }
    },
    "kind": "user",
    "methods": {
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "addLiquidity(uint256,address)": {
        "notice": "This is used by any router to increase their available liquidity for a given asset."
      },
      "addLiquidityFor(uint256,address,address)": {
        "notice": "This is used by anyone to increase a router's available liquidity for a given asset."
      },
      "addRelayerFees(address)": {
        "notice": "Used to add relayer fees in the native asset"
      },
      "addRouter(address)": {
        "notice": "Used to add routers that can transact crosschain"
      },
      "addStableSwapPool((uint32,bytes32),address)": {
        "notice": "Adds a stable swap pool for the local <> adopted asset."
      },
      "adoptedToCanonical(address)": {
        "notice": "Mapping of canonical to adopted assets on this domain"
      },
      "adoptedToLocalPools(bytes32)": {
        "notice": "Mapping holding the AMMs for swapping in and out of local assets"
      },
      "approvedAssets(bytes32)": {
        "notice": "Mapping of whitelisted assets on same domain as contract"
      },
      "approvedRouters(address)": {
        "notice": "Mapping of whitelisted router addresses."
      },
      "assetOwnershipTimestamp()": {
        "notice": "Returns the timestamp when asset ownership was last proposed to be renounced"
      },
      "bridgeRouter()": {
        "notice": "The local nomad bridge router"
      },
      "canonicalToAdopted(bytes32)": {
        "notice": "Mapping of adopted to canonical on this domain"
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "domain()": {
        "notice": "The domain this contract exists on"
      },
      "fulfill(((address,address,bytes,uint32,uint32),address,address,uint32,uint256,uint256,bytes))": {
        "notice": "This function is called on the destination chain when the bridged asset should be swapped into the adopted asset and the external call executed. Can be used before reconcile (when providing fast liquidity) or after reconcile (when using liquidity from the bridge)"
      },
      "interpreter()": {
        "notice": "The external contract that will execute crosschain calldata"
      },
      "isAssetOwnershipRenounced()": {
        "notice": "Indicates if the ownership of the asset whitelist has been renounced"
      },
      "isRouterOwnershipRenounced()": {
        "notice": "Indicates if the ownership of the router whitelist has been renounced"
      },
      "nonce()": {
        "notice": "Nonce for the contract, used to keep unique transaction ids."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "prepare(((address,address,bytes,uint32,uint32),address,uint256))": {
        "notice": "This function is called by a user who is looking to bridge funds"
      },
      "proposeAssetOwnershipRenunciation()": {
        "notice": "Indicates if the ownership of the asset whitelist has been renounced"
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposeRouterOwnershipRenunciation()": {
        "notice": "Indicates if the ownership of the router whitelist has been renounced"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "reconcile(bytes32,address,address,uint256,bytes32)": {
        "notice": "This function is called by the bridge router to pass through the information provided by the user on prepare."
      },
      "reconciledTransactions(bytes32)": {
        "notice": "Stores hash of the `ReconciledTransaction` (all information passed through bridge) on `reconcile`"
      },
      "removeAssetId(bytes32,address)": {
        "notice": "Used to remove assets from the whitelist"
      },
      "removeLiquidity(uint256,address,address)": {
        "notice": "This is used by any router to decrease their available liquidity for a given asset."
      },
      "removeRelayerFees(uint256,address)": {
        "notice": "Used to remove relayer fee in the native asset"
      },
      "removeRouter(address)": {
        "notice": "Used to remove routers that can transact crosschain"
      },
      "renounceAssetOwnership()": {
        "notice": "Indicates if the ownership of the asset whitelist has been renounced"
      },
      "renounceOwnership()": {
        "notice": "Renounces ownership of the contract after a delay"
      },
      "renounceRouterOwnership()": {
        "notice": "Indicates if the ownership of the asset whitelist has been renounced"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "routedTransactions(bytes32)": {
        "notice": "Stores the transactionId => FulfilledTransaction mapping"
      },
      "routedTransactionsGas(bytes32)": {
        "notice": "Stores the transactionId => GasInfo mapping to track gas used on `fulfill`"
      },
      "routerBalances(address,address)": {
        "notice": "Mapping of router to available balance of an asset"
      },
      "routerOwnershipTimestamp()": {
        "notice": "Returns the timestamp when router ownership was last proposed to be renounced"
      },
      "routerRelayerFees(address)": {
        "notice": "Mapping of router to available relayer fee"
      },
      "setupAsset((uint32,bytes32),address,address)": {
        "notice": "Used to add supported assets. This is an admin only function"
      },
      "tokenRegistry()": {
        "notice": "The local nomad token registry"
      },
      "wrapper()": {
        "notice": "The address of the wrapper for the native asset on this domain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 322,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 366,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6023,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 6025,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_proposed",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 6027,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 6029,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_routerOwnershipRenounced",
        "offset": 0,
        "slot": "54",
        "type": "t_bool"
      },
      {
        "astId": 6031,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_routerOwnershipTimestamp",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 6033,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_assetOwnershipRenounced",
        "offset": 0,
        "slot": "56",
        "type": "t_bool"
      },
      {
        "astId": 6035,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_assetOwnershipTimestamp",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 6524,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7533,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "bridgeRouter",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(BridgeRouter)21701"
      },
      {
        "astId": 7537,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "wrapper",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IWrapped)9654"
      },
      {
        "astId": 7540,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "nonce",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 7544,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "interpreter",
        "offset": 0,
        "slot": "110",
        "type": "t_contract(IFulfillInterpreter)9371"
      },
      {
        "astId": 7548,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "tokenRegistry",
        "offset": 0,
        "slot": "111",
        "type": "t_contract(TokenRegistry)23029"
      },
      {
        "astId": 7554,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "adoptedToLocalPools",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_bytes32,t_contract(IStableSwap)9643)"
      },
      {
        "astId": 7560,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "routedTransactions",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_bytes32,t_struct(FulfilledTransaction)7354_storage)"
      },
      {
        "astId": 7566,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "routedTransactionsGas",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_bytes32,t_struct(GasInfo)7359_storage)"
      },
      {
        "astId": 7571,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "reconciledTransactions",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 7574,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "domain",
        "offset": 0,
        "slot": "116",
        "type": "t_uint256"
      },
      {
        "astId": 7581,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "routerBalances",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7586,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "routerRelayerFees",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7591,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "approvedRouters",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7596,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "approvedAssets",
        "offset": 0,
        "slot": "120",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 7602,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "adoptedToCanonical",
        "offset": 0,
        "slot": "121",
        "type": "t_mapping(t_address,t_struct(TokenId)20318_storage)"
      },
      {
        "astId": 7607,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "canonicalToAdopted",
        "offset": 0,
        "slot": "122",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 9147,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "123",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BridgeRouter)21701": {
        "encoding": "inplace",
        "label": "contract BridgeRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IFulfillInterpreter)9371": {
        "encoding": "inplace",
        "label": "contract IFulfillInterpreter",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwap)9643": {
        "encoding": "inplace",
        "label": "contract IStableSwap",
        "numberOfBytes": "20"
      },
      "t_contract(IWrapped)9654": {
        "encoding": "inplace",
        "label": "contract IWrapped",
        "numberOfBytes": "20"
      },
      "t_contract(TokenRegistry)23029": {
        "encoding": "inplace",
        "label": "contract TokenRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(TokenId)20318_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BridgeMessage.TokenId)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenId)20318_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_contract(IStableSwap)9643)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract IStableSwap)",
        "numberOfBytes": "32",
        "value": "t_contract(IStableSwap)9643"
      },
      "t_mapping(t_bytes32,t_struct(FulfilledTransaction)7354_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TransactionManager.FulfilledTransaction)",
        "numberOfBytes": "32",
        "value": "t_struct(FulfilledTransaction)7354_storage"
      },
      "t_mapping(t_bytes32,t_struct(GasInfo)7359_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TransactionManager.GasInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GasInfo)7359_storage"
      },
      "t_struct(FulfilledTransaction)7354_storage": {
        "encoding": "inplace",
        "label": "struct TransactionManager.FulfilledTransaction",
        "members": [
          {
            "astId": 7349,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7351,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7353,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "externalHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(GasInfo)7359_storage": {
        "encoding": "inplace",
        "label": "struct TransactionManager.GasInfo",
        "members": [
          {
            "astId": 7356,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "gasUsed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7358,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "gasPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenId)20318_storage": {
        "encoding": "inplace",
        "label": "struct BridgeMessage.TokenId",
        "members": [
          {
            "astId": 20315,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "domain",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 20317,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}