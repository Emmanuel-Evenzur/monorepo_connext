/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IBridgeRouterInterface extends utils.Interface {
  functions: {
    "enrollCustom(uint32,bytes32,address)": FunctionFragment;
    "migrate(address)": FunctionFragment;
    "send(address,uint256,uint32,bytes32,bool,bytes32)": FunctionFragment;
    "setConnext(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "enrollCustom" | "migrate" | "send" | "setConnext"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "enrollCustom",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "migrate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [string, BigNumberish, BigNumberish, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setConnext", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "enrollCustom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConnext", data: BytesLike): Result;

  events: {};
}

export interface IBridgeRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    enrollCustom(
      _domain: BigNumberish,
      _id: BytesLike,
      _custom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrate(
      _oldRepr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    send(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _recipient: BytesLike,
      _enableFast: boolean,
      _externalHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConnext(
      _connext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  enrollCustom(
    _domain: BigNumberish,
    _id: BytesLike,
    _custom: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrate(
    _oldRepr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  send(
    _token: string,
    _amount: BigNumberish,
    _destination: BigNumberish,
    _recipient: BytesLike,
    _enableFast: boolean,
    _externalHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConnext(
    _connext: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    enrollCustom(
      _domain: BigNumberish,
      _id: BytesLike,
      _custom: string,
      overrides?: CallOverrides
    ): Promise<void>;

    migrate(_oldRepr: string, overrides?: CallOverrides): Promise<void>;

    send(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _recipient: BytesLike,
      _enableFast: boolean,
      _externalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setConnext(_connext: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    enrollCustom(
      _domain: BigNumberish,
      _id: BytesLike,
      _custom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrate(
      _oldRepr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    send(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _recipient: BytesLike,
      _enableFast: boolean,
      _externalHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConnext(
      _connext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enrollCustom(
      _domain: BigNumberish,
      _id: BytesLike,
      _custom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      _oldRepr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _token: string,
      _amount: BigNumberish,
      _destination: BigNumberish,
      _recipient: BytesLike,
      _enableFast: boolean,
      _externalHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConnext(
      _connext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
