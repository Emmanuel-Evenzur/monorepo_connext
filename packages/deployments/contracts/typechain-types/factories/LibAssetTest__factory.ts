/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibAssetTest, LibAssetTestInterface } from "../LibAssetTest";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "decreaseERC20Allowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
    ],
    name: "getOwnBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseERC20Allowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
    ],
    name: "isNativeAsset",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFromERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferNativeAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b8c806100206000396000f3fe60806040526004361061007f5760003560e01c8063a7d2fdf61161004e578063a7d2fdf614610122578063b29fd85914610150578063cad1b11314610170578063dd71105d1461019057600080fd5b806305e968631461008b578063439e2e45146100c05780637f0128b2146100e25780639db5dbe41461010257600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a636600461099f565b6101b0565b60405190151581526020015b60405180910390f35b3480156100cc57600080fd5b506100e06100db3660046109bc565b6101c4565b005b3480156100ee57600080fd5b506100e06100fd3660046109fd565b6101d4565b34801561010e57600080fd5b506100e061011d3660046109bc565b6101e2565b34801561012e57600080fd5b5061014261013d36600461099f565b6101ed565b6040519081526020016100b7565b34801561015c57600080fd5b506100e061016b3660046109bc565b6101f8565b34801561017c57600080fd5b506100e061018b3660046109bc565b610203565b34801561019c57600080fd5b506100e06101ab366004610a29565b61020e565b60006001600160a01b038216155b92915050565b6101cf838383610296565b505050565b6101de82826102b6565b5050565b6101cf8383836102c0565b60006101be826102cb565b6101cf838383610350565b6101cf8383836103a0565b60405163dd71105d60e01b81526001600160a01b0380861660048301528085166024830152831660448201526064810182905273__$dbd733181c419d3a4fecdf184b0a29e7da$__9063dd71105d9060840160006040518083038186803b15801561027857600080fd5b505af415801561028c573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038316156102b0576101cf8383836102c0565b6101cf82825b6101de82826103eb565b6101cf838383610504565b60006001600160a01b03821615610349576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103449190610a7a565b6101be565b4792915050565b6001600160a01b0383166103955760405162461bcd60e51b815260206004820152600760248201526608d2504e8c0ccd60ca1b60448201526064015b60405180910390fd5b6101cf838383610567565b6001600160a01b0383166103e05760405162461bcd60e51b815260206004820152600760248201526608d1104e8c0ccd60ca1b604482015260640161038c565b6101cf83838361061f565b8047101561043b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161038c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610488576040519150601f19603f3d011682016040523d82523d6000602084013e61048d565b606091505b50509050806101cf5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161038c565b6040516001600160a01b0383166024820152604481018290526101cf90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610732565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dc9190610a7a565b6105e69190610a93565b6040516001600160a01b03851660248201526044810182905290915061061990859063095ea7b360e01b90606401610530565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190610a7a565b9050818110156106f75760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e63652062604482015268656c6f77207a65726f60b81b606482015260840161038c565b6040516001600160a01b0384166024820152828203604482018190529061072b90869063095ea7b360e01b90606401610530565b5050505050565b6000610787826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108049092919063ffffffff16565b8051909150156101cf57808060200190518101906107a59190610ab9565b6101cf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161038c565b6060610813848460008561081d565b90505b9392505050565b60608247101561087e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161038c565b6001600160a01b0385163b6108d55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161038c565b600080866001600160a01b031685876040516108f19190610b07565b60006040518083038185875af1925050503d806000811461092e576040519150601f19603f3d011682016040523d82523d6000602084013e610933565b606091505b509150915061094382828661094e565b979650505050505050565b6060831561095d575081610816565b82511561096d5782518084602001fd5b8160405162461bcd60e51b815260040161038c9190610b23565b6001600160a01b038116811461099c57600080fd5b50565b6000602082840312156109b157600080fd5b813561081681610987565b6000806000606084860312156109d157600080fd5b83356109dc81610987565b925060208401356109ec81610987565b929592945050506040919091013590565b60008060408385031215610a1057600080fd5b8235610a1b81610987565b946020939093013593505050565b60008060008060808587031215610a3f57600080fd5b8435610a4a81610987565b93506020850135610a5a81610987565b92506040850135610a6a81610987565b9396929550929360600135925050565b600060208284031215610a8c57600080fd5b5051919050565b60008219821115610ab457634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acb57600080fd5b8151801515811461081657600080fd5b60005b83811015610af6578181015183820152602001610ade565b838111156106195750506000910152565b60008251610b19818460208701610adb565b9190910192915050565b6020815260008251806020840152610b42816040850160208701610adb565b601f01601f1916919091016040019291505056fea2646970667358221220910011adcf8f7a5f61778e7d001bdc18b81884897d80f9b6ce1bf3a57efab38864736f6c634300080b0033";

type LibAssetTestConstructorParams =
  | [linkLibraryAddresses: LibAssetTestLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibAssetTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class LibAssetTest__factory extends ContractFactory {
  constructor(...args: LibAssetTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        LibAssetTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
    this.contractName = "LibAssetTest";
  }

  static linkBytecode(
    linkLibraryAddresses: LibAssetTestLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$dbd733181c419d3a4fecdf184b0a29e7da\\$__", "g"),
      linkLibraryAddresses["contracts/lib/LibAsset.sol:LibAsset"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibAssetTest> {
    return super.deploy(overrides || {}) as Promise<LibAssetTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibAssetTest {
    return super.attach(address) as LibAssetTest;
  }
  connect(signer: Signer): LibAssetTest__factory {
    return super.connect(signer) as LibAssetTest__factory;
  }
  static readonly contractName: "LibAssetTest";
  public readonly contractName: "LibAssetTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibAssetTestInterface {
    return new utils.Interface(_abi) as LibAssetTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibAssetTest {
    return new Contract(address, _abi, signerOrProvider) as LibAssetTest;
  }
}

export interface LibAssetTestLibraryAddresses {
  ["contracts/lib/LibAsset.sol:LibAsset"]: string;
}
