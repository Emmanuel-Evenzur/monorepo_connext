// @ts-nocheck
import { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import type { GetMeshOptions } from '@graphql-mesh/runtime';
import type { YamlConfig } from '@graphql-mesh/types';
import { PubSub } from '@graphql-mesh/utils';
import { DefaultLogger } from '@graphql-mesh/utils';
import MeshCache from "@graphql-mesh/cache-localforage";
import { fetch as fetchFn } from '@whatwg-node/fetch';

import { MeshResolvedSource } from '@graphql-mesh/runtime';
import { MeshTransform, MeshPlugin } from '@graphql-mesh/types';
import GraphqlHandler from "@graphql-mesh/graphql"
import PrefixTransform from "@graphql-mesh/transform-prefix";
import AutoPaginationTransform from "@graphprotocol/client-auto-pagination";
import StitchingMerger from "@graphql-mesh/merger-stitching";
import { printWithCache } from '@graphql-mesh/utils';
import { createMeshHTTPHandler, MeshHTTPHandler } from '@graphql-mesh/http';
import { getMesh, ExecuteMeshFn, SubscribeMeshFn, MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';
import { MeshStore, FsStoreStorageAdapter } from '@graphql-mesh/store';
import { path as pathModule } from '@graphql-mesh/cross-helpers';
import { ImportFn } from '@graphql-mesh/types';
import type { StableSwapMumbaiTypes } from './sources/StableSwap_Mumbai/types';
import type { StableSwapXdaiTypes } from './sources/StableSwap_Xdai/types';
import type { StableSwapArbitrumOneTypes } from './sources/StableSwap_ArbitrumOne/types';
import type { StableSwapBnbTypes } from './sources/StableSwap_Bnb/types';
import type { StableSwapOptimismTypes } from './sources/StableSwap_Optimism/types';
import type { StableSwapStagingGoerliTypes } from './sources/StableSwap_Staging_Goerli/types';
import type { StableSwapArbitrumGoerliTypes } from './sources/StableSwap_ArbitrumGoerli/types';
import type { StableSwapOptimismGoerliTypes } from './sources/StableSwap_OptimismGoerli/types';
import type { StableSwapStagingMumbaiTypes } from './sources/StableSwap_Staging_Mumbai/types';
import type { StableSwapStagingArbitrumGoerliTypes } from './sources/StableSwap_Staging_ArbitrumGoerli/types';
import type { StableSwapStagingOptimismGoerliTypes } from './sources/StableSwap_Staging_OptimismGoerli/types';
import type { StableSwapGoerliTypes } from './sources/StableSwap_Goerli/types';
import type { StableSwapPolygonTypes } from './sources/StableSwap_Polygon/types';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };



/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  mumbai_BigDecimal: any;
  BigInt: any;
  mumbai_Bytes: any;
  xdai_BigDecimal: any;
  xdai_Bytes: any;
  arbitrumone_BigDecimal: any;
  arbitrumone_Bytes: any;
  bnb_BigDecimal: any;
  bnb_Bytes: any;
  goerli_BigDecimal: any;
  goerli_Bytes: any;
  stagingoptimismgoerli_BigDecimal: any;
  stagingoptimismgoerli_Bytes: any;
  optimism_BigDecimal: any;
  optimism_Bytes: any;
  polygon_BigDecimal: any;
  polygon_Bytes: any;
  staginggoerli_BigDecimal: any;
  staginggoerli_Bytes: any;
  arbitrumgoerli_BigDecimal: any;
  arbitrumgoerli_Bytes: any;
  optimismgoerli_BigDecimal: any;
  optimismgoerli_Bytes: any;
  stagingmumbai_BigDecimal: any;
  stagingmumbai_Bytes: any;
  stagingarbitrumgoerli_BigDecimal: any;
  stagingarbitrumgoerli_Bytes: any;
};

export type Query = {
  mumbai_systemInfo?: Maybe<mumbai_SystemInfo>;
  mumbai_systemInfos: Array<mumbai_SystemInfo>;
  mumbai_pooledToken?: Maybe<mumbai_PooledToken>;
  mumbai_pooledTokens: Array<mumbai_PooledToken>;
  mumbai_stableSwap?: Maybe<mumbai_StableSwap>;
  mumbai_stableSwaps: Array<mumbai_StableSwap>;
  mumbai_stableSwapAddLiquidityEvent?: Maybe<mumbai_StableSwapAddLiquidityEvent>;
  mumbai_stableSwapAddLiquidityEvents: Array<mumbai_StableSwapAddLiquidityEvent>;
  mumbai_stableSwapRemoveLiquidityEvent?: Maybe<mumbai_StableSwapRemoveLiquidityEvent>;
  mumbai_stableSwapRemoveLiquidityEvents: Array<mumbai_StableSwapRemoveLiquidityEvent>;
  mumbai_stableSwapExchange?: Maybe<mumbai_StableSwapExchange>;
  mumbai_stableSwapExchanges: Array<mumbai_StableSwapExchange>;
  mumbai_swapDailyVolume?: Maybe<mumbai_SwapDailyVolume>;
  mumbai_swapDailyVolumes: Array<mumbai_SwapDailyVolume>;
  mumbai_swapHourlyVolume?: Maybe<mumbai_SwapHourlyVolume>;
  mumbai_swapHourlyVolumes: Array<mumbai_SwapHourlyVolume>;
  mumbai_swapWeeklyVolume?: Maybe<mumbai_SwapWeeklyVolume>;
  mumbai_swapWeeklyVolumes: Array<mumbai_SwapWeeklyVolume>;
  mumbai_stableSwapEvent?: Maybe<mumbai_StableSwapEvent>;
  mumbai_stableSwapEvents: Array<mumbai_StableSwapEvent>;
  mumbai_swapTradeVolume?: Maybe<mumbai_SwapTradeVolume>;
  mumbai_swapTradeVolumes: Array<mumbai_SwapTradeVolume>;
  /** Access to subgraph metadata */
  mumbai__meta?: Maybe<mumbai__Meta_>;
  xdai_systemInfo?: Maybe<xdai_SystemInfo>;
  xdai_systemInfos: Array<xdai_SystemInfo>;
  xdai_pooledToken?: Maybe<xdai_PooledToken>;
  xdai_pooledTokens: Array<xdai_PooledToken>;
  xdai_stableSwap?: Maybe<xdai_StableSwap>;
  xdai_stableSwaps: Array<xdai_StableSwap>;
  xdai_stableSwapAddLiquidityEvent?: Maybe<xdai_StableSwapAddLiquidityEvent>;
  xdai_stableSwapAddLiquidityEvents: Array<xdai_StableSwapAddLiquidityEvent>;
  xdai_stableSwapRemoveLiquidityEvent?: Maybe<xdai_StableSwapRemoveLiquidityEvent>;
  xdai_stableSwapRemoveLiquidityEvents: Array<xdai_StableSwapRemoveLiquidityEvent>;
  xdai_stableSwapExchange?: Maybe<xdai_StableSwapExchange>;
  xdai_stableSwapExchanges: Array<xdai_StableSwapExchange>;
  xdai_swapDailyVolume?: Maybe<xdai_SwapDailyVolume>;
  xdai_swapDailyVolumes: Array<xdai_SwapDailyVolume>;
  xdai_swapHourlyVolume?: Maybe<xdai_SwapHourlyVolume>;
  xdai_swapHourlyVolumes: Array<xdai_SwapHourlyVolume>;
  xdai_swapWeeklyVolume?: Maybe<xdai_SwapWeeklyVolume>;
  xdai_swapWeeklyVolumes: Array<xdai_SwapWeeklyVolume>;
  xdai_stableSwapEvent?: Maybe<xdai_StableSwapEvent>;
  xdai_stableSwapEvents: Array<xdai_StableSwapEvent>;
  xdai_swapTradeVolume?: Maybe<xdai_SwapTradeVolume>;
  xdai_swapTradeVolumes: Array<xdai_SwapTradeVolume>;
  /** Access to subgraph metadata */
  xdai__meta?: Maybe<xdai__Meta_>;
  arbitrumone_systemInfo?: Maybe<arbitrumone_SystemInfo>;
  arbitrumone_systemInfos: Array<arbitrumone_SystemInfo>;
  arbitrumone_pooledToken?: Maybe<arbitrumone_PooledToken>;
  arbitrumone_pooledTokens: Array<arbitrumone_PooledToken>;
  arbitrumone_stableSwap?: Maybe<arbitrumone_StableSwap>;
  arbitrumone_stableSwaps: Array<arbitrumone_StableSwap>;
  arbitrumone_stableSwapAddLiquidityEvent?: Maybe<arbitrumone_StableSwapAddLiquidityEvent>;
  arbitrumone_stableSwapAddLiquidityEvents: Array<arbitrumone_StableSwapAddLiquidityEvent>;
  arbitrumone_stableSwapRemoveLiquidityEvent?: Maybe<arbitrumone_StableSwapRemoveLiquidityEvent>;
  arbitrumone_stableSwapRemoveLiquidityEvents: Array<arbitrumone_StableSwapRemoveLiquidityEvent>;
  arbitrumone_stableSwapExchange?: Maybe<arbitrumone_StableSwapExchange>;
  arbitrumone_stableSwapExchanges: Array<arbitrumone_StableSwapExchange>;
  arbitrumone_swapDailyVolume?: Maybe<arbitrumone_SwapDailyVolume>;
  arbitrumone_swapDailyVolumes: Array<arbitrumone_SwapDailyVolume>;
  arbitrumone_swapHourlyVolume?: Maybe<arbitrumone_SwapHourlyVolume>;
  arbitrumone_swapHourlyVolumes: Array<arbitrumone_SwapHourlyVolume>;
  arbitrumone_swapWeeklyVolume?: Maybe<arbitrumone_SwapWeeklyVolume>;
  arbitrumone_swapWeeklyVolumes: Array<arbitrumone_SwapWeeklyVolume>;
  arbitrumone_stableSwapEvent?: Maybe<arbitrumone_StableSwapEvent>;
  arbitrumone_stableSwapEvents: Array<arbitrumone_StableSwapEvent>;
  arbitrumone_swapTradeVolume?: Maybe<arbitrumone_SwapTradeVolume>;
  arbitrumone_swapTradeVolumes: Array<arbitrumone_SwapTradeVolume>;
  /** Access to subgraph metadata */
  arbitrumone__meta?: Maybe<arbitrumone__Meta_>;
  bnb_systemInfo?: Maybe<bnb_SystemInfo>;
  bnb_systemInfos: Array<bnb_SystemInfo>;
  bnb_pooledToken?: Maybe<bnb_PooledToken>;
  bnb_pooledTokens: Array<bnb_PooledToken>;
  bnb_stableSwap?: Maybe<bnb_StableSwap>;
  bnb_stableSwaps: Array<bnb_StableSwap>;
  bnb_stableSwapAddLiquidityEvent?: Maybe<bnb_StableSwapAddLiquidityEvent>;
  bnb_stableSwapAddLiquidityEvents: Array<bnb_StableSwapAddLiquidityEvent>;
  bnb_stableSwapRemoveLiquidityEvent?: Maybe<bnb_StableSwapRemoveLiquidityEvent>;
  bnb_stableSwapRemoveLiquidityEvents: Array<bnb_StableSwapRemoveLiquidityEvent>;
  bnb_stableSwapExchange?: Maybe<bnb_StableSwapExchange>;
  bnb_stableSwapExchanges: Array<bnb_StableSwapExchange>;
  bnb_swapDailyVolume?: Maybe<bnb_SwapDailyVolume>;
  bnb_swapDailyVolumes: Array<bnb_SwapDailyVolume>;
  bnb_swapHourlyVolume?: Maybe<bnb_SwapHourlyVolume>;
  bnb_swapHourlyVolumes: Array<bnb_SwapHourlyVolume>;
  bnb_swapWeeklyVolume?: Maybe<bnb_SwapWeeklyVolume>;
  bnb_swapWeeklyVolumes: Array<bnb_SwapWeeklyVolume>;
  bnb_stableSwapEvent?: Maybe<bnb_StableSwapEvent>;
  bnb_stableSwapEvents: Array<bnb_StableSwapEvent>;
  bnb_swapTradeVolume?: Maybe<bnb_SwapTradeVolume>;
  bnb_swapTradeVolumes: Array<bnb_SwapTradeVolume>;
  /** Access to subgraph metadata */
  bnb__meta?: Maybe<bnb__Meta_>;
  goerli_systemInfo?: Maybe<goerli_SystemInfo>;
  goerli_systemInfos: Array<goerli_SystemInfo>;
  goerli_pooledToken?: Maybe<goerli_PooledToken>;
  goerli_pooledTokens: Array<goerli_PooledToken>;
  goerli_stableSwap?: Maybe<goerli_StableSwap>;
  goerli_stableSwaps: Array<goerli_StableSwap>;
  goerli_stableSwapAddLiquidityEvent?: Maybe<goerli_StableSwapAddLiquidityEvent>;
  goerli_stableSwapAddLiquidityEvents: Array<goerli_StableSwapAddLiquidityEvent>;
  goerli_stableSwapRemoveLiquidityEvent?: Maybe<goerli_StableSwapRemoveLiquidityEvent>;
  goerli_stableSwapRemoveLiquidityEvents: Array<goerli_StableSwapRemoveLiquidityEvent>;
  goerli_stableSwapExchange?: Maybe<goerli_StableSwapExchange>;
  goerli_stableSwapExchanges: Array<goerli_StableSwapExchange>;
  goerli_swapDailyVolume?: Maybe<goerli_SwapDailyVolume>;
  goerli_swapDailyVolumes: Array<goerli_SwapDailyVolume>;
  goerli_swapHourlyVolume?: Maybe<goerli_SwapHourlyVolume>;
  goerli_swapHourlyVolumes: Array<goerli_SwapHourlyVolume>;
  goerli_swapWeeklyVolume?: Maybe<goerli_SwapWeeklyVolume>;
  goerli_swapWeeklyVolumes: Array<goerli_SwapWeeklyVolume>;
  goerli_stableSwapEvent?: Maybe<goerli_StableSwapEvent>;
  goerli_stableSwapEvents: Array<goerli_StableSwapEvent>;
  goerli_swapTradeVolume?: Maybe<goerli_SwapTradeVolume>;
  goerli_swapTradeVolumes: Array<goerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  goerli__meta?: Maybe<goerli__Meta_>;
  stagingoptimismgoerli_systemInfo?: Maybe<stagingoptimismgoerli_SystemInfo>;
  stagingoptimismgoerli_systemInfos: Array<stagingoptimismgoerli_SystemInfo>;
  stagingoptimismgoerli_pooledToken?: Maybe<stagingoptimismgoerli_PooledToken>;
  stagingoptimismgoerli_pooledTokens: Array<stagingoptimismgoerli_PooledToken>;
  stagingoptimismgoerli_stableSwap?: Maybe<stagingoptimismgoerli_StableSwap>;
  stagingoptimismgoerli_stableSwaps: Array<stagingoptimismgoerli_StableSwap>;
  stagingoptimismgoerli_stableSwapAddLiquidityEvent?: Maybe<stagingoptimismgoerli_StableSwapAddLiquidityEvent>;
  stagingoptimismgoerli_stableSwapAddLiquidityEvents: Array<stagingoptimismgoerli_StableSwapAddLiquidityEvent>;
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvent?: Maybe<stagingoptimismgoerli_StableSwapRemoveLiquidityEvent>;
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvents: Array<stagingoptimismgoerli_StableSwapRemoveLiquidityEvent>;
  stagingoptimismgoerli_stableSwapExchange?: Maybe<stagingoptimismgoerli_StableSwapExchange>;
  stagingoptimismgoerli_stableSwapExchanges: Array<stagingoptimismgoerli_StableSwapExchange>;
  stagingoptimismgoerli_swapDailyVolume?: Maybe<stagingoptimismgoerli_SwapDailyVolume>;
  stagingoptimismgoerli_swapDailyVolumes: Array<stagingoptimismgoerli_SwapDailyVolume>;
  stagingoptimismgoerli_swapHourlyVolume?: Maybe<stagingoptimismgoerli_SwapHourlyVolume>;
  stagingoptimismgoerli_swapHourlyVolumes: Array<stagingoptimismgoerli_SwapHourlyVolume>;
  stagingoptimismgoerli_swapWeeklyVolume?: Maybe<stagingoptimismgoerli_SwapWeeklyVolume>;
  stagingoptimismgoerli_swapWeeklyVolumes: Array<stagingoptimismgoerli_SwapWeeklyVolume>;
  stagingoptimismgoerli_stableSwapEvent?: Maybe<stagingoptimismgoerli_StableSwapEvent>;
  stagingoptimismgoerli_stableSwapEvents: Array<stagingoptimismgoerli_StableSwapEvent>;
  stagingoptimismgoerli_swapTradeVolume?: Maybe<stagingoptimismgoerli_SwapTradeVolume>;
  stagingoptimismgoerli_swapTradeVolumes: Array<stagingoptimismgoerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingoptimismgoerli__meta?: Maybe<stagingoptimismgoerli__Meta_>;
  optimism_systemInfo?: Maybe<optimism_SystemInfo>;
  optimism_systemInfos: Array<optimism_SystemInfo>;
  optimism_pooledToken?: Maybe<optimism_PooledToken>;
  optimism_pooledTokens: Array<optimism_PooledToken>;
  optimism_stableSwap?: Maybe<optimism_StableSwap>;
  optimism_stableSwaps: Array<optimism_StableSwap>;
  optimism_stableSwapAddLiquidityEvent?: Maybe<optimism_StableSwapAddLiquidityEvent>;
  optimism_stableSwapAddLiquidityEvents: Array<optimism_StableSwapAddLiquidityEvent>;
  optimism_stableSwapRemoveLiquidityEvent?: Maybe<optimism_StableSwapRemoveLiquidityEvent>;
  optimism_stableSwapRemoveLiquidityEvents: Array<optimism_StableSwapRemoveLiquidityEvent>;
  optimism_stableSwapExchange?: Maybe<optimism_StableSwapExchange>;
  optimism_stableSwapExchanges: Array<optimism_StableSwapExchange>;
  optimism_swapDailyVolume?: Maybe<optimism_SwapDailyVolume>;
  optimism_swapDailyVolumes: Array<optimism_SwapDailyVolume>;
  optimism_swapHourlyVolume?: Maybe<optimism_SwapHourlyVolume>;
  optimism_swapHourlyVolumes: Array<optimism_SwapHourlyVolume>;
  optimism_swapWeeklyVolume?: Maybe<optimism_SwapWeeklyVolume>;
  optimism_swapWeeklyVolumes: Array<optimism_SwapWeeklyVolume>;
  optimism_stableSwapEvent?: Maybe<optimism_StableSwapEvent>;
  optimism_stableSwapEvents: Array<optimism_StableSwapEvent>;
  optimism_swapTradeVolume?: Maybe<optimism_SwapTradeVolume>;
  optimism_swapTradeVolumes: Array<optimism_SwapTradeVolume>;
  /** Access to subgraph metadata */
  optimism__meta?: Maybe<optimism__Meta_>;
  polygon_systemInfo?: Maybe<polygon_SystemInfo>;
  polygon_systemInfos: Array<polygon_SystemInfo>;
  polygon_pooledToken?: Maybe<polygon_PooledToken>;
  polygon_pooledTokens: Array<polygon_PooledToken>;
  polygon_stableSwap?: Maybe<polygon_StableSwap>;
  polygon_stableSwaps: Array<polygon_StableSwap>;
  polygon_stableSwapAddLiquidityEvent?: Maybe<polygon_StableSwapAddLiquidityEvent>;
  polygon_stableSwapAddLiquidityEvents: Array<polygon_StableSwapAddLiquidityEvent>;
  polygon_stableSwapRemoveLiquidityEvent?: Maybe<polygon_StableSwapRemoveLiquidityEvent>;
  polygon_stableSwapRemoveLiquidityEvents: Array<polygon_StableSwapRemoveLiquidityEvent>;
  polygon_stableSwapExchange?: Maybe<polygon_StableSwapExchange>;
  polygon_stableSwapExchanges: Array<polygon_StableSwapExchange>;
  polygon_swapDailyVolume?: Maybe<polygon_SwapDailyVolume>;
  polygon_swapDailyVolumes: Array<polygon_SwapDailyVolume>;
  polygon_swapHourlyVolume?: Maybe<polygon_SwapHourlyVolume>;
  polygon_swapHourlyVolumes: Array<polygon_SwapHourlyVolume>;
  polygon_swapWeeklyVolume?: Maybe<polygon_SwapWeeklyVolume>;
  polygon_swapWeeklyVolumes: Array<polygon_SwapWeeklyVolume>;
  polygon_stableSwapEvent?: Maybe<polygon_StableSwapEvent>;
  polygon_stableSwapEvents: Array<polygon_StableSwapEvent>;
  polygon_swapTradeVolume?: Maybe<polygon_SwapTradeVolume>;
  polygon_swapTradeVolumes: Array<polygon_SwapTradeVolume>;
  /** Access to subgraph metadata */
  polygon__meta?: Maybe<polygon__Meta_>;
  staginggoerli_systemInfo?: Maybe<staginggoerli_SystemInfo>;
  staginggoerli_systemInfos: Array<staginggoerli_SystemInfo>;
  staginggoerli_pooledToken?: Maybe<staginggoerli_PooledToken>;
  staginggoerli_pooledTokens: Array<staginggoerli_PooledToken>;
  staginggoerli_stableSwap?: Maybe<staginggoerli_StableSwap>;
  staginggoerli_stableSwaps: Array<staginggoerli_StableSwap>;
  staginggoerli_stableSwapAddLiquidityEvent?: Maybe<staginggoerli_StableSwapAddLiquidityEvent>;
  staginggoerli_stableSwapAddLiquidityEvents: Array<staginggoerli_StableSwapAddLiquidityEvent>;
  staginggoerli_stableSwapRemoveLiquidityEvent?: Maybe<staginggoerli_StableSwapRemoveLiquidityEvent>;
  staginggoerli_stableSwapRemoveLiquidityEvents: Array<staginggoerli_StableSwapRemoveLiquidityEvent>;
  staginggoerli_stableSwapExchange?: Maybe<staginggoerli_StableSwapExchange>;
  staginggoerli_stableSwapExchanges: Array<staginggoerli_StableSwapExchange>;
  staginggoerli_swapDailyVolume?: Maybe<staginggoerli_SwapDailyVolume>;
  staginggoerli_swapDailyVolumes: Array<staginggoerli_SwapDailyVolume>;
  staginggoerli_swapHourlyVolume?: Maybe<staginggoerli_SwapHourlyVolume>;
  staginggoerli_swapHourlyVolumes: Array<staginggoerli_SwapHourlyVolume>;
  staginggoerli_swapWeeklyVolume?: Maybe<staginggoerli_SwapWeeklyVolume>;
  staginggoerli_swapWeeklyVolumes: Array<staginggoerli_SwapWeeklyVolume>;
  staginggoerli_stableSwapEvent?: Maybe<staginggoerli_StableSwapEvent>;
  staginggoerli_stableSwapEvents: Array<staginggoerli_StableSwapEvent>;
  staginggoerli_swapTradeVolume?: Maybe<staginggoerli_SwapTradeVolume>;
  staginggoerli_swapTradeVolumes: Array<staginggoerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  staginggoerli__meta?: Maybe<staginggoerli__Meta_>;
  arbitrumgoerli_systemInfo?: Maybe<arbitrumgoerli_SystemInfo>;
  arbitrumgoerli_systemInfos: Array<arbitrumgoerli_SystemInfo>;
  arbitrumgoerli_pooledToken?: Maybe<arbitrumgoerli_PooledToken>;
  arbitrumgoerli_pooledTokens: Array<arbitrumgoerli_PooledToken>;
  arbitrumgoerli_stableSwap?: Maybe<arbitrumgoerli_StableSwap>;
  arbitrumgoerli_stableSwaps: Array<arbitrumgoerli_StableSwap>;
  arbitrumgoerli_stableSwapAddLiquidityEvent?: Maybe<arbitrumgoerli_StableSwapAddLiquidityEvent>;
  arbitrumgoerli_stableSwapAddLiquidityEvents: Array<arbitrumgoerli_StableSwapAddLiquidityEvent>;
  arbitrumgoerli_stableSwapRemoveLiquidityEvent?: Maybe<arbitrumgoerli_StableSwapRemoveLiquidityEvent>;
  arbitrumgoerli_stableSwapRemoveLiquidityEvents: Array<arbitrumgoerli_StableSwapRemoveLiquidityEvent>;
  arbitrumgoerli_stableSwapExchange?: Maybe<arbitrumgoerli_StableSwapExchange>;
  arbitrumgoerli_stableSwapExchanges: Array<arbitrumgoerli_StableSwapExchange>;
  arbitrumgoerli_swapDailyVolume?: Maybe<arbitrumgoerli_SwapDailyVolume>;
  arbitrumgoerli_swapDailyVolumes: Array<arbitrumgoerli_SwapDailyVolume>;
  arbitrumgoerli_swapHourlyVolume?: Maybe<arbitrumgoerli_SwapHourlyVolume>;
  arbitrumgoerli_swapHourlyVolumes: Array<arbitrumgoerli_SwapHourlyVolume>;
  arbitrumgoerli_swapWeeklyVolume?: Maybe<arbitrumgoerli_SwapWeeklyVolume>;
  arbitrumgoerli_swapWeeklyVolumes: Array<arbitrumgoerli_SwapWeeklyVolume>;
  arbitrumgoerli_stableSwapEvent?: Maybe<arbitrumgoerli_StableSwapEvent>;
  arbitrumgoerli_stableSwapEvents: Array<arbitrumgoerli_StableSwapEvent>;
  arbitrumgoerli_swapTradeVolume?: Maybe<arbitrumgoerli_SwapTradeVolume>;
  arbitrumgoerli_swapTradeVolumes: Array<arbitrumgoerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  arbitrumgoerli__meta?: Maybe<arbitrumgoerli__Meta_>;
  optimismgoerli_systemInfo?: Maybe<optimismgoerli_SystemInfo>;
  optimismgoerli_systemInfos: Array<optimismgoerli_SystemInfo>;
  optimismgoerli_pooledToken?: Maybe<optimismgoerli_PooledToken>;
  optimismgoerli_pooledTokens: Array<optimismgoerli_PooledToken>;
  optimismgoerli_stableSwap?: Maybe<optimismgoerli_StableSwap>;
  optimismgoerli_stableSwaps: Array<optimismgoerli_StableSwap>;
  optimismgoerli_stableSwapAddLiquidityEvent?: Maybe<optimismgoerli_StableSwapAddLiquidityEvent>;
  optimismgoerli_stableSwapAddLiquidityEvents: Array<optimismgoerli_StableSwapAddLiquidityEvent>;
  optimismgoerli_stableSwapRemoveLiquidityEvent?: Maybe<optimismgoerli_StableSwapRemoveLiquidityEvent>;
  optimismgoerli_stableSwapRemoveLiquidityEvents: Array<optimismgoerli_StableSwapRemoveLiquidityEvent>;
  optimismgoerli_stableSwapExchange?: Maybe<optimismgoerli_StableSwapExchange>;
  optimismgoerli_stableSwapExchanges: Array<optimismgoerli_StableSwapExchange>;
  optimismgoerli_swapDailyVolume?: Maybe<optimismgoerli_SwapDailyVolume>;
  optimismgoerli_swapDailyVolumes: Array<optimismgoerli_SwapDailyVolume>;
  optimismgoerli_swapHourlyVolume?: Maybe<optimismgoerli_SwapHourlyVolume>;
  optimismgoerli_swapHourlyVolumes: Array<optimismgoerli_SwapHourlyVolume>;
  optimismgoerli_swapWeeklyVolume?: Maybe<optimismgoerli_SwapWeeklyVolume>;
  optimismgoerli_swapWeeklyVolumes: Array<optimismgoerli_SwapWeeklyVolume>;
  optimismgoerli_stableSwapEvent?: Maybe<optimismgoerli_StableSwapEvent>;
  optimismgoerli_stableSwapEvents: Array<optimismgoerli_StableSwapEvent>;
  optimismgoerli_swapTradeVolume?: Maybe<optimismgoerli_SwapTradeVolume>;
  optimismgoerli_swapTradeVolumes: Array<optimismgoerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  optimismgoerli__meta?: Maybe<optimismgoerli__Meta_>;
  stagingmumbai_systemInfo?: Maybe<stagingmumbai_SystemInfo>;
  stagingmumbai_systemInfos: Array<stagingmumbai_SystemInfo>;
  stagingmumbai_pooledToken?: Maybe<stagingmumbai_PooledToken>;
  stagingmumbai_pooledTokens: Array<stagingmumbai_PooledToken>;
  stagingmumbai_stableSwap?: Maybe<stagingmumbai_StableSwap>;
  stagingmumbai_stableSwaps: Array<stagingmumbai_StableSwap>;
  stagingmumbai_stableSwapAddLiquidityEvent?: Maybe<stagingmumbai_StableSwapAddLiquidityEvent>;
  stagingmumbai_stableSwapAddLiquidityEvents: Array<stagingmumbai_StableSwapAddLiquidityEvent>;
  stagingmumbai_stableSwapRemoveLiquidityEvent?: Maybe<stagingmumbai_StableSwapRemoveLiquidityEvent>;
  stagingmumbai_stableSwapRemoveLiquidityEvents: Array<stagingmumbai_StableSwapRemoveLiquidityEvent>;
  stagingmumbai_stableSwapExchange?: Maybe<stagingmumbai_StableSwapExchange>;
  stagingmumbai_stableSwapExchanges: Array<stagingmumbai_StableSwapExchange>;
  stagingmumbai_swapDailyVolume?: Maybe<stagingmumbai_SwapDailyVolume>;
  stagingmumbai_swapDailyVolumes: Array<stagingmumbai_SwapDailyVolume>;
  stagingmumbai_swapHourlyVolume?: Maybe<stagingmumbai_SwapHourlyVolume>;
  stagingmumbai_swapHourlyVolumes: Array<stagingmumbai_SwapHourlyVolume>;
  stagingmumbai_swapWeeklyVolume?: Maybe<stagingmumbai_SwapWeeklyVolume>;
  stagingmumbai_swapWeeklyVolumes: Array<stagingmumbai_SwapWeeklyVolume>;
  stagingmumbai_stableSwapEvent?: Maybe<stagingmumbai_StableSwapEvent>;
  stagingmumbai_stableSwapEvents: Array<stagingmumbai_StableSwapEvent>;
  stagingmumbai_swapTradeVolume?: Maybe<stagingmumbai_SwapTradeVolume>;
  stagingmumbai_swapTradeVolumes: Array<stagingmumbai_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingmumbai__meta?: Maybe<stagingmumbai__Meta_>;
  stagingarbitrumgoerli_systemInfo?: Maybe<stagingarbitrumgoerli_SystemInfo>;
  stagingarbitrumgoerli_systemInfos: Array<stagingarbitrumgoerli_SystemInfo>;
  stagingarbitrumgoerli_pooledToken?: Maybe<stagingarbitrumgoerli_PooledToken>;
  stagingarbitrumgoerli_pooledTokens: Array<stagingarbitrumgoerli_PooledToken>;
  stagingarbitrumgoerli_stableSwap?: Maybe<stagingarbitrumgoerli_StableSwap>;
  stagingarbitrumgoerli_stableSwaps: Array<stagingarbitrumgoerli_StableSwap>;
  stagingarbitrumgoerli_stableSwapAddLiquidityEvent?: Maybe<stagingarbitrumgoerli_StableSwapAddLiquidityEvent>;
  stagingarbitrumgoerli_stableSwapAddLiquidityEvents: Array<stagingarbitrumgoerli_StableSwapAddLiquidityEvent>;
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvent?: Maybe<stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent>;
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvents: Array<stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent>;
  stagingarbitrumgoerli_stableSwapExchange?: Maybe<stagingarbitrumgoerli_StableSwapExchange>;
  stagingarbitrumgoerli_stableSwapExchanges: Array<stagingarbitrumgoerli_StableSwapExchange>;
  stagingarbitrumgoerli_swapDailyVolume?: Maybe<stagingarbitrumgoerli_SwapDailyVolume>;
  stagingarbitrumgoerli_swapDailyVolumes: Array<stagingarbitrumgoerli_SwapDailyVolume>;
  stagingarbitrumgoerli_swapHourlyVolume?: Maybe<stagingarbitrumgoerli_SwapHourlyVolume>;
  stagingarbitrumgoerli_swapHourlyVolumes: Array<stagingarbitrumgoerli_SwapHourlyVolume>;
  stagingarbitrumgoerli_swapWeeklyVolume?: Maybe<stagingarbitrumgoerli_SwapWeeklyVolume>;
  stagingarbitrumgoerli_swapWeeklyVolumes: Array<stagingarbitrumgoerli_SwapWeeklyVolume>;
  stagingarbitrumgoerli_stableSwapEvent?: Maybe<stagingarbitrumgoerli_StableSwapEvent>;
  stagingarbitrumgoerli_stableSwapEvents: Array<stagingarbitrumgoerli_StableSwapEvent>;
  stagingarbitrumgoerli_swapTradeVolume?: Maybe<stagingarbitrumgoerli_SwapTradeVolume>;
  stagingarbitrumgoerli_swapTradeVolumes: Array<stagingarbitrumgoerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingarbitrumgoerli__meta?: Maybe<stagingarbitrumgoerli__Meta_>;
};


export type Querymumbai_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SystemInfo_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_PooledToken_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_PooledToken_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwap_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwap_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwapExchange_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapDailyVolume_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapHourlyVolume_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapWeeklyVolume_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwapEvent_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapTradeVolume_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai__metaArgs = {
  block?: InputMaybe<mumbai_Block_height>;
};


export type Queryxdai_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SystemInfo_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_PooledToken_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_PooledToken_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwap_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwap_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwapExchange_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapDailyVolume_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapHourlyVolume_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapWeeklyVolume_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwapEvent_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapTradeVolume_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai__metaArgs = {
  block?: InputMaybe<xdai_Block_height>;
};


export type Queryarbitrumone_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SystemInfo_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_PooledToken_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_PooledToken_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwap_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwap_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwapExchange_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapDailyVolume_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapHourlyVolume_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapWeeklyVolume_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwapEvent_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapTradeVolume_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone__metaArgs = {
  block?: InputMaybe<arbitrumone_Block_height>;
};


export type Querybnb_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SystemInfo_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_PooledToken_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_PooledToken_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwap_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwap_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwapExchange_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapDailyVolume_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapHourlyVolume_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapWeeklyVolume_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwapEvent_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapTradeVolume_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb__metaArgs = {
  block?: InputMaybe<bnb_Block_height>;
};


export type Querygoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SystemInfo_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_PooledToken_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwap_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwapExchange_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapDailyVolume_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwapEvent_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapTradeVolume_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli__metaArgs = {
  block?: InputMaybe<goerli_Block_height>;
};


export type Querystagingoptimismgoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SystemInfo_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_PooledToken_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwap_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwapExchange_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwapEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli__metaArgs = {
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
};


export type Queryoptimism_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SystemInfo_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_PooledToken_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_PooledToken_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwap_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwap_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwapExchange_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapDailyVolume_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapHourlyVolume_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapWeeklyVolume_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwapEvent_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapTradeVolume_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism__metaArgs = {
  block?: InputMaybe<optimism_Block_height>;
};


export type Querypolygon_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SystemInfo_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_PooledToken_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_PooledToken_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwap_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwap_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwapExchange_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapDailyVolume_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapHourlyVolume_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapWeeklyVolume_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwapEvent_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapTradeVolume_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon__metaArgs = {
  block?: InputMaybe<polygon_Block_height>;
};


export type Querystaginggoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SystemInfo_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_PooledToken_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwap_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapExchange_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli__metaArgs = {
  block?: InputMaybe<staginggoerli_Block_height>;
};


export type Queryarbitrumgoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SystemInfo_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_PooledToken_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwap_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwapExchange_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwapEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli__metaArgs = {
  block?: InputMaybe<arbitrumgoerli_Block_height>;
};


export type Queryoptimismgoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SystemInfo_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_PooledToken_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwap_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwapExchange_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwapEvent_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli__metaArgs = {
  block?: InputMaybe<optimismgoerli_Block_height>;
};


export type Querystagingmumbai_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SystemInfo_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_PooledToken_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwap_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwapExchange_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwapEvent_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai__metaArgs = {
  block?: InputMaybe<stagingmumbai_Block_height>;
};


export type Querystagingarbitrumgoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SystemInfo_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_PooledToken_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwap_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwapExchange_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwapEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli__metaArgs = {
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
};

export type Subscription = {
  mumbai_systemInfo?: Maybe<mumbai_SystemInfo>;
  mumbai_systemInfos: Array<mumbai_SystemInfo>;
  mumbai_pooledToken?: Maybe<mumbai_PooledToken>;
  mumbai_pooledTokens: Array<mumbai_PooledToken>;
  mumbai_stableSwap?: Maybe<mumbai_StableSwap>;
  mumbai_stableSwaps: Array<mumbai_StableSwap>;
  mumbai_stableSwapAddLiquidityEvent?: Maybe<mumbai_StableSwapAddLiquidityEvent>;
  mumbai_stableSwapAddLiquidityEvents: Array<mumbai_StableSwapAddLiquidityEvent>;
  mumbai_stableSwapRemoveLiquidityEvent?: Maybe<mumbai_StableSwapRemoveLiquidityEvent>;
  mumbai_stableSwapRemoveLiquidityEvents: Array<mumbai_StableSwapRemoveLiquidityEvent>;
  mumbai_stableSwapExchange?: Maybe<mumbai_StableSwapExchange>;
  mumbai_stableSwapExchanges: Array<mumbai_StableSwapExchange>;
  mumbai_swapDailyVolume?: Maybe<mumbai_SwapDailyVolume>;
  mumbai_swapDailyVolumes: Array<mumbai_SwapDailyVolume>;
  mumbai_swapHourlyVolume?: Maybe<mumbai_SwapHourlyVolume>;
  mumbai_swapHourlyVolumes: Array<mumbai_SwapHourlyVolume>;
  mumbai_swapWeeklyVolume?: Maybe<mumbai_SwapWeeklyVolume>;
  mumbai_swapWeeklyVolumes: Array<mumbai_SwapWeeklyVolume>;
  mumbai_stableSwapEvent?: Maybe<mumbai_StableSwapEvent>;
  mumbai_stableSwapEvents: Array<mumbai_StableSwapEvent>;
  mumbai_swapTradeVolume?: Maybe<mumbai_SwapTradeVolume>;
  mumbai_swapTradeVolumes: Array<mumbai_SwapTradeVolume>;
  /** Access to subgraph metadata */
  mumbai__meta?: Maybe<mumbai__Meta_>;
  xdai_systemInfo?: Maybe<xdai_SystemInfo>;
  xdai_systemInfos: Array<xdai_SystemInfo>;
  xdai_pooledToken?: Maybe<xdai_PooledToken>;
  xdai_pooledTokens: Array<xdai_PooledToken>;
  xdai_stableSwap?: Maybe<xdai_StableSwap>;
  xdai_stableSwaps: Array<xdai_StableSwap>;
  xdai_stableSwapAddLiquidityEvent?: Maybe<xdai_StableSwapAddLiquidityEvent>;
  xdai_stableSwapAddLiquidityEvents: Array<xdai_StableSwapAddLiquidityEvent>;
  xdai_stableSwapRemoveLiquidityEvent?: Maybe<xdai_StableSwapRemoveLiquidityEvent>;
  xdai_stableSwapRemoveLiquidityEvents: Array<xdai_StableSwapRemoveLiquidityEvent>;
  xdai_stableSwapExchange?: Maybe<xdai_StableSwapExchange>;
  xdai_stableSwapExchanges: Array<xdai_StableSwapExchange>;
  xdai_swapDailyVolume?: Maybe<xdai_SwapDailyVolume>;
  xdai_swapDailyVolumes: Array<xdai_SwapDailyVolume>;
  xdai_swapHourlyVolume?: Maybe<xdai_SwapHourlyVolume>;
  xdai_swapHourlyVolumes: Array<xdai_SwapHourlyVolume>;
  xdai_swapWeeklyVolume?: Maybe<xdai_SwapWeeklyVolume>;
  xdai_swapWeeklyVolumes: Array<xdai_SwapWeeklyVolume>;
  xdai_stableSwapEvent?: Maybe<xdai_StableSwapEvent>;
  xdai_stableSwapEvents: Array<xdai_StableSwapEvent>;
  xdai_swapTradeVolume?: Maybe<xdai_SwapTradeVolume>;
  xdai_swapTradeVolumes: Array<xdai_SwapTradeVolume>;
  /** Access to subgraph metadata */
  xdai__meta?: Maybe<xdai__Meta_>;
  arbitrumone_systemInfo?: Maybe<arbitrumone_SystemInfo>;
  arbitrumone_systemInfos: Array<arbitrumone_SystemInfo>;
  arbitrumone_pooledToken?: Maybe<arbitrumone_PooledToken>;
  arbitrumone_pooledTokens: Array<arbitrumone_PooledToken>;
  arbitrumone_stableSwap?: Maybe<arbitrumone_StableSwap>;
  arbitrumone_stableSwaps: Array<arbitrumone_StableSwap>;
  arbitrumone_stableSwapAddLiquidityEvent?: Maybe<arbitrumone_StableSwapAddLiquidityEvent>;
  arbitrumone_stableSwapAddLiquidityEvents: Array<arbitrumone_StableSwapAddLiquidityEvent>;
  arbitrumone_stableSwapRemoveLiquidityEvent?: Maybe<arbitrumone_StableSwapRemoveLiquidityEvent>;
  arbitrumone_stableSwapRemoveLiquidityEvents: Array<arbitrumone_StableSwapRemoveLiquidityEvent>;
  arbitrumone_stableSwapExchange?: Maybe<arbitrumone_StableSwapExchange>;
  arbitrumone_stableSwapExchanges: Array<arbitrumone_StableSwapExchange>;
  arbitrumone_swapDailyVolume?: Maybe<arbitrumone_SwapDailyVolume>;
  arbitrumone_swapDailyVolumes: Array<arbitrumone_SwapDailyVolume>;
  arbitrumone_swapHourlyVolume?: Maybe<arbitrumone_SwapHourlyVolume>;
  arbitrumone_swapHourlyVolumes: Array<arbitrumone_SwapHourlyVolume>;
  arbitrumone_swapWeeklyVolume?: Maybe<arbitrumone_SwapWeeklyVolume>;
  arbitrumone_swapWeeklyVolumes: Array<arbitrumone_SwapWeeklyVolume>;
  arbitrumone_stableSwapEvent?: Maybe<arbitrumone_StableSwapEvent>;
  arbitrumone_stableSwapEvents: Array<arbitrumone_StableSwapEvent>;
  arbitrumone_swapTradeVolume?: Maybe<arbitrumone_SwapTradeVolume>;
  arbitrumone_swapTradeVolumes: Array<arbitrumone_SwapTradeVolume>;
  /** Access to subgraph metadata */
  arbitrumone__meta?: Maybe<arbitrumone__Meta_>;
  bnb_systemInfo?: Maybe<bnb_SystemInfo>;
  bnb_systemInfos: Array<bnb_SystemInfo>;
  bnb_pooledToken?: Maybe<bnb_PooledToken>;
  bnb_pooledTokens: Array<bnb_PooledToken>;
  bnb_stableSwap?: Maybe<bnb_StableSwap>;
  bnb_stableSwaps: Array<bnb_StableSwap>;
  bnb_stableSwapAddLiquidityEvent?: Maybe<bnb_StableSwapAddLiquidityEvent>;
  bnb_stableSwapAddLiquidityEvents: Array<bnb_StableSwapAddLiquidityEvent>;
  bnb_stableSwapRemoveLiquidityEvent?: Maybe<bnb_StableSwapRemoveLiquidityEvent>;
  bnb_stableSwapRemoveLiquidityEvents: Array<bnb_StableSwapRemoveLiquidityEvent>;
  bnb_stableSwapExchange?: Maybe<bnb_StableSwapExchange>;
  bnb_stableSwapExchanges: Array<bnb_StableSwapExchange>;
  bnb_swapDailyVolume?: Maybe<bnb_SwapDailyVolume>;
  bnb_swapDailyVolumes: Array<bnb_SwapDailyVolume>;
  bnb_swapHourlyVolume?: Maybe<bnb_SwapHourlyVolume>;
  bnb_swapHourlyVolumes: Array<bnb_SwapHourlyVolume>;
  bnb_swapWeeklyVolume?: Maybe<bnb_SwapWeeklyVolume>;
  bnb_swapWeeklyVolumes: Array<bnb_SwapWeeklyVolume>;
  bnb_stableSwapEvent?: Maybe<bnb_StableSwapEvent>;
  bnb_stableSwapEvents: Array<bnb_StableSwapEvent>;
  bnb_swapTradeVolume?: Maybe<bnb_SwapTradeVolume>;
  bnb_swapTradeVolumes: Array<bnb_SwapTradeVolume>;
  /** Access to subgraph metadata */
  bnb__meta?: Maybe<bnb__Meta_>;
  goerli_systemInfo?: Maybe<goerli_SystemInfo>;
  goerli_systemInfos: Array<goerli_SystemInfo>;
  goerli_pooledToken?: Maybe<goerli_PooledToken>;
  goerli_pooledTokens: Array<goerli_PooledToken>;
  goerli_stableSwap?: Maybe<goerli_StableSwap>;
  goerli_stableSwaps: Array<goerli_StableSwap>;
  goerli_stableSwapAddLiquidityEvent?: Maybe<goerli_StableSwapAddLiquidityEvent>;
  goerli_stableSwapAddLiquidityEvents: Array<goerli_StableSwapAddLiquidityEvent>;
  goerli_stableSwapRemoveLiquidityEvent?: Maybe<goerli_StableSwapRemoveLiquidityEvent>;
  goerli_stableSwapRemoveLiquidityEvents: Array<goerli_StableSwapRemoveLiquidityEvent>;
  goerli_stableSwapExchange?: Maybe<goerli_StableSwapExchange>;
  goerli_stableSwapExchanges: Array<goerli_StableSwapExchange>;
  goerli_swapDailyVolume?: Maybe<goerli_SwapDailyVolume>;
  goerli_swapDailyVolumes: Array<goerli_SwapDailyVolume>;
  goerli_swapHourlyVolume?: Maybe<goerli_SwapHourlyVolume>;
  goerli_swapHourlyVolumes: Array<goerli_SwapHourlyVolume>;
  goerli_swapWeeklyVolume?: Maybe<goerli_SwapWeeklyVolume>;
  goerli_swapWeeklyVolumes: Array<goerli_SwapWeeklyVolume>;
  goerli_stableSwapEvent?: Maybe<goerli_StableSwapEvent>;
  goerli_stableSwapEvents: Array<goerli_StableSwapEvent>;
  goerli_swapTradeVolume?: Maybe<goerli_SwapTradeVolume>;
  goerli_swapTradeVolumes: Array<goerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  goerli__meta?: Maybe<goerli__Meta_>;
  stagingoptimismgoerli_systemInfo?: Maybe<stagingoptimismgoerli_SystemInfo>;
  stagingoptimismgoerli_systemInfos: Array<stagingoptimismgoerli_SystemInfo>;
  stagingoptimismgoerli_pooledToken?: Maybe<stagingoptimismgoerli_PooledToken>;
  stagingoptimismgoerli_pooledTokens: Array<stagingoptimismgoerli_PooledToken>;
  stagingoptimismgoerli_stableSwap?: Maybe<stagingoptimismgoerli_StableSwap>;
  stagingoptimismgoerli_stableSwaps: Array<stagingoptimismgoerli_StableSwap>;
  stagingoptimismgoerli_stableSwapAddLiquidityEvent?: Maybe<stagingoptimismgoerli_StableSwapAddLiquidityEvent>;
  stagingoptimismgoerli_stableSwapAddLiquidityEvents: Array<stagingoptimismgoerli_StableSwapAddLiquidityEvent>;
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvent?: Maybe<stagingoptimismgoerli_StableSwapRemoveLiquidityEvent>;
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvents: Array<stagingoptimismgoerli_StableSwapRemoveLiquidityEvent>;
  stagingoptimismgoerli_stableSwapExchange?: Maybe<stagingoptimismgoerli_StableSwapExchange>;
  stagingoptimismgoerli_stableSwapExchanges: Array<stagingoptimismgoerli_StableSwapExchange>;
  stagingoptimismgoerli_swapDailyVolume?: Maybe<stagingoptimismgoerli_SwapDailyVolume>;
  stagingoptimismgoerli_swapDailyVolumes: Array<stagingoptimismgoerli_SwapDailyVolume>;
  stagingoptimismgoerli_swapHourlyVolume?: Maybe<stagingoptimismgoerli_SwapHourlyVolume>;
  stagingoptimismgoerli_swapHourlyVolumes: Array<stagingoptimismgoerli_SwapHourlyVolume>;
  stagingoptimismgoerli_swapWeeklyVolume?: Maybe<stagingoptimismgoerli_SwapWeeklyVolume>;
  stagingoptimismgoerli_swapWeeklyVolumes: Array<stagingoptimismgoerli_SwapWeeklyVolume>;
  stagingoptimismgoerli_stableSwapEvent?: Maybe<stagingoptimismgoerli_StableSwapEvent>;
  stagingoptimismgoerli_stableSwapEvents: Array<stagingoptimismgoerli_StableSwapEvent>;
  stagingoptimismgoerli_swapTradeVolume?: Maybe<stagingoptimismgoerli_SwapTradeVolume>;
  stagingoptimismgoerli_swapTradeVolumes: Array<stagingoptimismgoerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingoptimismgoerli__meta?: Maybe<stagingoptimismgoerli__Meta_>;
  optimism_systemInfo?: Maybe<optimism_SystemInfo>;
  optimism_systemInfos: Array<optimism_SystemInfo>;
  optimism_pooledToken?: Maybe<optimism_PooledToken>;
  optimism_pooledTokens: Array<optimism_PooledToken>;
  optimism_stableSwap?: Maybe<optimism_StableSwap>;
  optimism_stableSwaps: Array<optimism_StableSwap>;
  optimism_stableSwapAddLiquidityEvent?: Maybe<optimism_StableSwapAddLiquidityEvent>;
  optimism_stableSwapAddLiquidityEvents: Array<optimism_StableSwapAddLiquidityEvent>;
  optimism_stableSwapRemoveLiquidityEvent?: Maybe<optimism_StableSwapRemoveLiquidityEvent>;
  optimism_stableSwapRemoveLiquidityEvents: Array<optimism_StableSwapRemoveLiquidityEvent>;
  optimism_stableSwapExchange?: Maybe<optimism_StableSwapExchange>;
  optimism_stableSwapExchanges: Array<optimism_StableSwapExchange>;
  optimism_swapDailyVolume?: Maybe<optimism_SwapDailyVolume>;
  optimism_swapDailyVolumes: Array<optimism_SwapDailyVolume>;
  optimism_swapHourlyVolume?: Maybe<optimism_SwapHourlyVolume>;
  optimism_swapHourlyVolumes: Array<optimism_SwapHourlyVolume>;
  optimism_swapWeeklyVolume?: Maybe<optimism_SwapWeeklyVolume>;
  optimism_swapWeeklyVolumes: Array<optimism_SwapWeeklyVolume>;
  optimism_stableSwapEvent?: Maybe<optimism_StableSwapEvent>;
  optimism_stableSwapEvents: Array<optimism_StableSwapEvent>;
  optimism_swapTradeVolume?: Maybe<optimism_SwapTradeVolume>;
  optimism_swapTradeVolumes: Array<optimism_SwapTradeVolume>;
  /** Access to subgraph metadata */
  optimism__meta?: Maybe<optimism__Meta_>;
  polygon_systemInfo?: Maybe<polygon_SystemInfo>;
  polygon_systemInfos: Array<polygon_SystemInfo>;
  polygon_pooledToken?: Maybe<polygon_PooledToken>;
  polygon_pooledTokens: Array<polygon_PooledToken>;
  polygon_stableSwap?: Maybe<polygon_StableSwap>;
  polygon_stableSwaps: Array<polygon_StableSwap>;
  polygon_stableSwapAddLiquidityEvent?: Maybe<polygon_StableSwapAddLiquidityEvent>;
  polygon_stableSwapAddLiquidityEvents: Array<polygon_StableSwapAddLiquidityEvent>;
  polygon_stableSwapRemoveLiquidityEvent?: Maybe<polygon_StableSwapRemoveLiquidityEvent>;
  polygon_stableSwapRemoveLiquidityEvents: Array<polygon_StableSwapRemoveLiquidityEvent>;
  polygon_stableSwapExchange?: Maybe<polygon_StableSwapExchange>;
  polygon_stableSwapExchanges: Array<polygon_StableSwapExchange>;
  polygon_swapDailyVolume?: Maybe<polygon_SwapDailyVolume>;
  polygon_swapDailyVolumes: Array<polygon_SwapDailyVolume>;
  polygon_swapHourlyVolume?: Maybe<polygon_SwapHourlyVolume>;
  polygon_swapHourlyVolumes: Array<polygon_SwapHourlyVolume>;
  polygon_swapWeeklyVolume?: Maybe<polygon_SwapWeeklyVolume>;
  polygon_swapWeeklyVolumes: Array<polygon_SwapWeeklyVolume>;
  polygon_stableSwapEvent?: Maybe<polygon_StableSwapEvent>;
  polygon_stableSwapEvents: Array<polygon_StableSwapEvent>;
  polygon_swapTradeVolume?: Maybe<polygon_SwapTradeVolume>;
  polygon_swapTradeVolumes: Array<polygon_SwapTradeVolume>;
  /** Access to subgraph metadata */
  polygon__meta?: Maybe<polygon__Meta_>;
  staginggoerli_systemInfo?: Maybe<staginggoerli_SystemInfo>;
  staginggoerli_systemInfos: Array<staginggoerli_SystemInfo>;
  staginggoerli_pooledToken?: Maybe<staginggoerli_PooledToken>;
  staginggoerli_pooledTokens: Array<staginggoerli_PooledToken>;
  staginggoerli_stableSwap?: Maybe<staginggoerli_StableSwap>;
  staginggoerli_stableSwaps: Array<staginggoerli_StableSwap>;
  staginggoerli_stableSwapAddLiquidityEvent?: Maybe<staginggoerli_StableSwapAddLiquidityEvent>;
  staginggoerli_stableSwapAddLiquidityEvents: Array<staginggoerli_StableSwapAddLiquidityEvent>;
  staginggoerli_stableSwapRemoveLiquidityEvent?: Maybe<staginggoerli_StableSwapRemoveLiquidityEvent>;
  staginggoerli_stableSwapRemoveLiquidityEvents: Array<staginggoerli_StableSwapRemoveLiquidityEvent>;
  staginggoerli_stableSwapExchange?: Maybe<staginggoerli_StableSwapExchange>;
  staginggoerli_stableSwapExchanges: Array<staginggoerli_StableSwapExchange>;
  staginggoerli_swapDailyVolume?: Maybe<staginggoerli_SwapDailyVolume>;
  staginggoerli_swapDailyVolumes: Array<staginggoerli_SwapDailyVolume>;
  staginggoerli_swapHourlyVolume?: Maybe<staginggoerli_SwapHourlyVolume>;
  staginggoerli_swapHourlyVolumes: Array<staginggoerli_SwapHourlyVolume>;
  staginggoerli_swapWeeklyVolume?: Maybe<staginggoerli_SwapWeeklyVolume>;
  staginggoerli_swapWeeklyVolumes: Array<staginggoerli_SwapWeeklyVolume>;
  staginggoerli_stableSwapEvent?: Maybe<staginggoerli_StableSwapEvent>;
  staginggoerli_stableSwapEvents: Array<staginggoerli_StableSwapEvent>;
  staginggoerli_swapTradeVolume?: Maybe<staginggoerli_SwapTradeVolume>;
  staginggoerli_swapTradeVolumes: Array<staginggoerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  staginggoerli__meta?: Maybe<staginggoerli__Meta_>;
  arbitrumgoerli_systemInfo?: Maybe<arbitrumgoerli_SystemInfo>;
  arbitrumgoerli_systemInfos: Array<arbitrumgoerli_SystemInfo>;
  arbitrumgoerli_pooledToken?: Maybe<arbitrumgoerli_PooledToken>;
  arbitrumgoerli_pooledTokens: Array<arbitrumgoerli_PooledToken>;
  arbitrumgoerli_stableSwap?: Maybe<arbitrumgoerli_StableSwap>;
  arbitrumgoerli_stableSwaps: Array<arbitrumgoerli_StableSwap>;
  arbitrumgoerli_stableSwapAddLiquidityEvent?: Maybe<arbitrumgoerli_StableSwapAddLiquidityEvent>;
  arbitrumgoerli_stableSwapAddLiquidityEvents: Array<arbitrumgoerli_StableSwapAddLiquidityEvent>;
  arbitrumgoerli_stableSwapRemoveLiquidityEvent?: Maybe<arbitrumgoerli_StableSwapRemoveLiquidityEvent>;
  arbitrumgoerli_stableSwapRemoveLiquidityEvents: Array<arbitrumgoerli_StableSwapRemoveLiquidityEvent>;
  arbitrumgoerli_stableSwapExchange?: Maybe<arbitrumgoerli_StableSwapExchange>;
  arbitrumgoerli_stableSwapExchanges: Array<arbitrumgoerli_StableSwapExchange>;
  arbitrumgoerli_swapDailyVolume?: Maybe<arbitrumgoerli_SwapDailyVolume>;
  arbitrumgoerli_swapDailyVolumes: Array<arbitrumgoerli_SwapDailyVolume>;
  arbitrumgoerli_swapHourlyVolume?: Maybe<arbitrumgoerli_SwapHourlyVolume>;
  arbitrumgoerli_swapHourlyVolumes: Array<arbitrumgoerli_SwapHourlyVolume>;
  arbitrumgoerli_swapWeeklyVolume?: Maybe<arbitrumgoerli_SwapWeeklyVolume>;
  arbitrumgoerli_swapWeeklyVolumes: Array<arbitrumgoerli_SwapWeeklyVolume>;
  arbitrumgoerli_stableSwapEvent?: Maybe<arbitrumgoerli_StableSwapEvent>;
  arbitrumgoerli_stableSwapEvents: Array<arbitrumgoerli_StableSwapEvent>;
  arbitrumgoerli_swapTradeVolume?: Maybe<arbitrumgoerli_SwapTradeVolume>;
  arbitrumgoerli_swapTradeVolumes: Array<arbitrumgoerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  arbitrumgoerli__meta?: Maybe<arbitrumgoerli__Meta_>;
  optimismgoerli_systemInfo?: Maybe<optimismgoerli_SystemInfo>;
  optimismgoerli_systemInfos: Array<optimismgoerli_SystemInfo>;
  optimismgoerli_pooledToken?: Maybe<optimismgoerli_PooledToken>;
  optimismgoerli_pooledTokens: Array<optimismgoerli_PooledToken>;
  optimismgoerli_stableSwap?: Maybe<optimismgoerli_StableSwap>;
  optimismgoerli_stableSwaps: Array<optimismgoerli_StableSwap>;
  optimismgoerli_stableSwapAddLiquidityEvent?: Maybe<optimismgoerli_StableSwapAddLiquidityEvent>;
  optimismgoerli_stableSwapAddLiquidityEvents: Array<optimismgoerli_StableSwapAddLiquidityEvent>;
  optimismgoerli_stableSwapRemoveLiquidityEvent?: Maybe<optimismgoerli_StableSwapRemoveLiquidityEvent>;
  optimismgoerli_stableSwapRemoveLiquidityEvents: Array<optimismgoerli_StableSwapRemoveLiquidityEvent>;
  optimismgoerli_stableSwapExchange?: Maybe<optimismgoerli_StableSwapExchange>;
  optimismgoerli_stableSwapExchanges: Array<optimismgoerli_StableSwapExchange>;
  optimismgoerli_swapDailyVolume?: Maybe<optimismgoerli_SwapDailyVolume>;
  optimismgoerli_swapDailyVolumes: Array<optimismgoerli_SwapDailyVolume>;
  optimismgoerli_swapHourlyVolume?: Maybe<optimismgoerli_SwapHourlyVolume>;
  optimismgoerli_swapHourlyVolumes: Array<optimismgoerli_SwapHourlyVolume>;
  optimismgoerli_swapWeeklyVolume?: Maybe<optimismgoerli_SwapWeeklyVolume>;
  optimismgoerli_swapWeeklyVolumes: Array<optimismgoerli_SwapWeeklyVolume>;
  optimismgoerli_stableSwapEvent?: Maybe<optimismgoerli_StableSwapEvent>;
  optimismgoerli_stableSwapEvents: Array<optimismgoerli_StableSwapEvent>;
  optimismgoerli_swapTradeVolume?: Maybe<optimismgoerli_SwapTradeVolume>;
  optimismgoerli_swapTradeVolumes: Array<optimismgoerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  optimismgoerli__meta?: Maybe<optimismgoerli__Meta_>;
  stagingmumbai_systemInfo?: Maybe<stagingmumbai_SystemInfo>;
  stagingmumbai_systemInfos: Array<stagingmumbai_SystemInfo>;
  stagingmumbai_pooledToken?: Maybe<stagingmumbai_PooledToken>;
  stagingmumbai_pooledTokens: Array<stagingmumbai_PooledToken>;
  stagingmumbai_stableSwap?: Maybe<stagingmumbai_StableSwap>;
  stagingmumbai_stableSwaps: Array<stagingmumbai_StableSwap>;
  stagingmumbai_stableSwapAddLiquidityEvent?: Maybe<stagingmumbai_StableSwapAddLiquidityEvent>;
  stagingmumbai_stableSwapAddLiquidityEvents: Array<stagingmumbai_StableSwapAddLiquidityEvent>;
  stagingmumbai_stableSwapRemoveLiquidityEvent?: Maybe<stagingmumbai_StableSwapRemoveLiquidityEvent>;
  stagingmumbai_stableSwapRemoveLiquidityEvents: Array<stagingmumbai_StableSwapRemoveLiquidityEvent>;
  stagingmumbai_stableSwapExchange?: Maybe<stagingmumbai_StableSwapExchange>;
  stagingmumbai_stableSwapExchanges: Array<stagingmumbai_StableSwapExchange>;
  stagingmumbai_swapDailyVolume?: Maybe<stagingmumbai_SwapDailyVolume>;
  stagingmumbai_swapDailyVolumes: Array<stagingmumbai_SwapDailyVolume>;
  stagingmumbai_swapHourlyVolume?: Maybe<stagingmumbai_SwapHourlyVolume>;
  stagingmumbai_swapHourlyVolumes: Array<stagingmumbai_SwapHourlyVolume>;
  stagingmumbai_swapWeeklyVolume?: Maybe<stagingmumbai_SwapWeeklyVolume>;
  stagingmumbai_swapWeeklyVolumes: Array<stagingmumbai_SwapWeeklyVolume>;
  stagingmumbai_stableSwapEvent?: Maybe<stagingmumbai_StableSwapEvent>;
  stagingmumbai_stableSwapEvents: Array<stagingmumbai_StableSwapEvent>;
  stagingmumbai_swapTradeVolume?: Maybe<stagingmumbai_SwapTradeVolume>;
  stagingmumbai_swapTradeVolumes: Array<stagingmumbai_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingmumbai__meta?: Maybe<stagingmumbai__Meta_>;
  stagingarbitrumgoerli_systemInfo?: Maybe<stagingarbitrumgoerli_SystemInfo>;
  stagingarbitrumgoerli_systemInfos: Array<stagingarbitrumgoerli_SystemInfo>;
  stagingarbitrumgoerli_pooledToken?: Maybe<stagingarbitrumgoerli_PooledToken>;
  stagingarbitrumgoerli_pooledTokens: Array<stagingarbitrumgoerli_PooledToken>;
  stagingarbitrumgoerli_stableSwap?: Maybe<stagingarbitrumgoerli_StableSwap>;
  stagingarbitrumgoerli_stableSwaps: Array<stagingarbitrumgoerli_StableSwap>;
  stagingarbitrumgoerli_stableSwapAddLiquidityEvent?: Maybe<stagingarbitrumgoerli_StableSwapAddLiquidityEvent>;
  stagingarbitrumgoerli_stableSwapAddLiquidityEvents: Array<stagingarbitrumgoerli_StableSwapAddLiquidityEvent>;
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvent?: Maybe<stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent>;
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvents: Array<stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent>;
  stagingarbitrumgoerli_stableSwapExchange?: Maybe<stagingarbitrumgoerli_StableSwapExchange>;
  stagingarbitrumgoerli_stableSwapExchanges: Array<stagingarbitrumgoerli_StableSwapExchange>;
  stagingarbitrumgoerli_swapDailyVolume?: Maybe<stagingarbitrumgoerli_SwapDailyVolume>;
  stagingarbitrumgoerli_swapDailyVolumes: Array<stagingarbitrumgoerli_SwapDailyVolume>;
  stagingarbitrumgoerli_swapHourlyVolume?: Maybe<stagingarbitrumgoerli_SwapHourlyVolume>;
  stagingarbitrumgoerli_swapHourlyVolumes: Array<stagingarbitrumgoerli_SwapHourlyVolume>;
  stagingarbitrumgoerli_swapWeeklyVolume?: Maybe<stagingarbitrumgoerli_SwapWeeklyVolume>;
  stagingarbitrumgoerli_swapWeeklyVolumes: Array<stagingarbitrumgoerli_SwapWeeklyVolume>;
  stagingarbitrumgoerli_stableSwapEvent?: Maybe<stagingarbitrumgoerli_StableSwapEvent>;
  stagingarbitrumgoerli_stableSwapEvents: Array<stagingarbitrumgoerli_StableSwapEvent>;
  stagingarbitrumgoerli_swapTradeVolume?: Maybe<stagingarbitrumgoerli_SwapTradeVolume>;
  stagingarbitrumgoerli_swapTradeVolumes: Array<stagingarbitrumgoerli_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingarbitrumgoerli__meta?: Maybe<stagingarbitrumgoerli__Meta_>;
};


export type Subscriptionmumbai_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SystemInfo_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_PooledToken_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_PooledToken_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwap_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwap_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwapExchange_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapDailyVolume_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapHourlyVolume_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapWeeklyVolume_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwapEvent_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapTradeVolume_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai__metaArgs = {
  block?: InputMaybe<mumbai_Block_height>;
};


export type Subscriptionxdai_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SystemInfo_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_PooledToken_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_PooledToken_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwap_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwap_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwapExchange_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapDailyVolume_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapHourlyVolume_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapWeeklyVolume_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwapEvent_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapTradeVolume_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai__metaArgs = {
  block?: InputMaybe<xdai_Block_height>;
};


export type Subscriptionarbitrumone_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SystemInfo_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_PooledToken_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_PooledToken_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwap_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwap_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwapExchange_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapDailyVolume_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapHourlyVolume_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapWeeklyVolume_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwapEvent_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapTradeVolume_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone__metaArgs = {
  block?: InputMaybe<arbitrumone_Block_height>;
};


export type Subscriptionbnb_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SystemInfo_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_PooledToken_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_PooledToken_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwap_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwap_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwapExchange_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapDailyVolume_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapHourlyVolume_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapWeeklyVolume_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwapEvent_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapTradeVolume_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb__metaArgs = {
  block?: InputMaybe<bnb_Block_height>;
};


export type Subscriptiongoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SystemInfo_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_PooledToken_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwap_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwapExchange_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapDailyVolume_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwapEvent_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapTradeVolume_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli__metaArgs = {
  block?: InputMaybe<goerli_Block_height>;
};


export type Subscriptionstagingoptimismgoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SystemInfo_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_PooledToken_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwap_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwapExchange_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwapEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli__metaArgs = {
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
};


export type Subscriptionoptimism_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SystemInfo_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_PooledToken_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_PooledToken_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwap_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwap_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwapExchange_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapDailyVolume_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapHourlyVolume_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapWeeklyVolume_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwapEvent_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapTradeVolume_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism__metaArgs = {
  block?: InputMaybe<optimism_Block_height>;
};


export type Subscriptionpolygon_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SystemInfo_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_PooledToken_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_PooledToken_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwap_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwap_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwapExchange_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapDailyVolume_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapHourlyVolume_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapWeeklyVolume_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwapEvent_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapTradeVolume_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon__metaArgs = {
  block?: InputMaybe<polygon_Block_height>;
};


export type Subscriptionstaginggoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SystemInfo_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_PooledToken_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwap_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapExchange_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli__metaArgs = {
  block?: InputMaybe<staginggoerli_Block_height>;
};


export type Subscriptionarbitrumgoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SystemInfo_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_PooledToken_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwap_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwapExchange_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwapEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli__metaArgs = {
  block?: InputMaybe<arbitrumgoerli_Block_height>;
};


export type Subscriptionoptimismgoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SystemInfo_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_PooledToken_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwap_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwapExchange_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwapEvent_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli__metaArgs = {
  block?: InputMaybe<optimismgoerli_Block_height>;
};


export type Subscriptionstagingmumbai_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SystemInfo_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_PooledToken_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwap_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwapExchange_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwapEvent_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai__metaArgs = {
  block?: InputMaybe<stagingmumbai_Block_height>;
};


export type Subscriptionstagingarbitrumgoerli_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SystemInfo_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_PooledToken_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwap_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwapExchange_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwapEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli__metaArgs = {
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
};

export type mumbai_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type mumbai_Block_height = {
  hash?: InputMaybe<Scalars['mumbai_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type mumbai_OrderDirection =
  | 'asc'
  | 'desc';

export type mumbai_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['mumbai_Bytes'];
};

export type mumbai_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['mumbai_Bytes']>;
  asset_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  asset_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  asset_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  asset_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  asset_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type mumbai_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['mumbai_Bytes'];
  canonicalId?: Maybe<Scalars['mumbai_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['mumbai_Bytes']>;
  lpToken?: Maybe<Scalars['mumbai_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<mumbai_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<mumbai_StableSwapEvent>>;
  exchanges?: Maybe<Array<mumbai_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<mumbai_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<mumbai_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<mumbai_SwapWeeklyVolume>>;
};


export type mumbai_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_PooledToken_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_PooledToken_filter>;
};


export type mumbai_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwapEvent_filter>;
};


export type mumbai_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_StableSwapExchange_filter>;
};


export type mumbai_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapHourlyVolume_filter>;
};


export type mumbai_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapDailyVolume_filter>;
};


export type mumbai_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_SwapWeeklyVolume_filter>;
};

export type mumbai_StableSwapAddLiquidityEvent = mumbai_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: mumbai_StableSwap;
  provider: Scalars['mumbai_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['mumbai_Bytes'];
};

export type mumbai_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_StableSwap_filter>;
  provider?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type mumbai_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: mumbai_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['mumbai_Bytes'];
};

export type mumbai_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type mumbai_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: mumbai_StableSwap;
  buyer: Scalars['mumbai_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['mumbai_Bytes'];
};

export type mumbai_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['mumbai_Bytes']>;
  buyer_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type mumbai_StableSwapRemoveLiquidityEvent = mumbai_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: mumbai_StableSwap;
  provider: Scalars['mumbai_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['mumbai_Bytes'];
};

export type mumbai_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_StableSwap_filter>;
  provider?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type mumbai_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  key_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['mumbai_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  lpToken?: InputMaybe<Scalars['mumbai_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<mumbai_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<mumbai_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<mumbai_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<mumbai_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<mumbai_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<mumbai_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type mumbai_SwapDailyVolume = mumbai_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: mumbai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['mumbai_BigDecimal'];
};

export type mumbai_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['mumbai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['mumbai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type mumbai_SwapHourlyVolume = mumbai_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: mumbai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['mumbai_BigDecimal'];
};

export type mumbai_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['mumbai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['mumbai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type mumbai_SwapTradeVolume = {
  stableSwap: mumbai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['mumbai_BigDecimal'];
};

export type mumbai_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['mumbai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['mumbai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type mumbai_SwapWeeklyVolume = mumbai_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: mumbai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['mumbai_BigDecimal'];
};

export type mumbai_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['mumbai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['mumbai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['mumbai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type mumbai_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type mumbai_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
};

export type mumbai_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type mumbai__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['mumbai_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type mumbai__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: mumbai__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

export type xdai_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type xdai_Block_height = {
  hash?: InputMaybe<Scalars['xdai_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type xdai_OrderDirection =
  | 'asc'
  | 'desc';

export type xdai_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['xdai_Bytes'];
};

export type xdai_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['xdai_Bytes']>;
  asset_not?: InputMaybe<Scalars['xdai_Bytes']>;
  asset_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  asset_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  asset_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  asset_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type xdai_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['xdai_Bytes'];
  canonicalId?: Maybe<Scalars['xdai_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['xdai_Bytes']>;
  lpToken?: Maybe<Scalars['xdai_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<xdai_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<xdai_StableSwapEvent>>;
  exchanges?: Maybe<Array<xdai_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<xdai_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<xdai_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<xdai_SwapWeeklyVolume>>;
};


export type xdai_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_PooledToken_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_PooledToken_filter>;
};


export type xdai_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwapEvent_filter>;
};


export type xdai_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_StableSwapExchange_filter>;
};


export type xdai_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapHourlyVolume_filter>;
};


export type xdai_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapDailyVolume_filter>;
};


export type xdai_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_SwapWeeklyVolume_filter>;
};

export type xdai_StableSwapAddLiquidityEvent = xdai_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: xdai_StableSwap;
  provider: Scalars['xdai_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['xdai_Bytes'];
};

export type xdai_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_StableSwap_filter>;
  provider?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_not?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type xdai_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: xdai_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['xdai_Bytes'];
};

export type xdai_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type xdai_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: xdai_StableSwap;
  buyer: Scalars['xdai_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['xdai_Bytes'];
};

export type xdai_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['xdai_Bytes']>;
  buyer_not?: InputMaybe<Scalars['xdai_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type xdai_StableSwapRemoveLiquidityEvent = xdai_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: xdai_StableSwap;
  provider: Scalars['xdai_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['xdai_Bytes'];
};

export type xdai_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_StableSwap_filter>;
  provider?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_not?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type xdai_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['xdai_Bytes']>;
  key_not?: InputMaybe<Scalars['xdai_Bytes']>;
  key_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  key_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  key_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  key_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  key_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['xdai_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['xdai_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  lpToken?: InputMaybe<Scalars['xdai_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['xdai_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<xdai_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<xdai_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<xdai_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<xdai_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<xdai_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<xdai_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type xdai_SwapDailyVolume = xdai_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: xdai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['xdai_BigDecimal'];
};

export type xdai_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['xdai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['xdai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type xdai_SwapHourlyVolume = xdai_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: xdai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['xdai_BigDecimal'];
};

export type xdai_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['xdai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['xdai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type xdai_SwapTradeVolume = {
  stableSwap: xdai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['xdai_BigDecimal'];
};

export type xdai_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['xdai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['xdai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type xdai_SwapWeeklyVolume = xdai_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: xdai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['xdai_BigDecimal'];
};

export type xdai_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['xdai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['xdai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['xdai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type xdai_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type xdai_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
};

export type xdai_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type xdai__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['xdai_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type xdai__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: xdai__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type arbitrumone_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type arbitrumone_Block_height = {
  hash?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type arbitrumone_OrderDirection =
  | 'asc'
  | 'desc';

export type arbitrumone_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['arbitrumone_Bytes'];
};

export type arbitrumone_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  asset_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  asset_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  asset_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  asset_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  asset_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type arbitrumone_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['arbitrumone_Bytes'];
  canonicalId?: Maybe<Scalars['arbitrumone_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['arbitrumone_Bytes']>;
  lpToken?: Maybe<Scalars['arbitrumone_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<arbitrumone_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<arbitrumone_StableSwapEvent>>;
  exchanges?: Maybe<Array<arbitrumone_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<arbitrumone_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<arbitrumone_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<arbitrumone_SwapWeeklyVolume>>;
};


export type arbitrumone_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_PooledToken_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_PooledToken_filter>;
};


export type arbitrumone_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwapEvent_filter>;
};


export type arbitrumone_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_StableSwapExchange_filter>;
};


export type arbitrumone_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapHourlyVolume_filter>;
};


export type arbitrumone_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapDailyVolume_filter>;
};


export type arbitrumone_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_SwapWeeklyVolume_filter>;
};

export type arbitrumone_StableSwapAddLiquidityEvent = arbitrumone_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: arbitrumone_StableSwap;
  provider: Scalars['arbitrumone_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumone_Bytes'];
};

export type arbitrumone_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_StableSwap_filter>;
  provider?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumone_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: arbitrumone_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumone_Bytes'];
};

export type arbitrumone_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumone_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: arbitrumone_StableSwap;
  buyer: Scalars['arbitrumone_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumone_Bytes'];
};

export type arbitrumone_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  buyer_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumone_StableSwapRemoveLiquidityEvent = arbitrumone_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: arbitrumone_StableSwap;
  provider: Scalars['arbitrumone_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumone_Bytes'];
};

export type arbitrumone_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_StableSwap_filter>;
  provider?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumone_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  key_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  lpToken?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<arbitrumone_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<arbitrumone_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<arbitrumone_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<arbitrumone_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<arbitrumone_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<arbitrumone_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type arbitrumone_SwapDailyVolume = arbitrumone_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumone_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumone_BigDecimal'];
};

export type arbitrumone_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumone_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumone_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumone_SwapHourlyVolume = arbitrumone_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumone_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumone_BigDecimal'];
};

export type arbitrumone_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumone_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumone_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumone_SwapTradeVolume = {
  stableSwap: arbitrumone_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumone_BigDecimal'];
};

export type arbitrumone_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumone_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumone_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumone_SwapWeeklyVolume = arbitrumone_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumone_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumone_BigDecimal'];
};

export type arbitrumone_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumone_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumone_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumone_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumone_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type arbitrumone_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
};

export type arbitrumone_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type arbitrumone__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['arbitrumone_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type arbitrumone__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: arbitrumone__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type bnb_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type bnb_Block_height = {
  hash?: InputMaybe<Scalars['bnb_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type bnb_OrderDirection =
  | 'asc'
  | 'desc';

export type bnb_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['bnb_Bytes'];
};

export type bnb_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['bnb_Bytes']>;
  asset_not?: InputMaybe<Scalars['bnb_Bytes']>;
  asset_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  asset_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  asset_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  asset_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type bnb_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['bnb_Bytes'];
  canonicalId?: Maybe<Scalars['bnb_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['bnb_Bytes']>;
  lpToken?: Maybe<Scalars['bnb_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<bnb_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<bnb_StableSwapEvent>>;
  exchanges?: Maybe<Array<bnb_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<bnb_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<bnb_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<bnb_SwapWeeklyVolume>>;
};


export type bnb_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_PooledToken_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_PooledToken_filter>;
};


export type bnb_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwapEvent_filter>;
};


export type bnb_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_StableSwapExchange_filter>;
};


export type bnb_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapHourlyVolume_filter>;
};


export type bnb_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapDailyVolume_filter>;
};


export type bnb_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_SwapWeeklyVolume_filter>;
};

export type bnb_StableSwapAddLiquidityEvent = bnb_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: bnb_StableSwap;
  provider: Scalars['bnb_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['bnb_Bytes'];
};

export type bnb_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_StableSwap_filter>;
  provider?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_not?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_not?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type bnb_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: bnb_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['bnb_Bytes'];
};

export type bnb_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_not?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type bnb_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: bnb_StableSwap;
  buyer: Scalars['bnb_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['bnb_Bytes'];
};

export type bnb_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['bnb_Bytes']>;
  buyer_not?: InputMaybe<Scalars['bnb_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_not?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type bnb_StableSwapRemoveLiquidityEvent = bnb_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: bnb_StableSwap;
  provider: Scalars['bnb_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['bnb_Bytes'];
};

export type bnb_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_StableSwap_filter>;
  provider?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_not?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_not?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type bnb_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['bnb_Bytes']>;
  key_not?: InputMaybe<Scalars['bnb_Bytes']>;
  key_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  key_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  key_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  key_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  key_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['bnb_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['bnb_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  lpToken?: InputMaybe<Scalars['bnb_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['bnb_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<bnb_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<bnb_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<bnb_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<bnb_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<bnb_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<bnb_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type bnb_SwapDailyVolume = bnb_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: bnb_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['bnb_BigDecimal'];
};

export type bnb_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['bnb_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['bnb_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type bnb_SwapHourlyVolume = bnb_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: bnb_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['bnb_BigDecimal'];
};

export type bnb_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['bnb_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['bnb_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type bnb_SwapTradeVolume = {
  stableSwap: bnb_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['bnb_BigDecimal'];
};

export type bnb_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['bnb_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['bnb_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type bnb_SwapWeeklyVolume = bnb_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: bnb_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['bnb_BigDecimal'];
};

export type bnb_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['bnb_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['bnb_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['bnb_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type bnb_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type bnb_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
};

export type bnb_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type bnb__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['bnb_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type bnb__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: bnb__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type goerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type goerli_Block_height = {
  hash?: InputMaybe<Scalars['goerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type goerli_OrderDirection =
  | 'asc'
  | 'desc';

export type goerli_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['goerli_Bytes'];
};

export type goerli_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['goerli_Bytes']>;
  asset_not?: InputMaybe<Scalars['goerli_Bytes']>;
  asset_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  asset_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  asset_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  asset_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type goerli_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['goerli_Bytes'];
  canonicalId?: Maybe<Scalars['goerli_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['goerli_Bytes']>;
  lpToken?: Maybe<Scalars['goerli_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<goerli_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<goerli_StableSwapEvent>>;
  exchanges?: Maybe<Array<goerli_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<goerli_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<goerli_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<goerli_SwapWeeklyVolume>>;
};


export type goerli_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_PooledToken_filter>;
};


export type goerli_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwapEvent_filter>;
};


export type goerli_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_StableSwapExchange_filter>;
};


export type goerli_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapHourlyVolume_filter>;
};


export type goerli_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapDailyVolume_filter>;
};


export type goerli_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_SwapWeeklyVolume_filter>;
};

export type goerli_StableSwapAddLiquidityEvent = goerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: goerli_StableSwap;
  provider: Scalars['goerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['goerli_Bytes'];
};

export type goerli_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type goerli_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: goerli_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['goerli_Bytes'];
};

export type goerli_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type goerli_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: goerli_StableSwap;
  buyer: Scalars['goerli_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['goerli_Bytes'];
};

export type goerli_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['goerli_Bytes']>;
  buyer_not?: InputMaybe<Scalars['goerli_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type goerli_StableSwapRemoveLiquidityEvent = goerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: goerli_StableSwap;
  provider: Scalars['goerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['goerli_Bytes'];
};

export type goerli_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type goerli_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['goerli_Bytes']>;
  key_not?: InputMaybe<Scalars['goerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['goerli_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['goerli_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  lpToken?: InputMaybe<Scalars['goerli_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['goerli_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<goerli_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<goerli_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<goerli_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<goerli_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<goerli_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<goerli_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type goerli_SwapDailyVolume = goerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: goerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['goerli_BigDecimal'];
};

export type goerli_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['goerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['goerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type goerli_SwapHourlyVolume = goerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: goerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['goerli_BigDecimal'];
};

export type goerli_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['goerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['goerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type goerli_SwapTradeVolume = {
  stableSwap: goerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['goerli_BigDecimal'];
};

export type goerli_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['goerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['goerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type goerli_SwapWeeklyVolume = goerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: goerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['goerli_BigDecimal'];
};

export type goerli_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['goerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['goerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['goerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type goerli_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type goerli_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
};

export type goerli_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type goerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['goerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type goerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: goerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type stagingoptimismgoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type stagingoptimismgoerli_Block_height = {
  hash?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type stagingoptimismgoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type stagingoptimismgoerli_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['stagingoptimismgoerli_Bytes'];
};

export type stagingoptimismgoerli_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type stagingoptimismgoerli_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['stagingoptimismgoerli_Bytes'];
  canonicalId?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  lpToken?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<stagingoptimismgoerli_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<stagingoptimismgoerli_StableSwapEvent>>;
  exchanges?: Maybe<Array<stagingoptimismgoerli_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<stagingoptimismgoerli_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<stagingoptimismgoerli_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<stagingoptimismgoerli_SwapWeeklyVolume>>;
};


export type stagingoptimismgoerli_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_PooledToken_filter>;
};


export type stagingoptimismgoerli_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwapEvent_filter>;
};


export type stagingoptimismgoerli_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_StableSwapExchange_filter>;
};


export type stagingoptimismgoerli_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapHourlyVolume_filter>;
};


export type stagingoptimismgoerli_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapDailyVolume_filter>;
};


export type stagingoptimismgoerli_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_SwapWeeklyVolume_filter>;
};

export type stagingoptimismgoerli_StableSwapAddLiquidityEvent = stagingoptimismgoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_StableSwap;
  provider: Scalars['stagingoptimismgoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingoptimismgoerli_Bytes'];
};

export type stagingoptimismgoerli_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingoptimismgoerli_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingoptimismgoerli_Bytes'];
};

export type stagingoptimismgoerli_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingoptimismgoerli_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_StableSwap;
  buyer: Scalars['stagingoptimismgoerli_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingoptimismgoerli_Bytes'];
};

export type stagingoptimismgoerli_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  buyer_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingoptimismgoerli_StableSwapRemoveLiquidityEvent = stagingoptimismgoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_StableSwap;
  provider: Scalars['stagingoptimismgoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingoptimismgoerli_Bytes'];
};

export type stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingoptimismgoerli_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  lpToken?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<stagingoptimismgoerli_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<stagingoptimismgoerli_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<stagingoptimismgoerli_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<stagingoptimismgoerli_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<stagingoptimismgoerli_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<stagingoptimismgoerli_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type stagingoptimismgoerli_SwapDailyVolume = stagingoptimismgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingoptimismgoerli_BigDecimal'];
};

export type stagingoptimismgoerli_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingoptimismgoerli_SwapHourlyVolume = stagingoptimismgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingoptimismgoerli_BigDecimal'];
};

export type stagingoptimismgoerli_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingoptimismgoerli_SwapTradeVolume = {
  stableSwap: stagingoptimismgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingoptimismgoerli_BigDecimal'];
};

export type stagingoptimismgoerli_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingoptimismgoerli_SwapWeeklyVolume = stagingoptimismgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingoptimismgoerli_BigDecimal'];
};

export type stagingoptimismgoerli_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingoptimismgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingoptimismgoerli_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type stagingoptimismgoerli_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
};

export type stagingoptimismgoerli_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type stagingoptimismgoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type stagingoptimismgoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: stagingoptimismgoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type optimism_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type optimism_Block_height = {
  hash?: InputMaybe<Scalars['optimism_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type optimism_OrderDirection =
  | 'asc'
  | 'desc';

export type optimism_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['optimism_Bytes'];
};

export type optimism_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['optimism_Bytes']>;
  asset_not?: InputMaybe<Scalars['optimism_Bytes']>;
  asset_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  asset_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  asset_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  asset_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type optimism_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['optimism_Bytes'];
  canonicalId?: Maybe<Scalars['optimism_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['optimism_Bytes']>;
  lpToken?: Maybe<Scalars['optimism_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<optimism_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<optimism_StableSwapEvent>>;
  exchanges?: Maybe<Array<optimism_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<optimism_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<optimism_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<optimism_SwapWeeklyVolume>>;
};


export type optimism_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_PooledToken_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_PooledToken_filter>;
};


export type optimism_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwapEvent_filter>;
};


export type optimism_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_StableSwapExchange_filter>;
};


export type optimism_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapHourlyVolume_filter>;
};


export type optimism_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapDailyVolume_filter>;
};


export type optimism_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_SwapWeeklyVolume_filter>;
};

export type optimism_StableSwapAddLiquidityEvent = optimism_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: optimism_StableSwap;
  provider: Scalars['optimism_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimism_Bytes'];
};

export type optimism_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_StableSwap_filter>;
  provider?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_not?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimism_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: optimism_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimism_Bytes'];
};

export type optimism_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimism_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: optimism_StableSwap;
  buyer: Scalars['optimism_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimism_Bytes'];
};

export type optimism_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['optimism_Bytes']>;
  buyer_not?: InputMaybe<Scalars['optimism_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimism_StableSwapRemoveLiquidityEvent = optimism_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: optimism_StableSwap;
  provider: Scalars['optimism_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimism_Bytes'];
};

export type optimism_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_StableSwap_filter>;
  provider?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_not?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimism_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['optimism_Bytes']>;
  key_not?: InputMaybe<Scalars['optimism_Bytes']>;
  key_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  key_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  key_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  key_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  key_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['optimism_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['optimism_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  lpToken?: InputMaybe<Scalars['optimism_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['optimism_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<optimism_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<optimism_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<optimism_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<optimism_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<optimism_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<optimism_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type optimism_SwapDailyVolume = optimism_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimism_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimism_BigDecimal'];
};

export type optimism_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimism_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimism_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimism_SwapHourlyVolume = optimism_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimism_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimism_BigDecimal'];
};

export type optimism_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimism_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimism_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimism_SwapTradeVolume = {
  stableSwap: optimism_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimism_BigDecimal'];
};

export type optimism_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimism_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimism_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimism_SwapWeeklyVolume = optimism_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimism_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimism_BigDecimal'];
};

export type optimism_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimism_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimism_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimism_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimism_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type optimism_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
};

export type optimism_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type optimism__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['optimism_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type optimism__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: optimism__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type polygon_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type polygon_Block_height = {
  hash?: InputMaybe<Scalars['polygon_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type polygon_OrderDirection =
  | 'asc'
  | 'desc';

export type polygon_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['polygon_Bytes'];
};

export type polygon_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['polygon_Bytes']>;
  asset_not?: InputMaybe<Scalars['polygon_Bytes']>;
  asset_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  asset_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  asset_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  asset_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type polygon_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['polygon_Bytes'];
  canonicalId?: Maybe<Scalars['polygon_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['polygon_Bytes']>;
  lpToken?: Maybe<Scalars['polygon_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<polygon_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<polygon_StableSwapEvent>>;
  exchanges?: Maybe<Array<polygon_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<polygon_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<polygon_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<polygon_SwapWeeklyVolume>>;
};


export type polygon_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_PooledToken_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_PooledToken_filter>;
};


export type polygon_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwapEvent_filter>;
};


export type polygon_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_StableSwapExchange_filter>;
};


export type polygon_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapHourlyVolume_filter>;
};


export type polygon_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapDailyVolume_filter>;
};


export type polygon_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_SwapWeeklyVolume_filter>;
};

export type polygon_StableSwapAddLiquidityEvent = polygon_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: polygon_StableSwap;
  provider: Scalars['polygon_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['polygon_Bytes'];
};

export type polygon_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_StableSwap_filter>;
  provider?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_not?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_not?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type polygon_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: polygon_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['polygon_Bytes'];
};

export type polygon_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_not?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type polygon_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: polygon_StableSwap;
  buyer: Scalars['polygon_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['polygon_Bytes'];
};

export type polygon_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['polygon_Bytes']>;
  buyer_not?: InputMaybe<Scalars['polygon_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_not?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type polygon_StableSwapRemoveLiquidityEvent = polygon_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: polygon_StableSwap;
  provider: Scalars['polygon_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['polygon_Bytes'];
};

export type polygon_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_StableSwap_filter>;
  provider?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_not?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_not?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type polygon_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['polygon_Bytes']>;
  key_not?: InputMaybe<Scalars['polygon_Bytes']>;
  key_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  key_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  key_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  key_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  key_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['polygon_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['polygon_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  lpToken?: InputMaybe<Scalars['polygon_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['polygon_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<polygon_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<polygon_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<polygon_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<polygon_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<polygon_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<polygon_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type polygon_SwapDailyVolume = polygon_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: polygon_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['polygon_BigDecimal'];
};

export type polygon_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['polygon_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['polygon_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type polygon_SwapHourlyVolume = polygon_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: polygon_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['polygon_BigDecimal'];
};

export type polygon_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['polygon_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['polygon_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type polygon_SwapTradeVolume = {
  stableSwap: polygon_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['polygon_BigDecimal'];
};

export type polygon_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['polygon_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['polygon_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type polygon_SwapWeeklyVolume = polygon_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: polygon_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['polygon_BigDecimal'];
};

export type polygon_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['polygon_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['polygon_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['polygon_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type polygon_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type polygon_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
};

export type polygon_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type polygon__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['polygon_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type polygon__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: polygon__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type staginggoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type staginggoerli_Block_height = {
  hash?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type staginggoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type staginggoerli_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type staginggoerli_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['staginggoerli_Bytes'];
  canonicalId?: Maybe<Scalars['staginggoerli_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['staginggoerli_Bytes']>;
  lpToken?: Maybe<Scalars['staginggoerli_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<staginggoerli_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<staginggoerli_StableSwapEvent>>;
  exchanges?: Maybe<Array<staginggoerli_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<staginggoerli_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<staginggoerli_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<staginggoerli_SwapWeeklyVolume>>;
};


export type staginggoerli_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_PooledToken_filter>;
};


export type staginggoerli_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapEvent_filter>;
};


export type staginggoerli_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapExchange_filter>;
};


export type staginggoerli_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapHourlyVolume_filter>;
};


export type staginggoerli_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapDailyVolume_filter>;
};


export type staginggoerli_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapWeeklyVolume_filter>;
};

export type staginggoerli_StableSwapAddLiquidityEvent = staginggoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  provider: Scalars['staginggoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  buyer: Scalars['staginggoerli_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_StableSwapRemoveLiquidityEvent = staginggoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  provider: Scalars['staginggoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<staginggoerli_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<staginggoerli_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<staginggoerli_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<staginggoerli_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<staginggoerli_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<staginggoerli_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type staginggoerli_SwapDailyVolume = staginggoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_BigDecimal'];
};

export type staginggoerli_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_SwapHourlyVolume = staginggoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_BigDecimal'];
};

export type staginggoerli_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_SwapTradeVolume = {
  stableSwap: staginggoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_BigDecimal'];
};

export type staginggoerli_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_SwapWeeklyVolume = staginggoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_BigDecimal'];
};

export type staginggoerli_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type staginggoerli_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
};

export type staginggoerli_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type staginggoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['staginggoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type staginggoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: staginggoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type arbitrumgoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type arbitrumgoerli_Block_height = {
  hash?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type arbitrumgoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type arbitrumgoerli_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['arbitrumgoerli_Bytes'];
};

export type arbitrumgoerli_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  asset_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  asset_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  asset_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  asset_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  asset_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type arbitrumgoerli_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['arbitrumgoerli_Bytes'];
  canonicalId?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  lpToken?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<arbitrumgoerli_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<arbitrumgoerli_StableSwapEvent>>;
  exchanges?: Maybe<Array<arbitrumgoerli_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<arbitrumgoerli_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<arbitrumgoerli_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<arbitrumgoerli_SwapWeeklyVolume>>;
};


export type arbitrumgoerli_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_PooledToken_filter>;
};


export type arbitrumgoerli_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwapEvent_filter>;
};


export type arbitrumgoerli_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_StableSwapExchange_filter>;
};


export type arbitrumgoerli_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapHourlyVolume_filter>;
};


export type arbitrumgoerli_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapDailyVolume_filter>;
};


export type arbitrumgoerli_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_SwapWeeklyVolume_filter>;
};

export type arbitrumgoerli_StableSwapAddLiquidityEvent = arbitrumgoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_StableSwap;
  provider: Scalars['arbitrumgoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumgoerli_Bytes'];
};

export type arbitrumgoerli_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumgoerli_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumgoerli_Bytes'];
};

export type arbitrumgoerli_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumgoerli_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_StableSwap;
  buyer: Scalars['arbitrumgoerli_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumgoerli_Bytes'];
};

export type arbitrumgoerli_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  buyer_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumgoerli_StableSwapRemoveLiquidityEvent = arbitrumgoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_StableSwap;
  provider: Scalars['arbitrumgoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumgoerli_Bytes'];
};

export type arbitrumgoerli_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumgoerli_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  lpToken?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<arbitrumgoerli_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<arbitrumgoerli_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<arbitrumgoerli_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<arbitrumgoerli_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<arbitrumgoerli_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<arbitrumgoerli_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type arbitrumgoerli_SwapDailyVolume = arbitrumgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumgoerli_BigDecimal'];
};

export type arbitrumgoerli_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumgoerli_SwapHourlyVolume = arbitrumgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumgoerli_BigDecimal'];
};

export type arbitrumgoerli_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumgoerli_SwapTradeVolume = {
  stableSwap: arbitrumgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumgoerli_BigDecimal'];
};

export type arbitrumgoerli_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumgoerli_SwapWeeklyVolume = arbitrumgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumgoerli_BigDecimal'];
};

export type arbitrumgoerli_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumgoerli_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type arbitrumgoerli_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
};

export type arbitrumgoerli_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type arbitrumgoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type arbitrumgoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: arbitrumgoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type optimismgoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type optimismgoerli_Block_height = {
  hash?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type optimismgoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type optimismgoerli_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['optimismgoerli_Bytes'];
};

export type optimismgoerli_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  asset_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  asset_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  asset_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  asset_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  asset_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type optimismgoerli_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['optimismgoerli_Bytes'];
  canonicalId?: Maybe<Scalars['optimismgoerli_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['optimismgoerli_Bytes']>;
  lpToken?: Maybe<Scalars['optimismgoerli_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<optimismgoerli_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<optimismgoerli_StableSwapEvent>>;
  exchanges?: Maybe<Array<optimismgoerli_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<optimismgoerli_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<optimismgoerli_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<optimismgoerli_SwapWeeklyVolume>>;
};


export type optimismgoerli_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_PooledToken_filter>;
};


export type optimismgoerli_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwapEvent_filter>;
};


export type optimismgoerli_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_StableSwapExchange_filter>;
};


export type optimismgoerli_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapHourlyVolume_filter>;
};


export type optimismgoerli_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapDailyVolume_filter>;
};


export type optimismgoerli_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_SwapWeeklyVolume_filter>;
};

export type optimismgoerli_StableSwapAddLiquidityEvent = optimismgoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_StableSwap;
  provider: Scalars['optimismgoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimismgoerli_Bytes'];
};

export type optimismgoerli_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimismgoerli_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimismgoerli_Bytes'];
};

export type optimismgoerli_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimismgoerli_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_StableSwap;
  buyer: Scalars['optimismgoerli_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimismgoerli_Bytes'];
};

export type optimismgoerli_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  buyer_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimismgoerli_StableSwapRemoveLiquidityEvent = optimismgoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_StableSwap;
  provider: Scalars['optimismgoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimismgoerli_Bytes'];
};

export type optimismgoerli_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimismgoerli_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  lpToken?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<optimismgoerli_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<optimismgoerli_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<optimismgoerli_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<optimismgoerli_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<optimismgoerli_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<optimismgoerli_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type optimismgoerli_SwapDailyVolume = optimismgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimismgoerli_BigDecimal'];
};

export type optimismgoerli_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimismgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimismgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimismgoerli_SwapHourlyVolume = optimismgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimismgoerli_BigDecimal'];
};

export type optimismgoerli_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimismgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimismgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimismgoerli_SwapTradeVolume = {
  stableSwap: optimismgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimismgoerli_BigDecimal'];
};

export type optimismgoerli_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimismgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimismgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimismgoerli_SwapWeeklyVolume = optimismgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimismgoerli_BigDecimal'];
};

export type optimismgoerli_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimismgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimismgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimismgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimismgoerli_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type optimismgoerli_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
};

export type optimismgoerli_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type optimismgoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['optimismgoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type optimismgoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: optimismgoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type stagingmumbai_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type stagingmumbai_Block_height = {
  hash?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type stagingmumbai_OrderDirection =
  | 'asc'
  | 'desc';

export type stagingmumbai_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['stagingmumbai_Bytes'];
};

export type stagingmumbai_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  asset_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  asset_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  asset_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  asset_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  asset_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type stagingmumbai_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['stagingmumbai_Bytes'];
  canonicalId?: Maybe<Scalars['stagingmumbai_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['stagingmumbai_Bytes']>;
  lpToken?: Maybe<Scalars['stagingmumbai_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<stagingmumbai_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<stagingmumbai_StableSwapEvent>>;
  exchanges?: Maybe<Array<stagingmumbai_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<stagingmumbai_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<stagingmumbai_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<stagingmumbai_SwapWeeklyVolume>>;
};


export type stagingmumbai_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_PooledToken_filter>;
};


export type stagingmumbai_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwapEvent_filter>;
};


export type stagingmumbai_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_StableSwapExchange_filter>;
};


export type stagingmumbai_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapHourlyVolume_filter>;
};


export type stagingmumbai_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapDailyVolume_filter>;
};


export type stagingmumbai_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_SwapWeeklyVolume_filter>;
};

export type stagingmumbai_StableSwapAddLiquidityEvent = stagingmumbai_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_StableSwap;
  provider: Scalars['stagingmumbai_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingmumbai_Bytes'];
};

export type stagingmumbai_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingmumbai_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingmumbai_Bytes'];
};

export type stagingmumbai_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingmumbai_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_StableSwap;
  buyer: Scalars['stagingmumbai_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingmumbai_Bytes'];
};

export type stagingmumbai_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  buyer_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingmumbai_StableSwapRemoveLiquidityEvent = stagingmumbai_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_StableSwap;
  provider: Scalars['stagingmumbai_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingmumbai_Bytes'];
};

export type stagingmumbai_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingmumbai_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  key_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  lpToken?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<stagingmumbai_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<stagingmumbai_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<stagingmumbai_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<stagingmumbai_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<stagingmumbai_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<stagingmumbai_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type stagingmumbai_SwapDailyVolume = stagingmumbai_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingmumbai_BigDecimal'];
};

export type stagingmumbai_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingmumbai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingmumbai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingmumbai_SwapHourlyVolume = stagingmumbai_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingmumbai_BigDecimal'];
};

export type stagingmumbai_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingmumbai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingmumbai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingmumbai_SwapTradeVolume = {
  stableSwap: stagingmumbai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingmumbai_BigDecimal'];
};

export type stagingmumbai_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingmumbai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingmumbai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingmumbai_SwapWeeklyVolume = stagingmumbai_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingmumbai_BigDecimal'];
};

export type stagingmumbai_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingmumbai_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingmumbai_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingmumbai_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingmumbai_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type stagingmumbai_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
};

export type stagingmumbai_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type stagingmumbai__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['stagingmumbai_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type stagingmumbai__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: stagingmumbai__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type stagingarbitrumgoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type stagingarbitrumgoerli_Block_height = {
  hash?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type stagingarbitrumgoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type stagingarbitrumgoerli_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['stagingarbitrumgoerli_Bytes'];
};

export type stagingarbitrumgoerli_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type stagingarbitrumgoerli_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['stagingarbitrumgoerli_Bytes'];
  canonicalId?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  lpToken?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<stagingarbitrumgoerli_PooledToken>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<stagingarbitrumgoerli_StableSwapEvent>>;
  exchanges?: Maybe<Array<stagingarbitrumgoerli_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<stagingarbitrumgoerli_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<stagingarbitrumgoerli_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<stagingarbitrumgoerli_SwapWeeklyVolume>>;
};


export type stagingarbitrumgoerli_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_PooledToken_filter>;
};


export type stagingarbitrumgoerli_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwapEvent_filter>;
};


export type stagingarbitrumgoerli_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_StableSwapExchange_filter>;
};


export type stagingarbitrumgoerli_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapHourlyVolume_filter>;
};


export type stagingarbitrumgoerli_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapDailyVolume_filter>;
};


export type stagingarbitrumgoerli_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_SwapWeeklyVolume_filter>;
};

export type stagingarbitrumgoerli_StableSwapAddLiquidityEvent = stagingarbitrumgoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_StableSwap;
  provider: Scalars['stagingarbitrumgoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingarbitrumgoerli_Bytes'];
};

export type stagingarbitrumgoerli_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingarbitrumgoerli_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingarbitrumgoerli_Bytes'];
};

export type stagingarbitrumgoerli_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingarbitrumgoerli_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_StableSwap;
  buyer: Scalars['stagingarbitrumgoerli_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingarbitrumgoerli_Bytes'];
};

export type stagingarbitrumgoerli_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  buyer_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent = stagingarbitrumgoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_StableSwap;
  provider: Scalars['stagingarbitrumgoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingarbitrumgoerli_Bytes'];
};

export type stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingarbitrumgoerli_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  lpToken?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<stagingarbitrumgoerli_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<stagingarbitrumgoerli_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<stagingarbitrumgoerli_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<stagingarbitrumgoerli_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<stagingarbitrumgoerli_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<stagingarbitrumgoerli_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type stagingarbitrumgoerli_SwapDailyVolume = stagingarbitrumgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingarbitrumgoerli_BigDecimal'];
};

export type stagingarbitrumgoerli_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingarbitrumgoerli_SwapHourlyVolume = stagingarbitrumgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingarbitrumgoerli_BigDecimal'];
};

export type stagingarbitrumgoerli_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingarbitrumgoerli_SwapTradeVolume = {
  stableSwap: stagingarbitrumgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingarbitrumgoerli_BigDecimal'];
};

export type stagingarbitrumgoerli_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingarbitrumgoerli_SwapWeeklyVolume = stagingarbitrumgoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingarbitrumgoerli_BigDecimal'];
};

export type stagingarbitrumgoerli_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingarbitrumgoerli_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type stagingarbitrumgoerli_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
};

export type stagingarbitrumgoerli_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type stagingarbitrumgoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type stagingarbitrumgoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: stagingarbitrumgoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  Query: ResolverTypeWrapper<{}>;
  Subscription: ResolverTypeWrapper<{}>;
  mumbai_BigDecimal: ResolverTypeWrapper<Scalars['mumbai_BigDecimal']>;
  BigInt: ResolverTypeWrapper<Scalars['BigInt']>;
  mumbai_BlockChangedFilter: mumbai_BlockChangedFilter;
  mumbai_Block_height: mumbai_Block_height;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  mumbai_Bytes: ResolverTypeWrapper<Scalars['mumbai_Bytes']>;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  mumbai_OrderDirection: mumbai_OrderDirection;
  mumbai_PooledToken: ResolverTypeWrapper<mumbai_PooledToken>;
  mumbai_PooledToken_filter: mumbai_PooledToken_filter;
  mumbai_PooledToken_orderBy: mumbai_PooledToken_orderBy;
  mumbai_StableSwap: ResolverTypeWrapper<mumbai_StableSwap>;
  mumbai_StableSwapAddLiquidityEvent: ResolverTypeWrapper<mumbai_StableSwapAddLiquidityEvent>;
  mumbai_StableSwapAddLiquidityEvent_filter: mumbai_StableSwapAddLiquidityEvent_filter;
  mumbai_StableSwapAddLiquidityEvent_orderBy: mumbai_StableSwapAddLiquidityEvent_orderBy;
  mumbai_StableSwapEvent: ResolversTypes['mumbai_StableSwapAddLiquidityEvent'] | ResolversTypes['mumbai_StableSwapRemoveLiquidityEvent'];
  mumbai_StableSwapEvent_filter: mumbai_StableSwapEvent_filter;
  mumbai_StableSwapEvent_orderBy: mumbai_StableSwapEvent_orderBy;
  mumbai_StableSwapExchange: ResolverTypeWrapper<mumbai_StableSwapExchange>;
  mumbai_StableSwapExchange_filter: mumbai_StableSwapExchange_filter;
  mumbai_StableSwapExchange_orderBy: mumbai_StableSwapExchange_orderBy;
  mumbai_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<mumbai_StableSwapRemoveLiquidityEvent>;
  mumbai_StableSwapRemoveLiquidityEvent_filter: mumbai_StableSwapRemoveLiquidityEvent_filter;
  mumbai_StableSwapRemoveLiquidityEvent_orderBy: mumbai_StableSwapRemoveLiquidityEvent_orderBy;
  mumbai_StableSwap_filter: mumbai_StableSwap_filter;
  mumbai_StableSwap_orderBy: mumbai_StableSwap_orderBy;
  String: ResolverTypeWrapper<Scalars['String']>;
  mumbai_SwapDailyVolume: ResolverTypeWrapper<mumbai_SwapDailyVolume>;
  mumbai_SwapDailyVolume_filter: mumbai_SwapDailyVolume_filter;
  mumbai_SwapDailyVolume_orderBy: mumbai_SwapDailyVolume_orderBy;
  mumbai_SwapHourlyVolume: ResolverTypeWrapper<mumbai_SwapHourlyVolume>;
  mumbai_SwapHourlyVolume_filter: mumbai_SwapHourlyVolume_filter;
  mumbai_SwapHourlyVolume_orderBy: mumbai_SwapHourlyVolume_orderBy;
  mumbai_SwapTradeVolume: ResolversTypes['mumbai_SwapDailyVolume'] | ResolversTypes['mumbai_SwapHourlyVolume'] | ResolversTypes['mumbai_SwapWeeklyVolume'];
  mumbai_SwapTradeVolume_filter: mumbai_SwapTradeVolume_filter;
  mumbai_SwapTradeVolume_orderBy: mumbai_SwapTradeVolume_orderBy;
  mumbai_SwapWeeklyVolume: ResolverTypeWrapper<mumbai_SwapWeeklyVolume>;
  mumbai_SwapWeeklyVolume_filter: mumbai_SwapWeeklyVolume_filter;
  mumbai_SwapWeeklyVolume_orderBy: mumbai_SwapWeeklyVolume_orderBy;
  mumbai_SystemInfo: ResolverTypeWrapper<mumbai_SystemInfo>;
  mumbai_SystemInfo_filter: mumbai_SystemInfo_filter;
  mumbai_SystemInfo_orderBy: mumbai_SystemInfo_orderBy;
  mumbai__Block_: ResolverTypeWrapper<mumbai__Block_>;
  mumbai__Meta_: ResolverTypeWrapper<mumbai__Meta_>;
  _SubgraphErrorPolicy_: _SubgraphErrorPolicy_;
  xdai_BigDecimal: ResolverTypeWrapper<Scalars['xdai_BigDecimal']>;
  xdai_BlockChangedFilter: xdai_BlockChangedFilter;
  xdai_Block_height: xdai_Block_height;
  xdai_Bytes: ResolverTypeWrapper<Scalars['xdai_Bytes']>;
  xdai_OrderDirection: xdai_OrderDirection;
  xdai_PooledToken: ResolverTypeWrapper<xdai_PooledToken>;
  xdai_PooledToken_filter: xdai_PooledToken_filter;
  xdai_PooledToken_orderBy: xdai_PooledToken_orderBy;
  xdai_StableSwap: ResolverTypeWrapper<xdai_StableSwap>;
  xdai_StableSwapAddLiquidityEvent: ResolverTypeWrapper<xdai_StableSwapAddLiquidityEvent>;
  xdai_StableSwapAddLiquidityEvent_filter: xdai_StableSwapAddLiquidityEvent_filter;
  xdai_StableSwapAddLiquidityEvent_orderBy: xdai_StableSwapAddLiquidityEvent_orderBy;
  xdai_StableSwapEvent: ResolversTypes['xdai_StableSwapAddLiquidityEvent'] | ResolversTypes['xdai_StableSwapRemoveLiquidityEvent'];
  xdai_StableSwapEvent_filter: xdai_StableSwapEvent_filter;
  xdai_StableSwapEvent_orderBy: xdai_StableSwapEvent_orderBy;
  xdai_StableSwapExchange: ResolverTypeWrapper<xdai_StableSwapExchange>;
  xdai_StableSwapExchange_filter: xdai_StableSwapExchange_filter;
  xdai_StableSwapExchange_orderBy: xdai_StableSwapExchange_orderBy;
  xdai_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<xdai_StableSwapRemoveLiquidityEvent>;
  xdai_StableSwapRemoveLiquidityEvent_filter: xdai_StableSwapRemoveLiquidityEvent_filter;
  xdai_StableSwapRemoveLiquidityEvent_orderBy: xdai_StableSwapRemoveLiquidityEvent_orderBy;
  xdai_StableSwap_filter: xdai_StableSwap_filter;
  xdai_StableSwap_orderBy: xdai_StableSwap_orderBy;
  xdai_SwapDailyVolume: ResolverTypeWrapper<xdai_SwapDailyVolume>;
  xdai_SwapDailyVolume_filter: xdai_SwapDailyVolume_filter;
  xdai_SwapDailyVolume_orderBy: xdai_SwapDailyVolume_orderBy;
  xdai_SwapHourlyVolume: ResolverTypeWrapper<xdai_SwapHourlyVolume>;
  xdai_SwapHourlyVolume_filter: xdai_SwapHourlyVolume_filter;
  xdai_SwapHourlyVolume_orderBy: xdai_SwapHourlyVolume_orderBy;
  xdai_SwapTradeVolume: ResolversTypes['xdai_SwapDailyVolume'] | ResolversTypes['xdai_SwapHourlyVolume'] | ResolversTypes['xdai_SwapWeeklyVolume'];
  xdai_SwapTradeVolume_filter: xdai_SwapTradeVolume_filter;
  xdai_SwapTradeVolume_orderBy: xdai_SwapTradeVolume_orderBy;
  xdai_SwapWeeklyVolume: ResolverTypeWrapper<xdai_SwapWeeklyVolume>;
  xdai_SwapWeeklyVolume_filter: xdai_SwapWeeklyVolume_filter;
  xdai_SwapWeeklyVolume_orderBy: xdai_SwapWeeklyVolume_orderBy;
  xdai_SystemInfo: ResolverTypeWrapper<xdai_SystemInfo>;
  xdai_SystemInfo_filter: xdai_SystemInfo_filter;
  xdai_SystemInfo_orderBy: xdai_SystemInfo_orderBy;
  xdai__Block_: ResolverTypeWrapper<xdai__Block_>;
  xdai__Meta_: ResolverTypeWrapper<xdai__Meta_>;
  arbitrumone_BigDecimal: ResolverTypeWrapper<Scalars['arbitrumone_BigDecimal']>;
  arbitrumone_BlockChangedFilter: arbitrumone_BlockChangedFilter;
  arbitrumone_Block_height: arbitrumone_Block_height;
  arbitrumone_Bytes: ResolverTypeWrapper<Scalars['arbitrumone_Bytes']>;
  arbitrumone_OrderDirection: arbitrumone_OrderDirection;
  arbitrumone_PooledToken: ResolverTypeWrapper<arbitrumone_PooledToken>;
  arbitrumone_PooledToken_filter: arbitrumone_PooledToken_filter;
  arbitrumone_PooledToken_orderBy: arbitrumone_PooledToken_orderBy;
  arbitrumone_StableSwap: ResolverTypeWrapper<arbitrumone_StableSwap>;
  arbitrumone_StableSwapAddLiquidityEvent: ResolverTypeWrapper<arbitrumone_StableSwapAddLiquidityEvent>;
  arbitrumone_StableSwapAddLiquidityEvent_filter: arbitrumone_StableSwapAddLiquidityEvent_filter;
  arbitrumone_StableSwapAddLiquidityEvent_orderBy: arbitrumone_StableSwapAddLiquidityEvent_orderBy;
  arbitrumone_StableSwapEvent: ResolversTypes['arbitrumone_StableSwapAddLiquidityEvent'] | ResolversTypes['arbitrumone_StableSwapRemoveLiquidityEvent'];
  arbitrumone_StableSwapEvent_filter: arbitrumone_StableSwapEvent_filter;
  arbitrumone_StableSwapEvent_orderBy: arbitrumone_StableSwapEvent_orderBy;
  arbitrumone_StableSwapExchange: ResolverTypeWrapper<arbitrumone_StableSwapExchange>;
  arbitrumone_StableSwapExchange_filter: arbitrumone_StableSwapExchange_filter;
  arbitrumone_StableSwapExchange_orderBy: arbitrumone_StableSwapExchange_orderBy;
  arbitrumone_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<arbitrumone_StableSwapRemoveLiquidityEvent>;
  arbitrumone_StableSwapRemoveLiquidityEvent_filter: arbitrumone_StableSwapRemoveLiquidityEvent_filter;
  arbitrumone_StableSwapRemoveLiquidityEvent_orderBy: arbitrumone_StableSwapRemoveLiquidityEvent_orderBy;
  arbitrumone_StableSwap_filter: arbitrumone_StableSwap_filter;
  arbitrumone_StableSwap_orderBy: arbitrumone_StableSwap_orderBy;
  arbitrumone_SwapDailyVolume: ResolverTypeWrapper<arbitrumone_SwapDailyVolume>;
  arbitrumone_SwapDailyVolume_filter: arbitrumone_SwapDailyVolume_filter;
  arbitrumone_SwapDailyVolume_orderBy: arbitrumone_SwapDailyVolume_orderBy;
  arbitrumone_SwapHourlyVolume: ResolverTypeWrapper<arbitrumone_SwapHourlyVolume>;
  arbitrumone_SwapHourlyVolume_filter: arbitrumone_SwapHourlyVolume_filter;
  arbitrumone_SwapHourlyVolume_orderBy: arbitrumone_SwapHourlyVolume_orderBy;
  arbitrumone_SwapTradeVolume: ResolversTypes['arbitrumone_SwapDailyVolume'] | ResolversTypes['arbitrumone_SwapHourlyVolume'] | ResolversTypes['arbitrumone_SwapWeeklyVolume'];
  arbitrumone_SwapTradeVolume_filter: arbitrumone_SwapTradeVolume_filter;
  arbitrumone_SwapTradeVolume_orderBy: arbitrumone_SwapTradeVolume_orderBy;
  arbitrumone_SwapWeeklyVolume: ResolverTypeWrapper<arbitrumone_SwapWeeklyVolume>;
  arbitrumone_SwapWeeklyVolume_filter: arbitrumone_SwapWeeklyVolume_filter;
  arbitrumone_SwapWeeklyVolume_orderBy: arbitrumone_SwapWeeklyVolume_orderBy;
  arbitrumone_SystemInfo: ResolverTypeWrapper<arbitrumone_SystemInfo>;
  arbitrumone_SystemInfo_filter: arbitrumone_SystemInfo_filter;
  arbitrumone_SystemInfo_orderBy: arbitrumone_SystemInfo_orderBy;
  arbitrumone__Block_: ResolverTypeWrapper<arbitrumone__Block_>;
  arbitrumone__Meta_: ResolverTypeWrapper<arbitrumone__Meta_>;
  bnb_BigDecimal: ResolverTypeWrapper<Scalars['bnb_BigDecimal']>;
  bnb_BlockChangedFilter: bnb_BlockChangedFilter;
  bnb_Block_height: bnb_Block_height;
  bnb_Bytes: ResolverTypeWrapper<Scalars['bnb_Bytes']>;
  bnb_OrderDirection: bnb_OrderDirection;
  bnb_PooledToken: ResolverTypeWrapper<bnb_PooledToken>;
  bnb_PooledToken_filter: bnb_PooledToken_filter;
  bnb_PooledToken_orderBy: bnb_PooledToken_orderBy;
  bnb_StableSwap: ResolverTypeWrapper<bnb_StableSwap>;
  bnb_StableSwapAddLiquidityEvent: ResolverTypeWrapper<bnb_StableSwapAddLiquidityEvent>;
  bnb_StableSwapAddLiquidityEvent_filter: bnb_StableSwapAddLiquidityEvent_filter;
  bnb_StableSwapAddLiquidityEvent_orderBy: bnb_StableSwapAddLiquidityEvent_orderBy;
  bnb_StableSwapEvent: ResolversTypes['bnb_StableSwapAddLiquidityEvent'] | ResolversTypes['bnb_StableSwapRemoveLiquidityEvent'];
  bnb_StableSwapEvent_filter: bnb_StableSwapEvent_filter;
  bnb_StableSwapEvent_orderBy: bnb_StableSwapEvent_orderBy;
  bnb_StableSwapExchange: ResolverTypeWrapper<bnb_StableSwapExchange>;
  bnb_StableSwapExchange_filter: bnb_StableSwapExchange_filter;
  bnb_StableSwapExchange_orderBy: bnb_StableSwapExchange_orderBy;
  bnb_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<bnb_StableSwapRemoveLiquidityEvent>;
  bnb_StableSwapRemoveLiquidityEvent_filter: bnb_StableSwapRemoveLiquidityEvent_filter;
  bnb_StableSwapRemoveLiquidityEvent_orderBy: bnb_StableSwapRemoveLiquidityEvent_orderBy;
  bnb_StableSwap_filter: bnb_StableSwap_filter;
  bnb_StableSwap_orderBy: bnb_StableSwap_orderBy;
  bnb_SwapDailyVolume: ResolverTypeWrapper<bnb_SwapDailyVolume>;
  bnb_SwapDailyVolume_filter: bnb_SwapDailyVolume_filter;
  bnb_SwapDailyVolume_orderBy: bnb_SwapDailyVolume_orderBy;
  bnb_SwapHourlyVolume: ResolverTypeWrapper<bnb_SwapHourlyVolume>;
  bnb_SwapHourlyVolume_filter: bnb_SwapHourlyVolume_filter;
  bnb_SwapHourlyVolume_orderBy: bnb_SwapHourlyVolume_orderBy;
  bnb_SwapTradeVolume: ResolversTypes['bnb_SwapDailyVolume'] | ResolversTypes['bnb_SwapHourlyVolume'] | ResolversTypes['bnb_SwapWeeklyVolume'];
  bnb_SwapTradeVolume_filter: bnb_SwapTradeVolume_filter;
  bnb_SwapTradeVolume_orderBy: bnb_SwapTradeVolume_orderBy;
  bnb_SwapWeeklyVolume: ResolverTypeWrapper<bnb_SwapWeeklyVolume>;
  bnb_SwapWeeklyVolume_filter: bnb_SwapWeeklyVolume_filter;
  bnb_SwapWeeklyVolume_orderBy: bnb_SwapWeeklyVolume_orderBy;
  bnb_SystemInfo: ResolverTypeWrapper<bnb_SystemInfo>;
  bnb_SystemInfo_filter: bnb_SystemInfo_filter;
  bnb_SystemInfo_orderBy: bnb_SystemInfo_orderBy;
  bnb__Block_: ResolverTypeWrapper<bnb__Block_>;
  bnb__Meta_: ResolverTypeWrapper<bnb__Meta_>;
  goerli_BigDecimal: ResolverTypeWrapper<Scalars['goerli_BigDecimal']>;
  goerli_BlockChangedFilter: goerli_BlockChangedFilter;
  goerli_Block_height: goerli_Block_height;
  goerli_Bytes: ResolverTypeWrapper<Scalars['goerli_Bytes']>;
  goerli_OrderDirection: goerli_OrderDirection;
  goerli_PooledToken: ResolverTypeWrapper<goerli_PooledToken>;
  goerli_PooledToken_filter: goerli_PooledToken_filter;
  goerli_PooledToken_orderBy: goerli_PooledToken_orderBy;
  goerli_StableSwap: ResolverTypeWrapper<goerli_StableSwap>;
  goerli_StableSwapAddLiquidityEvent: ResolverTypeWrapper<goerli_StableSwapAddLiquidityEvent>;
  goerli_StableSwapAddLiquidityEvent_filter: goerli_StableSwapAddLiquidityEvent_filter;
  goerli_StableSwapAddLiquidityEvent_orderBy: goerli_StableSwapAddLiquidityEvent_orderBy;
  goerli_StableSwapEvent: ResolversTypes['goerli_StableSwapAddLiquidityEvent'] | ResolversTypes['goerli_StableSwapRemoveLiquidityEvent'];
  goerli_StableSwapEvent_filter: goerli_StableSwapEvent_filter;
  goerli_StableSwapEvent_orderBy: goerli_StableSwapEvent_orderBy;
  goerli_StableSwapExchange: ResolverTypeWrapper<goerli_StableSwapExchange>;
  goerli_StableSwapExchange_filter: goerli_StableSwapExchange_filter;
  goerli_StableSwapExchange_orderBy: goerli_StableSwapExchange_orderBy;
  goerli_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<goerli_StableSwapRemoveLiquidityEvent>;
  goerli_StableSwapRemoveLiquidityEvent_filter: goerli_StableSwapRemoveLiquidityEvent_filter;
  goerli_StableSwapRemoveLiquidityEvent_orderBy: goerli_StableSwapRemoveLiquidityEvent_orderBy;
  goerli_StableSwap_filter: goerli_StableSwap_filter;
  goerli_StableSwap_orderBy: goerli_StableSwap_orderBy;
  goerli_SwapDailyVolume: ResolverTypeWrapper<goerli_SwapDailyVolume>;
  goerli_SwapDailyVolume_filter: goerli_SwapDailyVolume_filter;
  goerli_SwapDailyVolume_orderBy: goerli_SwapDailyVolume_orderBy;
  goerli_SwapHourlyVolume: ResolverTypeWrapper<goerli_SwapHourlyVolume>;
  goerli_SwapHourlyVolume_filter: goerli_SwapHourlyVolume_filter;
  goerli_SwapHourlyVolume_orderBy: goerli_SwapHourlyVolume_orderBy;
  goerli_SwapTradeVolume: ResolversTypes['goerli_SwapDailyVolume'] | ResolversTypes['goerli_SwapHourlyVolume'] | ResolversTypes['goerli_SwapWeeklyVolume'];
  goerli_SwapTradeVolume_filter: goerli_SwapTradeVolume_filter;
  goerli_SwapTradeVolume_orderBy: goerli_SwapTradeVolume_orderBy;
  goerli_SwapWeeklyVolume: ResolverTypeWrapper<goerli_SwapWeeklyVolume>;
  goerli_SwapWeeklyVolume_filter: goerli_SwapWeeklyVolume_filter;
  goerli_SwapWeeklyVolume_orderBy: goerli_SwapWeeklyVolume_orderBy;
  goerli_SystemInfo: ResolverTypeWrapper<goerli_SystemInfo>;
  goerli_SystemInfo_filter: goerli_SystemInfo_filter;
  goerli_SystemInfo_orderBy: goerli_SystemInfo_orderBy;
  goerli__Block_: ResolverTypeWrapper<goerli__Block_>;
  goerli__Meta_: ResolverTypeWrapper<goerli__Meta_>;
  stagingoptimismgoerli_BigDecimal: ResolverTypeWrapper<Scalars['stagingoptimismgoerli_BigDecimal']>;
  stagingoptimismgoerli_BlockChangedFilter: stagingoptimismgoerli_BlockChangedFilter;
  stagingoptimismgoerli_Block_height: stagingoptimismgoerli_Block_height;
  stagingoptimismgoerli_Bytes: ResolverTypeWrapper<Scalars['stagingoptimismgoerli_Bytes']>;
  stagingoptimismgoerli_OrderDirection: stagingoptimismgoerli_OrderDirection;
  stagingoptimismgoerli_PooledToken: ResolverTypeWrapper<stagingoptimismgoerli_PooledToken>;
  stagingoptimismgoerli_PooledToken_filter: stagingoptimismgoerli_PooledToken_filter;
  stagingoptimismgoerli_PooledToken_orderBy: stagingoptimismgoerli_PooledToken_orderBy;
  stagingoptimismgoerli_StableSwap: ResolverTypeWrapper<stagingoptimismgoerli_StableSwap>;
  stagingoptimismgoerli_StableSwapAddLiquidityEvent: ResolverTypeWrapper<stagingoptimismgoerli_StableSwapAddLiquidityEvent>;
  stagingoptimismgoerli_StableSwapAddLiquidityEvent_filter: stagingoptimismgoerli_StableSwapAddLiquidityEvent_filter;
  stagingoptimismgoerli_StableSwapAddLiquidityEvent_orderBy: stagingoptimismgoerli_StableSwapAddLiquidityEvent_orderBy;
  stagingoptimismgoerli_StableSwapEvent: ResolversTypes['stagingoptimismgoerli_StableSwapAddLiquidityEvent'] | ResolversTypes['stagingoptimismgoerli_StableSwapRemoveLiquidityEvent'];
  stagingoptimismgoerli_StableSwapEvent_filter: stagingoptimismgoerli_StableSwapEvent_filter;
  stagingoptimismgoerli_StableSwapEvent_orderBy: stagingoptimismgoerli_StableSwapEvent_orderBy;
  stagingoptimismgoerli_StableSwapExchange: ResolverTypeWrapper<stagingoptimismgoerli_StableSwapExchange>;
  stagingoptimismgoerli_StableSwapExchange_filter: stagingoptimismgoerli_StableSwapExchange_filter;
  stagingoptimismgoerli_StableSwapExchange_orderBy: stagingoptimismgoerli_StableSwapExchange_orderBy;
  stagingoptimismgoerli_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<stagingoptimismgoerli_StableSwapRemoveLiquidityEvent>;
  stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_filter: stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_filter;
  stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_orderBy: stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_orderBy;
  stagingoptimismgoerli_StableSwap_filter: stagingoptimismgoerli_StableSwap_filter;
  stagingoptimismgoerli_StableSwap_orderBy: stagingoptimismgoerli_StableSwap_orderBy;
  stagingoptimismgoerli_SwapDailyVolume: ResolverTypeWrapper<stagingoptimismgoerli_SwapDailyVolume>;
  stagingoptimismgoerli_SwapDailyVolume_filter: stagingoptimismgoerli_SwapDailyVolume_filter;
  stagingoptimismgoerli_SwapDailyVolume_orderBy: stagingoptimismgoerli_SwapDailyVolume_orderBy;
  stagingoptimismgoerli_SwapHourlyVolume: ResolverTypeWrapper<stagingoptimismgoerli_SwapHourlyVolume>;
  stagingoptimismgoerli_SwapHourlyVolume_filter: stagingoptimismgoerli_SwapHourlyVolume_filter;
  stagingoptimismgoerli_SwapHourlyVolume_orderBy: stagingoptimismgoerli_SwapHourlyVolume_orderBy;
  stagingoptimismgoerli_SwapTradeVolume: ResolversTypes['stagingoptimismgoerli_SwapDailyVolume'] | ResolversTypes['stagingoptimismgoerli_SwapHourlyVolume'] | ResolversTypes['stagingoptimismgoerli_SwapWeeklyVolume'];
  stagingoptimismgoerli_SwapTradeVolume_filter: stagingoptimismgoerli_SwapTradeVolume_filter;
  stagingoptimismgoerli_SwapTradeVolume_orderBy: stagingoptimismgoerli_SwapTradeVolume_orderBy;
  stagingoptimismgoerli_SwapWeeklyVolume: ResolverTypeWrapper<stagingoptimismgoerli_SwapWeeklyVolume>;
  stagingoptimismgoerli_SwapWeeklyVolume_filter: stagingoptimismgoerli_SwapWeeklyVolume_filter;
  stagingoptimismgoerli_SwapWeeklyVolume_orderBy: stagingoptimismgoerli_SwapWeeklyVolume_orderBy;
  stagingoptimismgoerli_SystemInfo: ResolverTypeWrapper<stagingoptimismgoerli_SystemInfo>;
  stagingoptimismgoerli_SystemInfo_filter: stagingoptimismgoerli_SystemInfo_filter;
  stagingoptimismgoerli_SystemInfo_orderBy: stagingoptimismgoerli_SystemInfo_orderBy;
  stagingoptimismgoerli__Block_: ResolverTypeWrapper<stagingoptimismgoerli__Block_>;
  stagingoptimismgoerli__Meta_: ResolverTypeWrapper<stagingoptimismgoerli__Meta_>;
  optimism_BigDecimal: ResolverTypeWrapper<Scalars['optimism_BigDecimal']>;
  optimism_BlockChangedFilter: optimism_BlockChangedFilter;
  optimism_Block_height: optimism_Block_height;
  optimism_Bytes: ResolverTypeWrapper<Scalars['optimism_Bytes']>;
  optimism_OrderDirection: optimism_OrderDirection;
  optimism_PooledToken: ResolverTypeWrapper<optimism_PooledToken>;
  optimism_PooledToken_filter: optimism_PooledToken_filter;
  optimism_PooledToken_orderBy: optimism_PooledToken_orderBy;
  optimism_StableSwap: ResolverTypeWrapper<optimism_StableSwap>;
  optimism_StableSwapAddLiquidityEvent: ResolverTypeWrapper<optimism_StableSwapAddLiquidityEvent>;
  optimism_StableSwapAddLiquidityEvent_filter: optimism_StableSwapAddLiquidityEvent_filter;
  optimism_StableSwapAddLiquidityEvent_orderBy: optimism_StableSwapAddLiquidityEvent_orderBy;
  optimism_StableSwapEvent: ResolversTypes['optimism_StableSwapAddLiquidityEvent'] | ResolversTypes['optimism_StableSwapRemoveLiquidityEvent'];
  optimism_StableSwapEvent_filter: optimism_StableSwapEvent_filter;
  optimism_StableSwapEvent_orderBy: optimism_StableSwapEvent_orderBy;
  optimism_StableSwapExchange: ResolverTypeWrapper<optimism_StableSwapExchange>;
  optimism_StableSwapExchange_filter: optimism_StableSwapExchange_filter;
  optimism_StableSwapExchange_orderBy: optimism_StableSwapExchange_orderBy;
  optimism_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<optimism_StableSwapRemoveLiquidityEvent>;
  optimism_StableSwapRemoveLiquidityEvent_filter: optimism_StableSwapRemoveLiquidityEvent_filter;
  optimism_StableSwapRemoveLiquidityEvent_orderBy: optimism_StableSwapRemoveLiquidityEvent_orderBy;
  optimism_StableSwap_filter: optimism_StableSwap_filter;
  optimism_StableSwap_orderBy: optimism_StableSwap_orderBy;
  optimism_SwapDailyVolume: ResolverTypeWrapper<optimism_SwapDailyVolume>;
  optimism_SwapDailyVolume_filter: optimism_SwapDailyVolume_filter;
  optimism_SwapDailyVolume_orderBy: optimism_SwapDailyVolume_orderBy;
  optimism_SwapHourlyVolume: ResolverTypeWrapper<optimism_SwapHourlyVolume>;
  optimism_SwapHourlyVolume_filter: optimism_SwapHourlyVolume_filter;
  optimism_SwapHourlyVolume_orderBy: optimism_SwapHourlyVolume_orderBy;
  optimism_SwapTradeVolume: ResolversTypes['optimism_SwapDailyVolume'] | ResolversTypes['optimism_SwapHourlyVolume'] | ResolversTypes['optimism_SwapWeeklyVolume'];
  optimism_SwapTradeVolume_filter: optimism_SwapTradeVolume_filter;
  optimism_SwapTradeVolume_orderBy: optimism_SwapTradeVolume_orderBy;
  optimism_SwapWeeklyVolume: ResolverTypeWrapper<optimism_SwapWeeklyVolume>;
  optimism_SwapWeeklyVolume_filter: optimism_SwapWeeklyVolume_filter;
  optimism_SwapWeeklyVolume_orderBy: optimism_SwapWeeklyVolume_orderBy;
  optimism_SystemInfo: ResolverTypeWrapper<optimism_SystemInfo>;
  optimism_SystemInfo_filter: optimism_SystemInfo_filter;
  optimism_SystemInfo_orderBy: optimism_SystemInfo_orderBy;
  optimism__Block_: ResolverTypeWrapper<optimism__Block_>;
  optimism__Meta_: ResolverTypeWrapper<optimism__Meta_>;
  polygon_BigDecimal: ResolverTypeWrapper<Scalars['polygon_BigDecimal']>;
  polygon_BlockChangedFilter: polygon_BlockChangedFilter;
  polygon_Block_height: polygon_Block_height;
  polygon_Bytes: ResolverTypeWrapper<Scalars['polygon_Bytes']>;
  polygon_OrderDirection: polygon_OrderDirection;
  polygon_PooledToken: ResolverTypeWrapper<polygon_PooledToken>;
  polygon_PooledToken_filter: polygon_PooledToken_filter;
  polygon_PooledToken_orderBy: polygon_PooledToken_orderBy;
  polygon_StableSwap: ResolverTypeWrapper<polygon_StableSwap>;
  polygon_StableSwapAddLiquidityEvent: ResolverTypeWrapper<polygon_StableSwapAddLiquidityEvent>;
  polygon_StableSwapAddLiquidityEvent_filter: polygon_StableSwapAddLiquidityEvent_filter;
  polygon_StableSwapAddLiquidityEvent_orderBy: polygon_StableSwapAddLiquidityEvent_orderBy;
  polygon_StableSwapEvent: ResolversTypes['polygon_StableSwapAddLiquidityEvent'] | ResolversTypes['polygon_StableSwapRemoveLiquidityEvent'];
  polygon_StableSwapEvent_filter: polygon_StableSwapEvent_filter;
  polygon_StableSwapEvent_orderBy: polygon_StableSwapEvent_orderBy;
  polygon_StableSwapExchange: ResolverTypeWrapper<polygon_StableSwapExchange>;
  polygon_StableSwapExchange_filter: polygon_StableSwapExchange_filter;
  polygon_StableSwapExchange_orderBy: polygon_StableSwapExchange_orderBy;
  polygon_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<polygon_StableSwapRemoveLiquidityEvent>;
  polygon_StableSwapRemoveLiquidityEvent_filter: polygon_StableSwapRemoveLiquidityEvent_filter;
  polygon_StableSwapRemoveLiquidityEvent_orderBy: polygon_StableSwapRemoveLiquidityEvent_orderBy;
  polygon_StableSwap_filter: polygon_StableSwap_filter;
  polygon_StableSwap_orderBy: polygon_StableSwap_orderBy;
  polygon_SwapDailyVolume: ResolverTypeWrapper<polygon_SwapDailyVolume>;
  polygon_SwapDailyVolume_filter: polygon_SwapDailyVolume_filter;
  polygon_SwapDailyVolume_orderBy: polygon_SwapDailyVolume_orderBy;
  polygon_SwapHourlyVolume: ResolverTypeWrapper<polygon_SwapHourlyVolume>;
  polygon_SwapHourlyVolume_filter: polygon_SwapHourlyVolume_filter;
  polygon_SwapHourlyVolume_orderBy: polygon_SwapHourlyVolume_orderBy;
  polygon_SwapTradeVolume: ResolversTypes['polygon_SwapDailyVolume'] | ResolversTypes['polygon_SwapHourlyVolume'] | ResolversTypes['polygon_SwapWeeklyVolume'];
  polygon_SwapTradeVolume_filter: polygon_SwapTradeVolume_filter;
  polygon_SwapTradeVolume_orderBy: polygon_SwapTradeVolume_orderBy;
  polygon_SwapWeeklyVolume: ResolverTypeWrapper<polygon_SwapWeeklyVolume>;
  polygon_SwapWeeklyVolume_filter: polygon_SwapWeeklyVolume_filter;
  polygon_SwapWeeklyVolume_orderBy: polygon_SwapWeeklyVolume_orderBy;
  polygon_SystemInfo: ResolverTypeWrapper<polygon_SystemInfo>;
  polygon_SystemInfo_filter: polygon_SystemInfo_filter;
  polygon_SystemInfo_orderBy: polygon_SystemInfo_orderBy;
  polygon__Block_: ResolverTypeWrapper<polygon__Block_>;
  polygon__Meta_: ResolverTypeWrapper<polygon__Meta_>;
  staginggoerli_BigDecimal: ResolverTypeWrapper<Scalars['staginggoerli_BigDecimal']>;
  staginggoerli_BlockChangedFilter: staginggoerli_BlockChangedFilter;
  staginggoerli_Block_height: staginggoerli_Block_height;
  staginggoerli_Bytes: ResolverTypeWrapper<Scalars['staginggoerli_Bytes']>;
  staginggoerli_OrderDirection: staginggoerli_OrderDirection;
  staginggoerli_PooledToken: ResolverTypeWrapper<staginggoerli_PooledToken>;
  staginggoerli_PooledToken_filter: staginggoerli_PooledToken_filter;
  staginggoerli_PooledToken_orderBy: staginggoerli_PooledToken_orderBy;
  staginggoerli_StableSwap: ResolverTypeWrapper<staginggoerli_StableSwap>;
  staginggoerli_StableSwapAddLiquidityEvent: ResolverTypeWrapper<staginggoerli_StableSwapAddLiquidityEvent>;
  staginggoerli_StableSwapAddLiquidityEvent_filter: staginggoerli_StableSwapAddLiquidityEvent_filter;
  staginggoerli_StableSwapAddLiquidityEvent_orderBy: staginggoerli_StableSwapAddLiquidityEvent_orderBy;
  staginggoerli_StableSwapEvent: ResolversTypes['staginggoerli_StableSwapAddLiquidityEvent'] | ResolversTypes['staginggoerli_StableSwapRemoveLiquidityEvent'];
  staginggoerli_StableSwapEvent_filter: staginggoerli_StableSwapEvent_filter;
  staginggoerli_StableSwapEvent_orderBy: staginggoerli_StableSwapEvent_orderBy;
  staginggoerli_StableSwapExchange: ResolverTypeWrapper<staginggoerli_StableSwapExchange>;
  staginggoerli_StableSwapExchange_filter: staginggoerli_StableSwapExchange_filter;
  staginggoerli_StableSwapExchange_orderBy: staginggoerli_StableSwapExchange_orderBy;
  staginggoerli_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<staginggoerli_StableSwapRemoveLiquidityEvent>;
  staginggoerli_StableSwapRemoveLiquidityEvent_filter: staginggoerli_StableSwapRemoveLiquidityEvent_filter;
  staginggoerli_StableSwapRemoveLiquidityEvent_orderBy: staginggoerli_StableSwapRemoveLiquidityEvent_orderBy;
  staginggoerli_StableSwap_filter: staginggoerli_StableSwap_filter;
  staginggoerli_StableSwap_orderBy: staginggoerli_StableSwap_orderBy;
  staginggoerli_SwapDailyVolume: ResolverTypeWrapper<staginggoerli_SwapDailyVolume>;
  staginggoerli_SwapDailyVolume_filter: staginggoerli_SwapDailyVolume_filter;
  staginggoerli_SwapDailyVolume_orderBy: staginggoerli_SwapDailyVolume_orderBy;
  staginggoerli_SwapHourlyVolume: ResolverTypeWrapper<staginggoerli_SwapHourlyVolume>;
  staginggoerli_SwapHourlyVolume_filter: staginggoerli_SwapHourlyVolume_filter;
  staginggoerli_SwapHourlyVolume_orderBy: staginggoerli_SwapHourlyVolume_orderBy;
  staginggoerli_SwapTradeVolume: ResolversTypes['staginggoerli_SwapDailyVolume'] | ResolversTypes['staginggoerli_SwapHourlyVolume'] | ResolversTypes['staginggoerli_SwapWeeklyVolume'];
  staginggoerli_SwapTradeVolume_filter: staginggoerli_SwapTradeVolume_filter;
  staginggoerli_SwapTradeVolume_orderBy: staginggoerli_SwapTradeVolume_orderBy;
  staginggoerli_SwapWeeklyVolume: ResolverTypeWrapper<staginggoerli_SwapWeeklyVolume>;
  staginggoerli_SwapWeeklyVolume_filter: staginggoerli_SwapWeeklyVolume_filter;
  staginggoerli_SwapWeeklyVolume_orderBy: staginggoerli_SwapWeeklyVolume_orderBy;
  staginggoerli_SystemInfo: ResolverTypeWrapper<staginggoerli_SystemInfo>;
  staginggoerli_SystemInfo_filter: staginggoerli_SystemInfo_filter;
  staginggoerli_SystemInfo_orderBy: staginggoerli_SystemInfo_orderBy;
  staginggoerli__Block_: ResolverTypeWrapper<staginggoerli__Block_>;
  staginggoerli__Meta_: ResolverTypeWrapper<staginggoerli__Meta_>;
  arbitrumgoerli_BigDecimal: ResolverTypeWrapper<Scalars['arbitrumgoerli_BigDecimal']>;
  arbitrumgoerli_BlockChangedFilter: arbitrumgoerli_BlockChangedFilter;
  arbitrumgoerli_Block_height: arbitrumgoerli_Block_height;
  arbitrumgoerli_Bytes: ResolverTypeWrapper<Scalars['arbitrumgoerli_Bytes']>;
  arbitrumgoerli_OrderDirection: arbitrumgoerli_OrderDirection;
  arbitrumgoerli_PooledToken: ResolverTypeWrapper<arbitrumgoerli_PooledToken>;
  arbitrumgoerli_PooledToken_filter: arbitrumgoerli_PooledToken_filter;
  arbitrumgoerli_PooledToken_orderBy: arbitrumgoerli_PooledToken_orderBy;
  arbitrumgoerli_StableSwap: ResolverTypeWrapper<arbitrumgoerli_StableSwap>;
  arbitrumgoerli_StableSwapAddLiquidityEvent: ResolverTypeWrapper<arbitrumgoerli_StableSwapAddLiquidityEvent>;
  arbitrumgoerli_StableSwapAddLiquidityEvent_filter: arbitrumgoerli_StableSwapAddLiquidityEvent_filter;
  arbitrumgoerli_StableSwapAddLiquidityEvent_orderBy: arbitrumgoerli_StableSwapAddLiquidityEvent_orderBy;
  arbitrumgoerli_StableSwapEvent: ResolversTypes['arbitrumgoerli_StableSwapAddLiquidityEvent'] | ResolversTypes['arbitrumgoerli_StableSwapRemoveLiquidityEvent'];
  arbitrumgoerli_StableSwapEvent_filter: arbitrumgoerli_StableSwapEvent_filter;
  arbitrumgoerli_StableSwapEvent_orderBy: arbitrumgoerli_StableSwapEvent_orderBy;
  arbitrumgoerli_StableSwapExchange: ResolverTypeWrapper<arbitrumgoerli_StableSwapExchange>;
  arbitrumgoerli_StableSwapExchange_filter: arbitrumgoerli_StableSwapExchange_filter;
  arbitrumgoerli_StableSwapExchange_orderBy: arbitrumgoerli_StableSwapExchange_orderBy;
  arbitrumgoerli_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<arbitrumgoerli_StableSwapRemoveLiquidityEvent>;
  arbitrumgoerli_StableSwapRemoveLiquidityEvent_filter: arbitrumgoerli_StableSwapRemoveLiquidityEvent_filter;
  arbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy: arbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy;
  arbitrumgoerli_StableSwap_filter: arbitrumgoerli_StableSwap_filter;
  arbitrumgoerli_StableSwap_orderBy: arbitrumgoerli_StableSwap_orderBy;
  arbitrumgoerli_SwapDailyVolume: ResolverTypeWrapper<arbitrumgoerli_SwapDailyVolume>;
  arbitrumgoerli_SwapDailyVolume_filter: arbitrumgoerli_SwapDailyVolume_filter;
  arbitrumgoerli_SwapDailyVolume_orderBy: arbitrumgoerli_SwapDailyVolume_orderBy;
  arbitrumgoerli_SwapHourlyVolume: ResolverTypeWrapper<arbitrumgoerli_SwapHourlyVolume>;
  arbitrumgoerli_SwapHourlyVolume_filter: arbitrumgoerli_SwapHourlyVolume_filter;
  arbitrumgoerli_SwapHourlyVolume_orderBy: arbitrumgoerli_SwapHourlyVolume_orderBy;
  arbitrumgoerli_SwapTradeVolume: ResolversTypes['arbitrumgoerli_SwapDailyVolume'] | ResolversTypes['arbitrumgoerli_SwapHourlyVolume'] | ResolversTypes['arbitrumgoerli_SwapWeeklyVolume'];
  arbitrumgoerli_SwapTradeVolume_filter: arbitrumgoerli_SwapTradeVolume_filter;
  arbitrumgoerli_SwapTradeVolume_orderBy: arbitrumgoerli_SwapTradeVolume_orderBy;
  arbitrumgoerli_SwapWeeklyVolume: ResolverTypeWrapper<arbitrumgoerli_SwapWeeklyVolume>;
  arbitrumgoerli_SwapWeeklyVolume_filter: arbitrumgoerli_SwapWeeklyVolume_filter;
  arbitrumgoerli_SwapWeeklyVolume_orderBy: arbitrumgoerli_SwapWeeklyVolume_orderBy;
  arbitrumgoerli_SystemInfo: ResolverTypeWrapper<arbitrumgoerli_SystemInfo>;
  arbitrumgoerli_SystemInfo_filter: arbitrumgoerli_SystemInfo_filter;
  arbitrumgoerli_SystemInfo_orderBy: arbitrumgoerli_SystemInfo_orderBy;
  arbitrumgoerli__Block_: ResolverTypeWrapper<arbitrumgoerli__Block_>;
  arbitrumgoerli__Meta_: ResolverTypeWrapper<arbitrumgoerli__Meta_>;
  optimismgoerli_BigDecimal: ResolverTypeWrapper<Scalars['optimismgoerli_BigDecimal']>;
  optimismgoerli_BlockChangedFilter: optimismgoerli_BlockChangedFilter;
  optimismgoerli_Block_height: optimismgoerli_Block_height;
  optimismgoerli_Bytes: ResolverTypeWrapper<Scalars['optimismgoerli_Bytes']>;
  optimismgoerli_OrderDirection: optimismgoerli_OrderDirection;
  optimismgoerli_PooledToken: ResolverTypeWrapper<optimismgoerli_PooledToken>;
  optimismgoerli_PooledToken_filter: optimismgoerli_PooledToken_filter;
  optimismgoerli_PooledToken_orderBy: optimismgoerli_PooledToken_orderBy;
  optimismgoerli_StableSwap: ResolverTypeWrapper<optimismgoerli_StableSwap>;
  optimismgoerli_StableSwapAddLiquidityEvent: ResolverTypeWrapper<optimismgoerli_StableSwapAddLiquidityEvent>;
  optimismgoerli_StableSwapAddLiquidityEvent_filter: optimismgoerli_StableSwapAddLiquidityEvent_filter;
  optimismgoerli_StableSwapAddLiquidityEvent_orderBy: optimismgoerli_StableSwapAddLiquidityEvent_orderBy;
  optimismgoerli_StableSwapEvent: ResolversTypes['optimismgoerli_StableSwapAddLiquidityEvent'] | ResolversTypes['optimismgoerli_StableSwapRemoveLiquidityEvent'];
  optimismgoerli_StableSwapEvent_filter: optimismgoerli_StableSwapEvent_filter;
  optimismgoerli_StableSwapEvent_orderBy: optimismgoerli_StableSwapEvent_orderBy;
  optimismgoerli_StableSwapExchange: ResolverTypeWrapper<optimismgoerli_StableSwapExchange>;
  optimismgoerli_StableSwapExchange_filter: optimismgoerli_StableSwapExchange_filter;
  optimismgoerli_StableSwapExchange_orderBy: optimismgoerli_StableSwapExchange_orderBy;
  optimismgoerli_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<optimismgoerli_StableSwapRemoveLiquidityEvent>;
  optimismgoerli_StableSwapRemoveLiquidityEvent_filter: optimismgoerli_StableSwapRemoveLiquidityEvent_filter;
  optimismgoerli_StableSwapRemoveLiquidityEvent_orderBy: optimismgoerli_StableSwapRemoveLiquidityEvent_orderBy;
  optimismgoerli_StableSwap_filter: optimismgoerli_StableSwap_filter;
  optimismgoerli_StableSwap_orderBy: optimismgoerli_StableSwap_orderBy;
  optimismgoerli_SwapDailyVolume: ResolverTypeWrapper<optimismgoerli_SwapDailyVolume>;
  optimismgoerli_SwapDailyVolume_filter: optimismgoerli_SwapDailyVolume_filter;
  optimismgoerli_SwapDailyVolume_orderBy: optimismgoerli_SwapDailyVolume_orderBy;
  optimismgoerli_SwapHourlyVolume: ResolverTypeWrapper<optimismgoerli_SwapHourlyVolume>;
  optimismgoerli_SwapHourlyVolume_filter: optimismgoerli_SwapHourlyVolume_filter;
  optimismgoerli_SwapHourlyVolume_orderBy: optimismgoerli_SwapHourlyVolume_orderBy;
  optimismgoerli_SwapTradeVolume: ResolversTypes['optimismgoerli_SwapDailyVolume'] | ResolversTypes['optimismgoerli_SwapHourlyVolume'] | ResolversTypes['optimismgoerli_SwapWeeklyVolume'];
  optimismgoerli_SwapTradeVolume_filter: optimismgoerli_SwapTradeVolume_filter;
  optimismgoerli_SwapTradeVolume_orderBy: optimismgoerli_SwapTradeVolume_orderBy;
  optimismgoerli_SwapWeeklyVolume: ResolverTypeWrapper<optimismgoerli_SwapWeeklyVolume>;
  optimismgoerli_SwapWeeklyVolume_filter: optimismgoerli_SwapWeeklyVolume_filter;
  optimismgoerli_SwapWeeklyVolume_orderBy: optimismgoerli_SwapWeeklyVolume_orderBy;
  optimismgoerli_SystemInfo: ResolverTypeWrapper<optimismgoerli_SystemInfo>;
  optimismgoerli_SystemInfo_filter: optimismgoerli_SystemInfo_filter;
  optimismgoerli_SystemInfo_orderBy: optimismgoerli_SystemInfo_orderBy;
  optimismgoerli__Block_: ResolverTypeWrapper<optimismgoerli__Block_>;
  optimismgoerli__Meta_: ResolverTypeWrapper<optimismgoerli__Meta_>;
  stagingmumbai_BigDecimal: ResolverTypeWrapper<Scalars['stagingmumbai_BigDecimal']>;
  stagingmumbai_BlockChangedFilter: stagingmumbai_BlockChangedFilter;
  stagingmumbai_Block_height: stagingmumbai_Block_height;
  stagingmumbai_Bytes: ResolverTypeWrapper<Scalars['stagingmumbai_Bytes']>;
  stagingmumbai_OrderDirection: stagingmumbai_OrderDirection;
  stagingmumbai_PooledToken: ResolverTypeWrapper<stagingmumbai_PooledToken>;
  stagingmumbai_PooledToken_filter: stagingmumbai_PooledToken_filter;
  stagingmumbai_PooledToken_orderBy: stagingmumbai_PooledToken_orderBy;
  stagingmumbai_StableSwap: ResolverTypeWrapper<stagingmumbai_StableSwap>;
  stagingmumbai_StableSwapAddLiquidityEvent: ResolverTypeWrapper<stagingmumbai_StableSwapAddLiquidityEvent>;
  stagingmumbai_StableSwapAddLiquidityEvent_filter: stagingmumbai_StableSwapAddLiquidityEvent_filter;
  stagingmumbai_StableSwapAddLiquidityEvent_orderBy: stagingmumbai_StableSwapAddLiquidityEvent_orderBy;
  stagingmumbai_StableSwapEvent: ResolversTypes['stagingmumbai_StableSwapAddLiquidityEvent'] | ResolversTypes['stagingmumbai_StableSwapRemoveLiquidityEvent'];
  stagingmumbai_StableSwapEvent_filter: stagingmumbai_StableSwapEvent_filter;
  stagingmumbai_StableSwapEvent_orderBy: stagingmumbai_StableSwapEvent_orderBy;
  stagingmumbai_StableSwapExchange: ResolverTypeWrapper<stagingmumbai_StableSwapExchange>;
  stagingmumbai_StableSwapExchange_filter: stagingmumbai_StableSwapExchange_filter;
  stagingmumbai_StableSwapExchange_orderBy: stagingmumbai_StableSwapExchange_orderBy;
  stagingmumbai_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<stagingmumbai_StableSwapRemoveLiquidityEvent>;
  stagingmumbai_StableSwapRemoveLiquidityEvent_filter: stagingmumbai_StableSwapRemoveLiquidityEvent_filter;
  stagingmumbai_StableSwapRemoveLiquidityEvent_orderBy: stagingmumbai_StableSwapRemoveLiquidityEvent_orderBy;
  stagingmumbai_StableSwap_filter: stagingmumbai_StableSwap_filter;
  stagingmumbai_StableSwap_orderBy: stagingmumbai_StableSwap_orderBy;
  stagingmumbai_SwapDailyVolume: ResolverTypeWrapper<stagingmumbai_SwapDailyVolume>;
  stagingmumbai_SwapDailyVolume_filter: stagingmumbai_SwapDailyVolume_filter;
  stagingmumbai_SwapDailyVolume_orderBy: stagingmumbai_SwapDailyVolume_orderBy;
  stagingmumbai_SwapHourlyVolume: ResolverTypeWrapper<stagingmumbai_SwapHourlyVolume>;
  stagingmumbai_SwapHourlyVolume_filter: stagingmumbai_SwapHourlyVolume_filter;
  stagingmumbai_SwapHourlyVolume_orderBy: stagingmumbai_SwapHourlyVolume_orderBy;
  stagingmumbai_SwapTradeVolume: ResolversTypes['stagingmumbai_SwapDailyVolume'] | ResolversTypes['stagingmumbai_SwapHourlyVolume'] | ResolversTypes['stagingmumbai_SwapWeeklyVolume'];
  stagingmumbai_SwapTradeVolume_filter: stagingmumbai_SwapTradeVolume_filter;
  stagingmumbai_SwapTradeVolume_orderBy: stagingmumbai_SwapTradeVolume_orderBy;
  stagingmumbai_SwapWeeklyVolume: ResolverTypeWrapper<stagingmumbai_SwapWeeklyVolume>;
  stagingmumbai_SwapWeeklyVolume_filter: stagingmumbai_SwapWeeklyVolume_filter;
  stagingmumbai_SwapWeeklyVolume_orderBy: stagingmumbai_SwapWeeklyVolume_orderBy;
  stagingmumbai_SystemInfo: ResolverTypeWrapper<stagingmumbai_SystemInfo>;
  stagingmumbai_SystemInfo_filter: stagingmumbai_SystemInfo_filter;
  stagingmumbai_SystemInfo_orderBy: stagingmumbai_SystemInfo_orderBy;
  stagingmumbai__Block_: ResolverTypeWrapper<stagingmumbai__Block_>;
  stagingmumbai__Meta_: ResolverTypeWrapper<stagingmumbai__Meta_>;
  stagingarbitrumgoerli_BigDecimal: ResolverTypeWrapper<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  stagingarbitrumgoerli_BlockChangedFilter: stagingarbitrumgoerli_BlockChangedFilter;
  stagingarbitrumgoerli_Block_height: stagingarbitrumgoerli_Block_height;
  stagingarbitrumgoerli_Bytes: ResolverTypeWrapper<Scalars['stagingarbitrumgoerli_Bytes']>;
  stagingarbitrumgoerli_OrderDirection: stagingarbitrumgoerli_OrderDirection;
  stagingarbitrumgoerli_PooledToken: ResolverTypeWrapper<stagingarbitrumgoerli_PooledToken>;
  stagingarbitrumgoerli_PooledToken_filter: stagingarbitrumgoerli_PooledToken_filter;
  stagingarbitrumgoerli_PooledToken_orderBy: stagingarbitrumgoerli_PooledToken_orderBy;
  stagingarbitrumgoerli_StableSwap: ResolverTypeWrapper<stagingarbitrumgoerli_StableSwap>;
  stagingarbitrumgoerli_StableSwapAddLiquidityEvent: ResolverTypeWrapper<stagingarbitrumgoerli_StableSwapAddLiquidityEvent>;
  stagingarbitrumgoerli_StableSwapAddLiquidityEvent_filter: stagingarbitrumgoerli_StableSwapAddLiquidityEvent_filter;
  stagingarbitrumgoerli_StableSwapAddLiquidityEvent_orderBy: stagingarbitrumgoerli_StableSwapAddLiquidityEvent_orderBy;
  stagingarbitrumgoerli_StableSwapEvent: ResolversTypes['stagingarbitrumgoerli_StableSwapAddLiquidityEvent'] | ResolversTypes['stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent'];
  stagingarbitrumgoerli_StableSwapEvent_filter: stagingarbitrumgoerli_StableSwapEvent_filter;
  stagingarbitrumgoerli_StableSwapEvent_orderBy: stagingarbitrumgoerli_StableSwapEvent_orderBy;
  stagingarbitrumgoerli_StableSwapExchange: ResolverTypeWrapper<stagingarbitrumgoerli_StableSwapExchange>;
  stagingarbitrumgoerli_StableSwapExchange_filter: stagingarbitrumgoerli_StableSwapExchange_filter;
  stagingarbitrumgoerli_StableSwapExchange_orderBy: stagingarbitrumgoerli_StableSwapExchange_orderBy;
  stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent>;
  stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_filter: stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_filter;
  stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy: stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy;
  stagingarbitrumgoerli_StableSwap_filter: stagingarbitrumgoerli_StableSwap_filter;
  stagingarbitrumgoerli_StableSwap_orderBy: stagingarbitrumgoerli_StableSwap_orderBy;
  stagingarbitrumgoerli_SwapDailyVolume: ResolverTypeWrapper<stagingarbitrumgoerli_SwapDailyVolume>;
  stagingarbitrumgoerli_SwapDailyVolume_filter: stagingarbitrumgoerli_SwapDailyVolume_filter;
  stagingarbitrumgoerli_SwapDailyVolume_orderBy: stagingarbitrumgoerli_SwapDailyVolume_orderBy;
  stagingarbitrumgoerli_SwapHourlyVolume: ResolverTypeWrapper<stagingarbitrumgoerli_SwapHourlyVolume>;
  stagingarbitrumgoerli_SwapHourlyVolume_filter: stagingarbitrumgoerli_SwapHourlyVolume_filter;
  stagingarbitrumgoerli_SwapHourlyVolume_orderBy: stagingarbitrumgoerli_SwapHourlyVolume_orderBy;
  stagingarbitrumgoerli_SwapTradeVolume: ResolversTypes['stagingarbitrumgoerli_SwapDailyVolume'] | ResolversTypes['stagingarbitrumgoerli_SwapHourlyVolume'] | ResolversTypes['stagingarbitrumgoerli_SwapWeeklyVolume'];
  stagingarbitrumgoerli_SwapTradeVolume_filter: stagingarbitrumgoerli_SwapTradeVolume_filter;
  stagingarbitrumgoerli_SwapTradeVolume_orderBy: stagingarbitrumgoerli_SwapTradeVolume_orderBy;
  stagingarbitrumgoerli_SwapWeeklyVolume: ResolverTypeWrapper<stagingarbitrumgoerli_SwapWeeklyVolume>;
  stagingarbitrumgoerli_SwapWeeklyVolume_filter: stagingarbitrumgoerli_SwapWeeklyVolume_filter;
  stagingarbitrumgoerli_SwapWeeklyVolume_orderBy: stagingarbitrumgoerli_SwapWeeklyVolume_orderBy;
  stagingarbitrumgoerli_SystemInfo: ResolverTypeWrapper<stagingarbitrumgoerli_SystemInfo>;
  stagingarbitrumgoerli_SystemInfo_filter: stagingarbitrumgoerli_SystemInfo_filter;
  stagingarbitrumgoerli_SystemInfo_orderBy: stagingarbitrumgoerli_SystemInfo_orderBy;
  stagingarbitrumgoerli__Block_: ResolverTypeWrapper<stagingarbitrumgoerli__Block_>;
  stagingarbitrumgoerli__Meta_: ResolverTypeWrapper<stagingarbitrumgoerli__Meta_>;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  Query: {};
  Subscription: {};
  mumbai_BigDecimal: Scalars['mumbai_BigDecimal'];
  BigInt: Scalars['BigInt'];
  mumbai_BlockChangedFilter: mumbai_BlockChangedFilter;
  mumbai_Block_height: mumbai_Block_height;
  Boolean: Scalars['Boolean'];
  mumbai_Bytes: Scalars['mumbai_Bytes'];
  Float: Scalars['Float'];
  ID: Scalars['ID'];
  Int: Scalars['Int'];
  mumbai_PooledToken: mumbai_PooledToken;
  mumbai_PooledToken_filter: mumbai_PooledToken_filter;
  mumbai_StableSwap: mumbai_StableSwap;
  mumbai_StableSwapAddLiquidityEvent: mumbai_StableSwapAddLiquidityEvent;
  mumbai_StableSwapAddLiquidityEvent_filter: mumbai_StableSwapAddLiquidityEvent_filter;
  mumbai_StableSwapEvent: ResolversParentTypes['mumbai_StableSwapAddLiquidityEvent'] | ResolversParentTypes['mumbai_StableSwapRemoveLiquidityEvent'];
  mumbai_StableSwapEvent_filter: mumbai_StableSwapEvent_filter;
  mumbai_StableSwapExchange: mumbai_StableSwapExchange;
  mumbai_StableSwapExchange_filter: mumbai_StableSwapExchange_filter;
  mumbai_StableSwapRemoveLiquidityEvent: mumbai_StableSwapRemoveLiquidityEvent;
  mumbai_StableSwapRemoveLiquidityEvent_filter: mumbai_StableSwapRemoveLiquidityEvent_filter;
  mumbai_StableSwap_filter: mumbai_StableSwap_filter;
  String: Scalars['String'];
  mumbai_SwapDailyVolume: mumbai_SwapDailyVolume;
  mumbai_SwapDailyVolume_filter: mumbai_SwapDailyVolume_filter;
  mumbai_SwapHourlyVolume: mumbai_SwapHourlyVolume;
  mumbai_SwapHourlyVolume_filter: mumbai_SwapHourlyVolume_filter;
  mumbai_SwapTradeVolume: ResolversParentTypes['mumbai_SwapDailyVolume'] | ResolversParentTypes['mumbai_SwapHourlyVolume'] | ResolversParentTypes['mumbai_SwapWeeklyVolume'];
  mumbai_SwapTradeVolume_filter: mumbai_SwapTradeVolume_filter;
  mumbai_SwapWeeklyVolume: mumbai_SwapWeeklyVolume;
  mumbai_SwapWeeklyVolume_filter: mumbai_SwapWeeklyVolume_filter;
  mumbai_SystemInfo: mumbai_SystemInfo;
  mumbai_SystemInfo_filter: mumbai_SystemInfo_filter;
  mumbai__Block_: mumbai__Block_;
  mumbai__Meta_: mumbai__Meta_;
  xdai_BigDecimal: Scalars['xdai_BigDecimal'];
  xdai_BlockChangedFilter: xdai_BlockChangedFilter;
  xdai_Block_height: xdai_Block_height;
  xdai_Bytes: Scalars['xdai_Bytes'];
  xdai_PooledToken: xdai_PooledToken;
  xdai_PooledToken_filter: xdai_PooledToken_filter;
  xdai_StableSwap: xdai_StableSwap;
  xdai_StableSwapAddLiquidityEvent: xdai_StableSwapAddLiquidityEvent;
  xdai_StableSwapAddLiquidityEvent_filter: xdai_StableSwapAddLiquidityEvent_filter;
  xdai_StableSwapEvent: ResolversParentTypes['xdai_StableSwapAddLiquidityEvent'] | ResolversParentTypes['xdai_StableSwapRemoveLiquidityEvent'];
  xdai_StableSwapEvent_filter: xdai_StableSwapEvent_filter;
  xdai_StableSwapExchange: xdai_StableSwapExchange;
  xdai_StableSwapExchange_filter: xdai_StableSwapExchange_filter;
  xdai_StableSwapRemoveLiquidityEvent: xdai_StableSwapRemoveLiquidityEvent;
  xdai_StableSwapRemoveLiquidityEvent_filter: xdai_StableSwapRemoveLiquidityEvent_filter;
  xdai_StableSwap_filter: xdai_StableSwap_filter;
  xdai_SwapDailyVolume: xdai_SwapDailyVolume;
  xdai_SwapDailyVolume_filter: xdai_SwapDailyVolume_filter;
  xdai_SwapHourlyVolume: xdai_SwapHourlyVolume;
  xdai_SwapHourlyVolume_filter: xdai_SwapHourlyVolume_filter;
  xdai_SwapTradeVolume: ResolversParentTypes['xdai_SwapDailyVolume'] | ResolversParentTypes['xdai_SwapHourlyVolume'] | ResolversParentTypes['xdai_SwapWeeklyVolume'];
  xdai_SwapTradeVolume_filter: xdai_SwapTradeVolume_filter;
  xdai_SwapWeeklyVolume: xdai_SwapWeeklyVolume;
  xdai_SwapWeeklyVolume_filter: xdai_SwapWeeklyVolume_filter;
  xdai_SystemInfo: xdai_SystemInfo;
  xdai_SystemInfo_filter: xdai_SystemInfo_filter;
  xdai__Block_: xdai__Block_;
  xdai__Meta_: xdai__Meta_;
  arbitrumone_BigDecimal: Scalars['arbitrumone_BigDecimal'];
  arbitrumone_BlockChangedFilter: arbitrumone_BlockChangedFilter;
  arbitrumone_Block_height: arbitrumone_Block_height;
  arbitrumone_Bytes: Scalars['arbitrumone_Bytes'];
  arbitrumone_PooledToken: arbitrumone_PooledToken;
  arbitrumone_PooledToken_filter: arbitrumone_PooledToken_filter;
  arbitrumone_StableSwap: arbitrumone_StableSwap;
  arbitrumone_StableSwapAddLiquidityEvent: arbitrumone_StableSwapAddLiquidityEvent;
  arbitrumone_StableSwapAddLiquidityEvent_filter: arbitrumone_StableSwapAddLiquidityEvent_filter;
  arbitrumone_StableSwapEvent: ResolversParentTypes['arbitrumone_StableSwapAddLiquidityEvent'] | ResolversParentTypes['arbitrumone_StableSwapRemoveLiquidityEvent'];
  arbitrumone_StableSwapEvent_filter: arbitrumone_StableSwapEvent_filter;
  arbitrumone_StableSwapExchange: arbitrumone_StableSwapExchange;
  arbitrumone_StableSwapExchange_filter: arbitrumone_StableSwapExchange_filter;
  arbitrumone_StableSwapRemoveLiquidityEvent: arbitrumone_StableSwapRemoveLiquidityEvent;
  arbitrumone_StableSwapRemoveLiquidityEvent_filter: arbitrumone_StableSwapRemoveLiquidityEvent_filter;
  arbitrumone_StableSwap_filter: arbitrumone_StableSwap_filter;
  arbitrumone_SwapDailyVolume: arbitrumone_SwapDailyVolume;
  arbitrumone_SwapDailyVolume_filter: arbitrumone_SwapDailyVolume_filter;
  arbitrumone_SwapHourlyVolume: arbitrumone_SwapHourlyVolume;
  arbitrumone_SwapHourlyVolume_filter: arbitrumone_SwapHourlyVolume_filter;
  arbitrumone_SwapTradeVolume: ResolversParentTypes['arbitrumone_SwapDailyVolume'] | ResolversParentTypes['arbitrumone_SwapHourlyVolume'] | ResolversParentTypes['arbitrumone_SwapWeeklyVolume'];
  arbitrumone_SwapTradeVolume_filter: arbitrumone_SwapTradeVolume_filter;
  arbitrumone_SwapWeeklyVolume: arbitrumone_SwapWeeklyVolume;
  arbitrumone_SwapWeeklyVolume_filter: arbitrumone_SwapWeeklyVolume_filter;
  arbitrumone_SystemInfo: arbitrumone_SystemInfo;
  arbitrumone_SystemInfo_filter: arbitrumone_SystemInfo_filter;
  arbitrumone__Block_: arbitrumone__Block_;
  arbitrumone__Meta_: arbitrumone__Meta_;
  bnb_BigDecimal: Scalars['bnb_BigDecimal'];
  bnb_BlockChangedFilter: bnb_BlockChangedFilter;
  bnb_Block_height: bnb_Block_height;
  bnb_Bytes: Scalars['bnb_Bytes'];
  bnb_PooledToken: bnb_PooledToken;
  bnb_PooledToken_filter: bnb_PooledToken_filter;
  bnb_StableSwap: bnb_StableSwap;
  bnb_StableSwapAddLiquidityEvent: bnb_StableSwapAddLiquidityEvent;
  bnb_StableSwapAddLiquidityEvent_filter: bnb_StableSwapAddLiquidityEvent_filter;
  bnb_StableSwapEvent: ResolversParentTypes['bnb_StableSwapAddLiquidityEvent'] | ResolversParentTypes['bnb_StableSwapRemoveLiquidityEvent'];
  bnb_StableSwapEvent_filter: bnb_StableSwapEvent_filter;
  bnb_StableSwapExchange: bnb_StableSwapExchange;
  bnb_StableSwapExchange_filter: bnb_StableSwapExchange_filter;
  bnb_StableSwapRemoveLiquidityEvent: bnb_StableSwapRemoveLiquidityEvent;
  bnb_StableSwapRemoveLiquidityEvent_filter: bnb_StableSwapRemoveLiquidityEvent_filter;
  bnb_StableSwap_filter: bnb_StableSwap_filter;
  bnb_SwapDailyVolume: bnb_SwapDailyVolume;
  bnb_SwapDailyVolume_filter: bnb_SwapDailyVolume_filter;
  bnb_SwapHourlyVolume: bnb_SwapHourlyVolume;
  bnb_SwapHourlyVolume_filter: bnb_SwapHourlyVolume_filter;
  bnb_SwapTradeVolume: ResolversParentTypes['bnb_SwapDailyVolume'] | ResolversParentTypes['bnb_SwapHourlyVolume'] | ResolversParentTypes['bnb_SwapWeeklyVolume'];
  bnb_SwapTradeVolume_filter: bnb_SwapTradeVolume_filter;
  bnb_SwapWeeklyVolume: bnb_SwapWeeklyVolume;
  bnb_SwapWeeklyVolume_filter: bnb_SwapWeeklyVolume_filter;
  bnb_SystemInfo: bnb_SystemInfo;
  bnb_SystemInfo_filter: bnb_SystemInfo_filter;
  bnb__Block_: bnb__Block_;
  bnb__Meta_: bnb__Meta_;
  goerli_BigDecimal: Scalars['goerli_BigDecimal'];
  goerli_BlockChangedFilter: goerli_BlockChangedFilter;
  goerli_Block_height: goerli_Block_height;
  goerli_Bytes: Scalars['goerli_Bytes'];
  goerli_PooledToken: goerli_PooledToken;
  goerli_PooledToken_filter: goerli_PooledToken_filter;
  goerli_StableSwap: goerli_StableSwap;
  goerli_StableSwapAddLiquidityEvent: goerli_StableSwapAddLiquidityEvent;
  goerli_StableSwapAddLiquidityEvent_filter: goerli_StableSwapAddLiquidityEvent_filter;
  goerli_StableSwapEvent: ResolversParentTypes['goerli_StableSwapAddLiquidityEvent'] | ResolversParentTypes['goerli_StableSwapRemoveLiquidityEvent'];
  goerli_StableSwapEvent_filter: goerli_StableSwapEvent_filter;
  goerli_StableSwapExchange: goerli_StableSwapExchange;
  goerli_StableSwapExchange_filter: goerli_StableSwapExchange_filter;
  goerli_StableSwapRemoveLiquidityEvent: goerli_StableSwapRemoveLiquidityEvent;
  goerli_StableSwapRemoveLiquidityEvent_filter: goerli_StableSwapRemoveLiquidityEvent_filter;
  goerli_StableSwap_filter: goerli_StableSwap_filter;
  goerli_SwapDailyVolume: goerli_SwapDailyVolume;
  goerli_SwapDailyVolume_filter: goerli_SwapDailyVolume_filter;
  goerli_SwapHourlyVolume: goerli_SwapHourlyVolume;
  goerli_SwapHourlyVolume_filter: goerli_SwapHourlyVolume_filter;
  goerli_SwapTradeVolume: ResolversParentTypes['goerli_SwapDailyVolume'] | ResolversParentTypes['goerli_SwapHourlyVolume'] | ResolversParentTypes['goerli_SwapWeeklyVolume'];
  goerli_SwapTradeVolume_filter: goerli_SwapTradeVolume_filter;
  goerli_SwapWeeklyVolume: goerli_SwapWeeklyVolume;
  goerli_SwapWeeklyVolume_filter: goerli_SwapWeeklyVolume_filter;
  goerli_SystemInfo: goerli_SystemInfo;
  goerli_SystemInfo_filter: goerli_SystemInfo_filter;
  goerli__Block_: goerli__Block_;
  goerli__Meta_: goerli__Meta_;
  stagingoptimismgoerli_BigDecimal: Scalars['stagingoptimismgoerli_BigDecimal'];
  stagingoptimismgoerli_BlockChangedFilter: stagingoptimismgoerli_BlockChangedFilter;
  stagingoptimismgoerli_Block_height: stagingoptimismgoerli_Block_height;
  stagingoptimismgoerli_Bytes: Scalars['stagingoptimismgoerli_Bytes'];
  stagingoptimismgoerli_PooledToken: stagingoptimismgoerli_PooledToken;
  stagingoptimismgoerli_PooledToken_filter: stagingoptimismgoerli_PooledToken_filter;
  stagingoptimismgoerli_StableSwap: stagingoptimismgoerli_StableSwap;
  stagingoptimismgoerli_StableSwapAddLiquidityEvent: stagingoptimismgoerli_StableSwapAddLiquidityEvent;
  stagingoptimismgoerli_StableSwapAddLiquidityEvent_filter: stagingoptimismgoerli_StableSwapAddLiquidityEvent_filter;
  stagingoptimismgoerli_StableSwapEvent: ResolversParentTypes['stagingoptimismgoerli_StableSwapAddLiquidityEvent'] | ResolversParentTypes['stagingoptimismgoerli_StableSwapRemoveLiquidityEvent'];
  stagingoptimismgoerli_StableSwapEvent_filter: stagingoptimismgoerli_StableSwapEvent_filter;
  stagingoptimismgoerli_StableSwapExchange: stagingoptimismgoerli_StableSwapExchange;
  stagingoptimismgoerli_StableSwapExchange_filter: stagingoptimismgoerli_StableSwapExchange_filter;
  stagingoptimismgoerli_StableSwapRemoveLiquidityEvent: stagingoptimismgoerli_StableSwapRemoveLiquidityEvent;
  stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_filter: stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_filter;
  stagingoptimismgoerli_StableSwap_filter: stagingoptimismgoerli_StableSwap_filter;
  stagingoptimismgoerli_SwapDailyVolume: stagingoptimismgoerli_SwapDailyVolume;
  stagingoptimismgoerli_SwapDailyVolume_filter: stagingoptimismgoerli_SwapDailyVolume_filter;
  stagingoptimismgoerli_SwapHourlyVolume: stagingoptimismgoerli_SwapHourlyVolume;
  stagingoptimismgoerli_SwapHourlyVolume_filter: stagingoptimismgoerli_SwapHourlyVolume_filter;
  stagingoptimismgoerli_SwapTradeVolume: ResolversParentTypes['stagingoptimismgoerli_SwapDailyVolume'] | ResolversParentTypes['stagingoptimismgoerli_SwapHourlyVolume'] | ResolversParentTypes['stagingoptimismgoerli_SwapWeeklyVolume'];
  stagingoptimismgoerli_SwapTradeVolume_filter: stagingoptimismgoerli_SwapTradeVolume_filter;
  stagingoptimismgoerli_SwapWeeklyVolume: stagingoptimismgoerli_SwapWeeklyVolume;
  stagingoptimismgoerli_SwapWeeklyVolume_filter: stagingoptimismgoerli_SwapWeeklyVolume_filter;
  stagingoptimismgoerli_SystemInfo: stagingoptimismgoerli_SystemInfo;
  stagingoptimismgoerli_SystemInfo_filter: stagingoptimismgoerli_SystemInfo_filter;
  stagingoptimismgoerli__Block_: stagingoptimismgoerli__Block_;
  stagingoptimismgoerli__Meta_: stagingoptimismgoerli__Meta_;
  optimism_BigDecimal: Scalars['optimism_BigDecimal'];
  optimism_BlockChangedFilter: optimism_BlockChangedFilter;
  optimism_Block_height: optimism_Block_height;
  optimism_Bytes: Scalars['optimism_Bytes'];
  optimism_PooledToken: optimism_PooledToken;
  optimism_PooledToken_filter: optimism_PooledToken_filter;
  optimism_StableSwap: optimism_StableSwap;
  optimism_StableSwapAddLiquidityEvent: optimism_StableSwapAddLiquidityEvent;
  optimism_StableSwapAddLiquidityEvent_filter: optimism_StableSwapAddLiquidityEvent_filter;
  optimism_StableSwapEvent: ResolversParentTypes['optimism_StableSwapAddLiquidityEvent'] | ResolversParentTypes['optimism_StableSwapRemoveLiquidityEvent'];
  optimism_StableSwapEvent_filter: optimism_StableSwapEvent_filter;
  optimism_StableSwapExchange: optimism_StableSwapExchange;
  optimism_StableSwapExchange_filter: optimism_StableSwapExchange_filter;
  optimism_StableSwapRemoveLiquidityEvent: optimism_StableSwapRemoveLiquidityEvent;
  optimism_StableSwapRemoveLiquidityEvent_filter: optimism_StableSwapRemoveLiquidityEvent_filter;
  optimism_StableSwap_filter: optimism_StableSwap_filter;
  optimism_SwapDailyVolume: optimism_SwapDailyVolume;
  optimism_SwapDailyVolume_filter: optimism_SwapDailyVolume_filter;
  optimism_SwapHourlyVolume: optimism_SwapHourlyVolume;
  optimism_SwapHourlyVolume_filter: optimism_SwapHourlyVolume_filter;
  optimism_SwapTradeVolume: ResolversParentTypes['optimism_SwapDailyVolume'] | ResolversParentTypes['optimism_SwapHourlyVolume'] | ResolversParentTypes['optimism_SwapWeeklyVolume'];
  optimism_SwapTradeVolume_filter: optimism_SwapTradeVolume_filter;
  optimism_SwapWeeklyVolume: optimism_SwapWeeklyVolume;
  optimism_SwapWeeklyVolume_filter: optimism_SwapWeeklyVolume_filter;
  optimism_SystemInfo: optimism_SystemInfo;
  optimism_SystemInfo_filter: optimism_SystemInfo_filter;
  optimism__Block_: optimism__Block_;
  optimism__Meta_: optimism__Meta_;
  polygon_BigDecimal: Scalars['polygon_BigDecimal'];
  polygon_BlockChangedFilter: polygon_BlockChangedFilter;
  polygon_Block_height: polygon_Block_height;
  polygon_Bytes: Scalars['polygon_Bytes'];
  polygon_PooledToken: polygon_PooledToken;
  polygon_PooledToken_filter: polygon_PooledToken_filter;
  polygon_StableSwap: polygon_StableSwap;
  polygon_StableSwapAddLiquidityEvent: polygon_StableSwapAddLiquidityEvent;
  polygon_StableSwapAddLiquidityEvent_filter: polygon_StableSwapAddLiquidityEvent_filter;
  polygon_StableSwapEvent: ResolversParentTypes['polygon_StableSwapAddLiquidityEvent'] | ResolversParentTypes['polygon_StableSwapRemoveLiquidityEvent'];
  polygon_StableSwapEvent_filter: polygon_StableSwapEvent_filter;
  polygon_StableSwapExchange: polygon_StableSwapExchange;
  polygon_StableSwapExchange_filter: polygon_StableSwapExchange_filter;
  polygon_StableSwapRemoveLiquidityEvent: polygon_StableSwapRemoveLiquidityEvent;
  polygon_StableSwapRemoveLiquidityEvent_filter: polygon_StableSwapRemoveLiquidityEvent_filter;
  polygon_StableSwap_filter: polygon_StableSwap_filter;
  polygon_SwapDailyVolume: polygon_SwapDailyVolume;
  polygon_SwapDailyVolume_filter: polygon_SwapDailyVolume_filter;
  polygon_SwapHourlyVolume: polygon_SwapHourlyVolume;
  polygon_SwapHourlyVolume_filter: polygon_SwapHourlyVolume_filter;
  polygon_SwapTradeVolume: ResolversParentTypes['polygon_SwapDailyVolume'] | ResolversParentTypes['polygon_SwapHourlyVolume'] | ResolversParentTypes['polygon_SwapWeeklyVolume'];
  polygon_SwapTradeVolume_filter: polygon_SwapTradeVolume_filter;
  polygon_SwapWeeklyVolume: polygon_SwapWeeklyVolume;
  polygon_SwapWeeklyVolume_filter: polygon_SwapWeeklyVolume_filter;
  polygon_SystemInfo: polygon_SystemInfo;
  polygon_SystemInfo_filter: polygon_SystemInfo_filter;
  polygon__Block_: polygon__Block_;
  polygon__Meta_: polygon__Meta_;
  staginggoerli_BigDecimal: Scalars['staginggoerli_BigDecimal'];
  staginggoerli_BlockChangedFilter: staginggoerli_BlockChangedFilter;
  staginggoerli_Block_height: staginggoerli_Block_height;
  staginggoerli_Bytes: Scalars['staginggoerli_Bytes'];
  staginggoerli_PooledToken: staginggoerli_PooledToken;
  staginggoerli_PooledToken_filter: staginggoerli_PooledToken_filter;
  staginggoerli_StableSwap: staginggoerli_StableSwap;
  staginggoerli_StableSwapAddLiquidityEvent: staginggoerli_StableSwapAddLiquidityEvent;
  staginggoerli_StableSwapAddLiquidityEvent_filter: staginggoerli_StableSwapAddLiquidityEvent_filter;
  staginggoerli_StableSwapEvent: ResolversParentTypes['staginggoerli_StableSwapAddLiquidityEvent'] | ResolversParentTypes['staginggoerli_StableSwapRemoveLiquidityEvent'];
  staginggoerli_StableSwapEvent_filter: staginggoerli_StableSwapEvent_filter;
  staginggoerli_StableSwapExchange: staginggoerli_StableSwapExchange;
  staginggoerli_StableSwapExchange_filter: staginggoerli_StableSwapExchange_filter;
  staginggoerli_StableSwapRemoveLiquidityEvent: staginggoerli_StableSwapRemoveLiquidityEvent;
  staginggoerli_StableSwapRemoveLiquidityEvent_filter: staginggoerli_StableSwapRemoveLiquidityEvent_filter;
  staginggoerli_StableSwap_filter: staginggoerli_StableSwap_filter;
  staginggoerli_SwapDailyVolume: staginggoerli_SwapDailyVolume;
  staginggoerli_SwapDailyVolume_filter: staginggoerli_SwapDailyVolume_filter;
  staginggoerli_SwapHourlyVolume: staginggoerli_SwapHourlyVolume;
  staginggoerli_SwapHourlyVolume_filter: staginggoerli_SwapHourlyVolume_filter;
  staginggoerli_SwapTradeVolume: ResolversParentTypes['staginggoerli_SwapDailyVolume'] | ResolversParentTypes['staginggoerli_SwapHourlyVolume'] | ResolversParentTypes['staginggoerli_SwapWeeklyVolume'];
  staginggoerli_SwapTradeVolume_filter: staginggoerli_SwapTradeVolume_filter;
  staginggoerli_SwapWeeklyVolume: staginggoerli_SwapWeeklyVolume;
  staginggoerli_SwapWeeklyVolume_filter: staginggoerli_SwapWeeklyVolume_filter;
  staginggoerli_SystemInfo: staginggoerli_SystemInfo;
  staginggoerli_SystemInfo_filter: staginggoerli_SystemInfo_filter;
  staginggoerli__Block_: staginggoerli__Block_;
  staginggoerli__Meta_: staginggoerli__Meta_;
  arbitrumgoerli_BigDecimal: Scalars['arbitrumgoerli_BigDecimal'];
  arbitrumgoerli_BlockChangedFilter: arbitrumgoerli_BlockChangedFilter;
  arbitrumgoerli_Block_height: arbitrumgoerli_Block_height;
  arbitrumgoerli_Bytes: Scalars['arbitrumgoerli_Bytes'];
  arbitrumgoerli_PooledToken: arbitrumgoerli_PooledToken;
  arbitrumgoerli_PooledToken_filter: arbitrumgoerli_PooledToken_filter;
  arbitrumgoerli_StableSwap: arbitrumgoerli_StableSwap;
  arbitrumgoerli_StableSwapAddLiquidityEvent: arbitrumgoerli_StableSwapAddLiquidityEvent;
  arbitrumgoerli_StableSwapAddLiquidityEvent_filter: arbitrumgoerli_StableSwapAddLiquidityEvent_filter;
  arbitrumgoerli_StableSwapEvent: ResolversParentTypes['arbitrumgoerli_StableSwapAddLiquidityEvent'] | ResolversParentTypes['arbitrumgoerli_StableSwapRemoveLiquidityEvent'];
  arbitrumgoerli_StableSwapEvent_filter: arbitrumgoerli_StableSwapEvent_filter;
  arbitrumgoerli_StableSwapExchange: arbitrumgoerli_StableSwapExchange;
  arbitrumgoerli_StableSwapExchange_filter: arbitrumgoerli_StableSwapExchange_filter;
  arbitrumgoerli_StableSwapRemoveLiquidityEvent: arbitrumgoerli_StableSwapRemoveLiquidityEvent;
  arbitrumgoerli_StableSwapRemoveLiquidityEvent_filter: arbitrumgoerli_StableSwapRemoveLiquidityEvent_filter;
  arbitrumgoerli_StableSwap_filter: arbitrumgoerli_StableSwap_filter;
  arbitrumgoerli_SwapDailyVolume: arbitrumgoerli_SwapDailyVolume;
  arbitrumgoerli_SwapDailyVolume_filter: arbitrumgoerli_SwapDailyVolume_filter;
  arbitrumgoerli_SwapHourlyVolume: arbitrumgoerli_SwapHourlyVolume;
  arbitrumgoerli_SwapHourlyVolume_filter: arbitrumgoerli_SwapHourlyVolume_filter;
  arbitrumgoerli_SwapTradeVolume: ResolversParentTypes['arbitrumgoerli_SwapDailyVolume'] | ResolversParentTypes['arbitrumgoerli_SwapHourlyVolume'] | ResolversParentTypes['arbitrumgoerli_SwapWeeklyVolume'];
  arbitrumgoerli_SwapTradeVolume_filter: arbitrumgoerli_SwapTradeVolume_filter;
  arbitrumgoerli_SwapWeeklyVolume: arbitrumgoerli_SwapWeeklyVolume;
  arbitrumgoerli_SwapWeeklyVolume_filter: arbitrumgoerli_SwapWeeklyVolume_filter;
  arbitrumgoerli_SystemInfo: arbitrumgoerli_SystemInfo;
  arbitrumgoerli_SystemInfo_filter: arbitrumgoerli_SystemInfo_filter;
  arbitrumgoerli__Block_: arbitrumgoerli__Block_;
  arbitrumgoerli__Meta_: arbitrumgoerli__Meta_;
  optimismgoerli_BigDecimal: Scalars['optimismgoerli_BigDecimal'];
  optimismgoerli_BlockChangedFilter: optimismgoerli_BlockChangedFilter;
  optimismgoerli_Block_height: optimismgoerli_Block_height;
  optimismgoerli_Bytes: Scalars['optimismgoerli_Bytes'];
  optimismgoerli_PooledToken: optimismgoerli_PooledToken;
  optimismgoerli_PooledToken_filter: optimismgoerli_PooledToken_filter;
  optimismgoerli_StableSwap: optimismgoerli_StableSwap;
  optimismgoerli_StableSwapAddLiquidityEvent: optimismgoerli_StableSwapAddLiquidityEvent;
  optimismgoerli_StableSwapAddLiquidityEvent_filter: optimismgoerli_StableSwapAddLiquidityEvent_filter;
  optimismgoerli_StableSwapEvent: ResolversParentTypes['optimismgoerli_StableSwapAddLiquidityEvent'] | ResolversParentTypes['optimismgoerli_StableSwapRemoveLiquidityEvent'];
  optimismgoerli_StableSwapEvent_filter: optimismgoerli_StableSwapEvent_filter;
  optimismgoerli_StableSwapExchange: optimismgoerli_StableSwapExchange;
  optimismgoerli_StableSwapExchange_filter: optimismgoerli_StableSwapExchange_filter;
  optimismgoerli_StableSwapRemoveLiquidityEvent: optimismgoerli_StableSwapRemoveLiquidityEvent;
  optimismgoerli_StableSwapRemoveLiquidityEvent_filter: optimismgoerli_StableSwapRemoveLiquidityEvent_filter;
  optimismgoerli_StableSwap_filter: optimismgoerli_StableSwap_filter;
  optimismgoerli_SwapDailyVolume: optimismgoerli_SwapDailyVolume;
  optimismgoerli_SwapDailyVolume_filter: optimismgoerli_SwapDailyVolume_filter;
  optimismgoerli_SwapHourlyVolume: optimismgoerli_SwapHourlyVolume;
  optimismgoerli_SwapHourlyVolume_filter: optimismgoerli_SwapHourlyVolume_filter;
  optimismgoerli_SwapTradeVolume: ResolversParentTypes['optimismgoerli_SwapDailyVolume'] | ResolversParentTypes['optimismgoerli_SwapHourlyVolume'] | ResolversParentTypes['optimismgoerli_SwapWeeklyVolume'];
  optimismgoerli_SwapTradeVolume_filter: optimismgoerli_SwapTradeVolume_filter;
  optimismgoerli_SwapWeeklyVolume: optimismgoerli_SwapWeeklyVolume;
  optimismgoerli_SwapWeeklyVolume_filter: optimismgoerli_SwapWeeklyVolume_filter;
  optimismgoerli_SystemInfo: optimismgoerli_SystemInfo;
  optimismgoerli_SystemInfo_filter: optimismgoerli_SystemInfo_filter;
  optimismgoerli__Block_: optimismgoerli__Block_;
  optimismgoerli__Meta_: optimismgoerli__Meta_;
  stagingmumbai_BigDecimal: Scalars['stagingmumbai_BigDecimal'];
  stagingmumbai_BlockChangedFilter: stagingmumbai_BlockChangedFilter;
  stagingmumbai_Block_height: stagingmumbai_Block_height;
  stagingmumbai_Bytes: Scalars['stagingmumbai_Bytes'];
  stagingmumbai_PooledToken: stagingmumbai_PooledToken;
  stagingmumbai_PooledToken_filter: stagingmumbai_PooledToken_filter;
  stagingmumbai_StableSwap: stagingmumbai_StableSwap;
  stagingmumbai_StableSwapAddLiquidityEvent: stagingmumbai_StableSwapAddLiquidityEvent;
  stagingmumbai_StableSwapAddLiquidityEvent_filter: stagingmumbai_StableSwapAddLiquidityEvent_filter;
  stagingmumbai_StableSwapEvent: ResolversParentTypes['stagingmumbai_StableSwapAddLiquidityEvent'] | ResolversParentTypes['stagingmumbai_StableSwapRemoveLiquidityEvent'];
  stagingmumbai_StableSwapEvent_filter: stagingmumbai_StableSwapEvent_filter;
  stagingmumbai_StableSwapExchange: stagingmumbai_StableSwapExchange;
  stagingmumbai_StableSwapExchange_filter: stagingmumbai_StableSwapExchange_filter;
  stagingmumbai_StableSwapRemoveLiquidityEvent: stagingmumbai_StableSwapRemoveLiquidityEvent;
  stagingmumbai_StableSwapRemoveLiquidityEvent_filter: stagingmumbai_StableSwapRemoveLiquidityEvent_filter;
  stagingmumbai_StableSwap_filter: stagingmumbai_StableSwap_filter;
  stagingmumbai_SwapDailyVolume: stagingmumbai_SwapDailyVolume;
  stagingmumbai_SwapDailyVolume_filter: stagingmumbai_SwapDailyVolume_filter;
  stagingmumbai_SwapHourlyVolume: stagingmumbai_SwapHourlyVolume;
  stagingmumbai_SwapHourlyVolume_filter: stagingmumbai_SwapHourlyVolume_filter;
  stagingmumbai_SwapTradeVolume: ResolversParentTypes['stagingmumbai_SwapDailyVolume'] | ResolversParentTypes['stagingmumbai_SwapHourlyVolume'] | ResolversParentTypes['stagingmumbai_SwapWeeklyVolume'];
  stagingmumbai_SwapTradeVolume_filter: stagingmumbai_SwapTradeVolume_filter;
  stagingmumbai_SwapWeeklyVolume: stagingmumbai_SwapWeeklyVolume;
  stagingmumbai_SwapWeeklyVolume_filter: stagingmumbai_SwapWeeklyVolume_filter;
  stagingmumbai_SystemInfo: stagingmumbai_SystemInfo;
  stagingmumbai_SystemInfo_filter: stagingmumbai_SystemInfo_filter;
  stagingmumbai__Block_: stagingmumbai__Block_;
  stagingmumbai__Meta_: stagingmumbai__Meta_;
  stagingarbitrumgoerli_BigDecimal: Scalars['stagingarbitrumgoerli_BigDecimal'];
  stagingarbitrumgoerli_BlockChangedFilter: stagingarbitrumgoerli_BlockChangedFilter;
  stagingarbitrumgoerli_Block_height: stagingarbitrumgoerli_Block_height;
  stagingarbitrumgoerli_Bytes: Scalars['stagingarbitrumgoerli_Bytes'];
  stagingarbitrumgoerli_PooledToken: stagingarbitrumgoerli_PooledToken;
  stagingarbitrumgoerli_PooledToken_filter: stagingarbitrumgoerli_PooledToken_filter;
  stagingarbitrumgoerli_StableSwap: stagingarbitrumgoerli_StableSwap;
  stagingarbitrumgoerli_StableSwapAddLiquidityEvent: stagingarbitrumgoerli_StableSwapAddLiquidityEvent;
  stagingarbitrumgoerli_StableSwapAddLiquidityEvent_filter: stagingarbitrumgoerli_StableSwapAddLiquidityEvent_filter;
  stagingarbitrumgoerli_StableSwapEvent: ResolversParentTypes['stagingarbitrumgoerli_StableSwapAddLiquidityEvent'] | ResolversParentTypes['stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent'];
  stagingarbitrumgoerli_StableSwapEvent_filter: stagingarbitrumgoerli_StableSwapEvent_filter;
  stagingarbitrumgoerli_StableSwapExchange: stagingarbitrumgoerli_StableSwapExchange;
  stagingarbitrumgoerli_StableSwapExchange_filter: stagingarbitrumgoerli_StableSwapExchange_filter;
  stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent: stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent;
  stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_filter: stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_filter;
  stagingarbitrumgoerli_StableSwap_filter: stagingarbitrumgoerli_StableSwap_filter;
  stagingarbitrumgoerli_SwapDailyVolume: stagingarbitrumgoerli_SwapDailyVolume;
  stagingarbitrumgoerli_SwapDailyVolume_filter: stagingarbitrumgoerli_SwapDailyVolume_filter;
  stagingarbitrumgoerli_SwapHourlyVolume: stagingarbitrumgoerli_SwapHourlyVolume;
  stagingarbitrumgoerli_SwapHourlyVolume_filter: stagingarbitrumgoerli_SwapHourlyVolume_filter;
  stagingarbitrumgoerli_SwapTradeVolume: ResolversParentTypes['stagingarbitrumgoerli_SwapDailyVolume'] | ResolversParentTypes['stagingarbitrumgoerli_SwapHourlyVolume'] | ResolversParentTypes['stagingarbitrumgoerli_SwapWeeklyVolume'];
  stagingarbitrumgoerli_SwapTradeVolume_filter: stagingarbitrumgoerli_SwapTradeVolume_filter;
  stagingarbitrumgoerli_SwapWeeklyVolume: stagingarbitrumgoerli_SwapWeeklyVolume;
  stagingarbitrumgoerli_SwapWeeklyVolume_filter: stagingarbitrumgoerli_SwapWeeklyVolume_filter;
  stagingarbitrumgoerli_SystemInfo: stagingarbitrumgoerli_SystemInfo;
  stagingarbitrumgoerli_SystemInfo_filter: stagingarbitrumgoerli_SystemInfo_filter;
  stagingarbitrumgoerli__Block_: stagingarbitrumgoerli__Block_;
  stagingarbitrumgoerli__Meta_: stagingarbitrumgoerli__Meta_;
}>;

export type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
  mumbai_systemInfo?: Resolver<Maybe<ResolversTypes['mumbai_SystemInfo']>, ParentType, ContextType, RequireFields<Querymumbai_systemInfoArgs, 'id' | 'subgraphError'>>;
  mumbai_systemInfos?: Resolver<Array<ResolversTypes['mumbai_SystemInfo']>, ParentType, ContextType, RequireFields<Querymumbai_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_pooledToken?: Resolver<Maybe<ResolversTypes['mumbai_PooledToken']>, ParentType, ContextType, RequireFields<Querymumbai_pooledTokenArgs, 'id' | 'subgraphError'>>;
  mumbai_pooledTokens?: Resolver<Array<ResolversTypes['mumbai_PooledToken']>, ParentType, ContextType, RequireFields<Querymumbai_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_stableSwap?: Resolver<Maybe<ResolversTypes['mumbai_StableSwap']>, ParentType, ContextType, RequireFields<Querymumbai_stableSwapArgs, 'id' | 'subgraphError'>>;
  mumbai_stableSwaps?: Resolver<Array<ResolversTypes['mumbai_StableSwap']>, ParentType, ContextType, RequireFields<Querymumbai_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['mumbai_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querymumbai_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  mumbai_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['mumbai_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querymumbai_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['mumbai_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querymumbai_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  mumbai_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['mumbai_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querymumbai_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_stableSwapExchange?: Resolver<Maybe<ResolversTypes['mumbai_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querymumbai_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  mumbai_stableSwapExchanges?: Resolver<Array<ResolversTypes['mumbai_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querymumbai_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swapDailyVolume?: Resolver<Maybe<ResolversTypes['mumbai_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swapDailyVolumes?: Resolver<Array<ResolversTypes['mumbai_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['mumbai_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swapHourlyVolumes?: Resolver<Array<ResolversTypes['mumbai_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['mumbai_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['mumbai_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_stableSwapEvent?: Resolver<Maybe<ResolversTypes['mumbai_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querymumbai_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  mumbai_stableSwapEvents?: Resolver<Array<ResolversTypes['mumbai_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querymumbai_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swapTradeVolume?: Resolver<Maybe<ResolversTypes['mumbai_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swapTradeVolumes?: Resolver<Array<ResolversTypes['mumbai_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai__meta?: Resolver<Maybe<ResolversTypes['mumbai__Meta_']>, ParentType, ContextType, Partial<Querymumbai__metaArgs>>;
  xdai_systemInfo?: Resolver<Maybe<ResolversTypes['xdai_SystemInfo']>, ParentType, ContextType, RequireFields<Queryxdai_systemInfoArgs, 'id' | 'subgraphError'>>;
  xdai_systemInfos?: Resolver<Array<ResolversTypes['xdai_SystemInfo']>, ParentType, ContextType, RequireFields<Queryxdai_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_pooledToken?: Resolver<Maybe<ResolversTypes['xdai_PooledToken']>, ParentType, ContextType, RequireFields<Queryxdai_pooledTokenArgs, 'id' | 'subgraphError'>>;
  xdai_pooledTokens?: Resolver<Array<ResolversTypes['xdai_PooledToken']>, ParentType, ContextType, RequireFields<Queryxdai_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_stableSwap?: Resolver<Maybe<ResolversTypes['xdai_StableSwap']>, ParentType, ContextType, RequireFields<Queryxdai_stableSwapArgs, 'id' | 'subgraphError'>>;
  xdai_stableSwaps?: Resolver<Array<ResolversTypes['xdai_StableSwap']>, ParentType, ContextType, RequireFields<Queryxdai_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['xdai_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryxdai_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  xdai_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['xdai_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryxdai_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['xdai_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryxdai_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  xdai_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['xdai_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryxdai_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_stableSwapExchange?: Resolver<Maybe<ResolversTypes['xdai_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryxdai_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  xdai_stableSwapExchanges?: Resolver<Array<ResolversTypes['xdai_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryxdai_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swapDailyVolume?: Resolver<Maybe<ResolversTypes['xdai_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swapDailyVolumes?: Resolver<Array<ResolversTypes['xdai_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['xdai_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swapHourlyVolumes?: Resolver<Array<ResolversTypes['xdai_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['xdai_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['xdai_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_stableSwapEvent?: Resolver<Maybe<ResolversTypes['xdai_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryxdai_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  xdai_stableSwapEvents?: Resolver<Array<ResolversTypes['xdai_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryxdai_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swapTradeVolume?: Resolver<Maybe<ResolversTypes['xdai_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swapTradeVolumes?: Resolver<Array<ResolversTypes['xdai_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai__meta?: Resolver<Maybe<ResolversTypes['xdai__Meta_']>, ParentType, ContextType, Partial<Queryxdai__metaArgs>>;
  arbitrumone_systemInfo?: Resolver<Maybe<ResolversTypes['arbitrumone_SystemInfo']>, ParentType, ContextType, RequireFields<Queryarbitrumone_systemInfoArgs, 'id' | 'subgraphError'>>;
  arbitrumone_systemInfos?: Resolver<Array<ResolversTypes['arbitrumone_SystemInfo']>, ParentType, ContextType, RequireFields<Queryarbitrumone_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_pooledToken?: Resolver<Maybe<ResolversTypes['arbitrumone_PooledToken']>, ParentType, ContextType, RequireFields<Queryarbitrumone_pooledTokenArgs, 'id' | 'subgraphError'>>;
  arbitrumone_pooledTokens?: Resolver<Array<ResolversTypes['arbitrumone_PooledToken']>, ParentType, ContextType, RequireFields<Queryarbitrumone_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_stableSwap?: Resolver<Maybe<ResolversTypes['arbitrumone_StableSwap']>, ParentType, ContextType, RequireFields<Queryarbitrumone_stableSwapArgs, 'id' | 'subgraphError'>>;
  arbitrumone_stableSwaps?: Resolver<Array<ResolversTypes['arbitrumone_StableSwap']>, ParentType, ContextType, RequireFields<Queryarbitrumone_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['arbitrumone_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['arbitrumone_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['arbitrumone_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['arbitrumone_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_stableSwapExchange?: Resolver<Maybe<ResolversTypes['arbitrumone_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryarbitrumone_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_stableSwapExchanges?: Resolver<Array<ResolversTypes['arbitrumone_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryarbitrumone_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swapDailyVolume?: Resolver<Maybe<ResolversTypes['arbitrumone_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swapDailyVolumes?: Resolver<Array<ResolversTypes['arbitrumone_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['arbitrumone_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swapHourlyVolumes?: Resolver<Array<ResolversTypes['arbitrumone_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['arbitrumone_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['arbitrumone_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_stableSwapEvent?: Resolver<Maybe<ResolversTypes['arbitrumone_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_stableSwapEvents?: Resolver<Array<ResolversTypes['arbitrumone_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swapTradeVolume?: Resolver<Maybe<ResolversTypes['arbitrumone_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swapTradeVolumes?: Resolver<Array<ResolversTypes['arbitrumone_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone__meta?: Resolver<Maybe<ResolversTypes['arbitrumone__Meta_']>, ParentType, ContextType, Partial<Queryarbitrumone__metaArgs>>;
  bnb_systemInfo?: Resolver<Maybe<ResolversTypes['bnb_SystemInfo']>, ParentType, ContextType, RequireFields<Querybnb_systemInfoArgs, 'id' | 'subgraphError'>>;
  bnb_systemInfos?: Resolver<Array<ResolversTypes['bnb_SystemInfo']>, ParentType, ContextType, RequireFields<Querybnb_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_pooledToken?: Resolver<Maybe<ResolversTypes['bnb_PooledToken']>, ParentType, ContextType, RequireFields<Querybnb_pooledTokenArgs, 'id' | 'subgraphError'>>;
  bnb_pooledTokens?: Resolver<Array<ResolversTypes['bnb_PooledToken']>, ParentType, ContextType, RequireFields<Querybnb_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_stableSwap?: Resolver<Maybe<ResolversTypes['bnb_StableSwap']>, ParentType, ContextType, RequireFields<Querybnb_stableSwapArgs, 'id' | 'subgraphError'>>;
  bnb_stableSwaps?: Resolver<Array<ResolversTypes['bnb_StableSwap']>, ParentType, ContextType, RequireFields<Querybnb_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['bnb_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querybnb_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  bnb_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['bnb_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querybnb_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['bnb_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querybnb_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  bnb_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['bnb_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querybnb_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_stableSwapExchange?: Resolver<Maybe<ResolversTypes['bnb_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querybnb_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  bnb_stableSwapExchanges?: Resolver<Array<ResolversTypes['bnb_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querybnb_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swapDailyVolume?: Resolver<Maybe<ResolversTypes['bnb_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swapDailyVolumes?: Resolver<Array<ResolversTypes['bnb_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['bnb_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swapHourlyVolumes?: Resolver<Array<ResolversTypes['bnb_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['bnb_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['bnb_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_stableSwapEvent?: Resolver<Maybe<ResolversTypes['bnb_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querybnb_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  bnb_stableSwapEvents?: Resolver<Array<ResolversTypes['bnb_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querybnb_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swapTradeVolume?: Resolver<Maybe<ResolversTypes['bnb_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querybnb_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swapTradeVolumes?: Resolver<Array<ResolversTypes['bnb_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querybnb_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb__meta?: Resolver<Maybe<ResolversTypes['bnb__Meta_']>, ParentType, ContextType, Partial<Querybnb__metaArgs>>;
  goerli_systemInfo?: Resolver<Maybe<ResolversTypes['goerli_SystemInfo']>, ParentType, ContextType, RequireFields<Querygoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  goerli_systemInfos?: Resolver<Array<ResolversTypes['goerli_SystemInfo']>, ParentType, ContextType, RequireFields<Querygoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_pooledToken?: Resolver<Maybe<ResolversTypes['goerli_PooledToken']>, ParentType, ContextType, RequireFields<Querygoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  goerli_pooledTokens?: Resolver<Array<ResolversTypes['goerli_PooledToken']>, ParentType, ContextType, RequireFields<Querygoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_stableSwap?: Resolver<Maybe<ResolversTypes['goerli_StableSwap']>, ParentType, ContextType, RequireFields<Querygoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  goerli_stableSwaps?: Resolver<Array<ResolversTypes['goerli_StableSwap']>, ParentType, ContextType, RequireFields<Querygoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['goerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querygoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  goerli_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['goerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querygoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['goerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querygoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  goerli_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['goerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querygoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_stableSwapExchange?: Resolver<Maybe<ResolversTypes['goerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querygoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  goerli_stableSwapExchanges?: Resolver<Array<ResolversTypes['goerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querygoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swapDailyVolume?: Resolver<Maybe<ResolversTypes['goerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swapDailyVolumes?: Resolver<Array<ResolversTypes['goerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['goerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swapHourlyVolumes?: Resolver<Array<ResolversTypes['goerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['goerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['goerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_stableSwapEvent?: Resolver<Maybe<ResolversTypes['goerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querygoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  goerli_stableSwapEvents?: Resolver<Array<ResolversTypes['goerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querygoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swapTradeVolume?: Resolver<Maybe<ResolversTypes['goerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swapTradeVolumes?: Resolver<Array<ResolversTypes['goerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli__meta?: Resolver<Maybe<ResolversTypes['goerli__Meta_']>, ParentType, ContextType, Partial<Querygoerli__metaArgs>>;
  stagingoptimismgoerli_systemInfo?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_systemInfos?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_pooledToken?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_pooledTokens?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwap?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwaps?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapExchange?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapExchanges?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swapDailyVolume?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swapDailyVolumes?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swapHourlyVolumes?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapEvent?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapEvents?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swapTradeVolume?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swapTradeVolumes?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli__meta?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli__Meta_']>, ParentType, ContextType, Partial<Querystagingoptimismgoerli__metaArgs>>;
  optimism_systemInfo?: Resolver<Maybe<ResolversTypes['optimism_SystemInfo']>, ParentType, ContextType, RequireFields<Queryoptimism_systemInfoArgs, 'id' | 'subgraphError'>>;
  optimism_systemInfos?: Resolver<Array<ResolversTypes['optimism_SystemInfo']>, ParentType, ContextType, RequireFields<Queryoptimism_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_pooledToken?: Resolver<Maybe<ResolversTypes['optimism_PooledToken']>, ParentType, ContextType, RequireFields<Queryoptimism_pooledTokenArgs, 'id' | 'subgraphError'>>;
  optimism_pooledTokens?: Resolver<Array<ResolversTypes['optimism_PooledToken']>, ParentType, ContextType, RequireFields<Queryoptimism_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_stableSwap?: Resolver<Maybe<ResolversTypes['optimism_StableSwap']>, ParentType, ContextType, RequireFields<Queryoptimism_stableSwapArgs, 'id' | 'subgraphError'>>;
  optimism_stableSwaps?: Resolver<Array<ResolversTypes['optimism_StableSwap']>, ParentType, ContextType, RequireFields<Queryoptimism_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['optimism_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimism_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['optimism_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['optimism_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimism_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['optimism_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_stableSwapExchange?: Resolver<Maybe<ResolversTypes['optimism_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryoptimism_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  optimism_stableSwapExchanges?: Resolver<Array<ResolversTypes['optimism_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryoptimism_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swapDailyVolume?: Resolver<Maybe<ResolversTypes['optimism_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swapDailyVolumes?: Resolver<Array<ResolversTypes['optimism_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['optimism_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swapHourlyVolumes?: Resolver<Array<ResolversTypes['optimism_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['optimism_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['optimism_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_stableSwapEvent?: Resolver<Maybe<ResolversTypes['optimism_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  optimism_stableSwapEvents?: Resolver<Array<ResolversTypes['optimism_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swapTradeVolume?: Resolver<Maybe<ResolversTypes['optimism_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swapTradeVolumes?: Resolver<Array<ResolversTypes['optimism_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism__meta?: Resolver<Maybe<ResolversTypes['optimism__Meta_']>, ParentType, ContextType, Partial<Queryoptimism__metaArgs>>;
  polygon_systemInfo?: Resolver<Maybe<ResolversTypes['polygon_SystemInfo']>, ParentType, ContextType, RequireFields<Querypolygon_systemInfoArgs, 'id' | 'subgraphError'>>;
  polygon_systemInfos?: Resolver<Array<ResolversTypes['polygon_SystemInfo']>, ParentType, ContextType, RequireFields<Querypolygon_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_pooledToken?: Resolver<Maybe<ResolversTypes['polygon_PooledToken']>, ParentType, ContextType, RequireFields<Querypolygon_pooledTokenArgs, 'id' | 'subgraphError'>>;
  polygon_pooledTokens?: Resolver<Array<ResolversTypes['polygon_PooledToken']>, ParentType, ContextType, RequireFields<Querypolygon_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_stableSwap?: Resolver<Maybe<ResolversTypes['polygon_StableSwap']>, ParentType, ContextType, RequireFields<Querypolygon_stableSwapArgs, 'id' | 'subgraphError'>>;
  polygon_stableSwaps?: Resolver<Array<ResolversTypes['polygon_StableSwap']>, ParentType, ContextType, RequireFields<Querypolygon_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['polygon_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querypolygon_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  polygon_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['polygon_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querypolygon_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['polygon_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querypolygon_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  polygon_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['polygon_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querypolygon_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_stableSwapExchange?: Resolver<Maybe<ResolversTypes['polygon_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querypolygon_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  polygon_stableSwapExchanges?: Resolver<Array<ResolversTypes['polygon_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querypolygon_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swapDailyVolume?: Resolver<Maybe<ResolversTypes['polygon_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swapDailyVolumes?: Resolver<Array<ResolversTypes['polygon_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['polygon_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swapHourlyVolumes?: Resolver<Array<ResolversTypes['polygon_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['polygon_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['polygon_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_stableSwapEvent?: Resolver<Maybe<ResolversTypes['polygon_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querypolygon_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  polygon_stableSwapEvents?: Resolver<Array<ResolversTypes['polygon_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querypolygon_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swapTradeVolume?: Resolver<Maybe<ResolversTypes['polygon_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swapTradeVolumes?: Resolver<Array<ResolversTypes['polygon_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon__meta?: Resolver<Maybe<ResolversTypes['polygon__Meta_']>, ParentType, ContextType, Partial<Querypolygon__metaArgs>>;
  staginggoerli_systemInfo?: Resolver<Maybe<ResolversTypes['staginggoerli_SystemInfo']>, ParentType, ContextType, RequireFields<Querystaginggoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  staginggoerli_systemInfos?: Resolver<Array<ResolversTypes['staginggoerli_SystemInfo']>, ParentType, ContextType, RequireFields<Querystaginggoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_pooledToken?: Resolver<Maybe<ResolversTypes['staginggoerli_PooledToken']>, ParentType, ContextType, RequireFields<Querystaginggoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  staginggoerli_pooledTokens?: Resolver<Array<ResolversTypes['staginggoerli_PooledToken']>, ParentType, ContextType, RequireFields<Querystaginggoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwap?: Resolver<Maybe<ResolversTypes['staginggoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwaps?: Resolver<Array<ResolversTypes['staginggoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['staginggoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['staginggoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['staginggoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['staginggoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapExchange?: Resolver<Maybe<ResolversTypes['staginggoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapExchanges?: Resolver<Array<ResolversTypes['staginggoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapDailyVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapDailyVolumes?: Resolver<Array<ResolversTypes['staginggoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapHourlyVolumes?: Resolver<Array<ResolversTypes['staginggoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['staginggoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapEvent?: Resolver<Maybe<ResolversTypes['staginggoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapEvents?: Resolver<Array<ResolversTypes['staginggoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapTradeVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapTradeVolumes?: Resolver<Array<ResolversTypes['staginggoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli__meta?: Resolver<Maybe<ResolversTypes['staginggoerli__Meta_']>, ParentType, ContextType, Partial<Querystaginggoerli__metaArgs>>;
  arbitrumgoerli_systemInfo?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_SystemInfo']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_systemInfos?: Resolver<Array<ResolversTypes['arbitrumgoerli_SystemInfo']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_pooledToken?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_PooledToken']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_pooledTokens?: Resolver<Array<ResolversTypes['arbitrumgoerli_PooledToken']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_stableSwap?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_stableSwaps?: Resolver<Array<ResolversTypes['arbitrumgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['arbitrumgoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['arbitrumgoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapExchange?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapExchanges?: Resolver<Array<ResolversTypes['arbitrumgoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swapDailyVolume?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swapDailyVolumes?: Resolver<Array<ResolversTypes['arbitrumgoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swapHourlyVolumes?: Resolver<Array<ResolversTypes['arbitrumgoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['arbitrumgoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapEvent?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapEvents?: Resolver<Array<ResolversTypes['arbitrumgoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swapTradeVolume?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swapTradeVolumes?: Resolver<Array<ResolversTypes['arbitrumgoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli__meta?: Resolver<Maybe<ResolversTypes['arbitrumgoerli__Meta_']>, ParentType, ContextType, Partial<Queryarbitrumgoerli__metaArgs>>;
  optimismgoerli_systemInfo?: Resolver<Maybe<ResolversTypes['optimismgoerli_SystemInfo']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_systemInfos?: Resolver<Array<ResolversTypes['optimismgoerli_SystemInfo']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_pooledToken?: Resolver<Maybe<ResolversTypes['optimismgoerli_PooledToken']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_pooledTokens?: Resolver<Array<ResolversTypes['optimismgoerli_PooledToken']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_stableSwap?: Resolver<Maybe<ResolversTypes['optimismgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_stableSwaps?: Resolver<Array<ResolversTypes['optimismgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['optimismgoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['optimismgoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['optimismgoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['optimismgoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_stableSwapExchange?: Resolver<Maybe<ResolversTypes['optimismgoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_stableSwapExchanges?: Resolver<Array<ResolversTypes['optimismgoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swapDailyVolume?: Resolver<Maybe<ResolversTypes['optimismgoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swapDailyVolumes?: Resolver<Array<ResolversTypes['optimismgoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['optimismgoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swapHourlyVolumes?: Resolver<Array<ResolversTypes['optimismgoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['optimismgoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['optimismgoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_stableSwapEvent?: Resolver<Maybe<ResolversTypes['optimismgoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_stableSwapEvents?: Resolver<Array<ResolversTypes['optimismgoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swapTradeVolume?: Resolver<Maybe<ResolversTypes['optimismgoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swapTradeVolumes?: Resolver<Array<ResolversTypes['optimismgoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli__meta?: Resolver<Maybe<ResolversTypes['optimismgoerli__Meta_']>, ParentType, ContextType, Partial<Queryoptimismgoerli__metaArgs>>;
  stagingmumbai_systemInfo?: Resolver<Maybe<ResolversTypes['stagingmumbai_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingmumbai_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_systemInfos?: Resolver<Array<ResolversTypes['stagingmumbai_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingmumbai_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_pooledToken?: Resolver<Maybe<ResolversTypes['stagingmumbai_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingmumbai_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_pooledTokens?: Resolver<Array<ResolversTypes['stagingmumbai_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingmumbai_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_stableSwap?: Resolver<Maybe<ResolversTypes['stagingmumbai_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingmumbai_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_stableSwaps?: Resolver<Array<ResolversTypes['stagingmumbai_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingmumbai_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingmumbai_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['stagingmumbai_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingmumbai_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['stagingmumbai_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_stableSwapExchange?: Resolver<Maybe<ResolversTypes['stagingmumbai_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingmumbai_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_stableSwapExchanges?: Resolver<Array<ResolversTypes['stagingmumbai_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingmumbai_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swapDailyVolume?: Resolver<Maybe<ResolversTypes['stagingmumbai_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swapDailyVolumes?: Resolver<Array<ResolversTypes['stagingmumbai_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['stagingmumbai_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swapHourlyVolumes?: Resolver<Array<ResolversTypes['stagingmumbai_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['stagingmumbai_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['stagingmumbai_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_stableSwapEvent?: Resolver<Maybe<ResolversTypes['stagingmumbai_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_stableSwapEvents?: Resolver<Array<ResolversTypes['stagingmumbai_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swapTradeVolume?: Resolver<Maybe<ResolversTypes['stagingmumbai_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swapTradeVolumes?: Resolver<Array<ResolversTypes['stagingmumbai_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai__meta?: Resolver<Maybe<ResolversTypes['stagingmumbai__Meta_']>, ParentType, ContextType, Partial<Querystagingmumbai__metaArgs>>;
  stagingarbitrumgoerli_systemInfo?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_systemInfos?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_pooledToken?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_pooledTokens?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwap?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwaps?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapExchange?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapExchanges?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapDailyVolume?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapDailyVolumes?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapHourlyVolumes?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapEvent?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapEvents?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapTradeVolume?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapTradeVolumes?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli__meta?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli__Meta_']>, ParentType, ContextType, Partial<Querystagingarbitrumgoerli__metaArgs>>;
}>;

export type SubscriptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = ResolversObject<{
  mumbai_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_SystemInfo']>, "mumbai_systemInfo", ParentType, ContextType, RequireFields<Subscriptionmumbai_systemInfoArgs, 'id' | 'subgraphError'>>;
  mumbai_systemInfos?: SubscriptionResolver<Array<ResolversTypes['mumbai_SystemInfo']>, "mumbai_systemInfos", ParentType, ContextType, RequireFields<Subscriptionmumbai_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_PooledToken']>, "mumbai_pooledToken", ParentType, ContextType, RequireFields<Subscriptionmumbai_pooledTokenArgs, 'id' | 'subgraphError'>>;
  mumbai_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['mumbai_PooledToken']>, "mumbai_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionmumbai_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_StableSwap']>, "mumbai_stableSwap", ParentType, ContextType, RequireFields<Subscriptionmumbai_stableSwapArgs, 'id' | 'subgraphError'>>;
  mumbai_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['mumbai_StableSwap']>, "mumbai_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionmumbai_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_StableSwapAddLiquidityEvent']>, "mumbai_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionmumbai_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  mumbai_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['mumbai_StableSwapAddLiquidityEvent']>, "mumbai_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionmumbai_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_StableSwapRemoveLiquidityEvent']>, "mumbai_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionmumbai_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  mumbai_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['mumbai_StableSwapRemoveLiquidityEvent']>, "mumbai_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionmumbai_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_StableSwapExchange']>, "mumbai_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionmumbai_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  mumbai_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['mumbai_StableSwapExchange']>, "mumbai_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionmumbai_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_SwapDailyVolume']>, "mumbai_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionmumbai_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['mumbai_SwapDailyVolume']>, "mumbai_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionmumbai_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_SwapHourlyVolume']>, "mumbai_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionmumbai_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['mumbai_SwapHourlyVolume']>, "mumbai_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionmumbai_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_SwapWeeklyVolume']>, "mumbai_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionmumbai_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['mumbai_SwapWeeklyVolume']>, "mumbai_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionmumbai_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_StableSwapEvent']>, "mumbai_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionmumbai_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  mumbai_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['mumbai_StableSwapEvent']>, "mumbai_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionmumbai_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_SwapTradeVolume']>, "mumbai_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionmumbai_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['mumbai_SwapTradeVolume']>, "mumbai_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionmumbai_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai__meta?: SubscriptionResolver<Maybe<ResolversTypes['mumbai__Meta_']>, "mumbai__meta", ParentType, ContextType, Partial<Subscriptionmumbai__metaArgs>>;
  xdai_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['xdai_SystemInfo']>, "xdai_systemInfo", ParentType, ContextType, RequireFields<Subscriptionxdai_systemInfoArgs, 'id' | 'subgraphError'>>;
  xdai_systemInfos?: SubscriptionResolver<Array<ResolversTypes['xdai_SystemInfo']>, "xdai_systemInfos", ParentType, ContextType, RequireFields<Subscriptionxdai_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['xdai_PooledToken']>, "xdai_pooledToken", ParentType, ContextType, RequireFields<Subscriptionxdai_pooledTokenArgs, 'id' | 'subgraphError'>>;
  xdai_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['xdai_PooledToken']>, "xdai_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionxdai_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['xdai_StableSwap']>, "xdai_stableSwap", ParentType, ContextType, RequireFields<Subscriptionxdai_stableSwapArgs, 'id' | 'subgraphError'>>;
  xdai_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['xdai_StableSwap']>, "xdai_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionxdai_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['xdai_StableSwapAddLiquidityEvent']>, "xdai_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionxdai_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  xdai_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['xdai_StableSwapAddLiquidityEvent']>, "xdai_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionxdai_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['xdai_StableSwapRemoveLiquidityEvent']>, "xdai_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionxdai_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  xdai_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['xdai_StableSwapRemoveLiquidityEvent']>, "xdai_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionxdai_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['xdai_StableSwapExchange']>, "xdai_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionxdai_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  xdai_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['xdai_StableSwapExchange']>, "xdai_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionxdai_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['xdai_SwapDailyVolume']>, "xdai_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionxdai_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['xdai_SwapDailyVolume']>, "xdai_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionxdai_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['xdai_SwapHourlyVolume']>, "xdai_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionxdai_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['xdai_SwapHourlyVolume']>, "xdai_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionxdai_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['xdai_SwapWeeklyVolume']>, "xdai_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionxdai_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['xdai_SwapWeeklyVolume']>, "xdai_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionxdai_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['xdai_StableSwapEvent']>, "xdai_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionxdai_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  xdai_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['xdai_StableSwapEvent']>, "xdai_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionxdai_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['xdai_SwapTradeVolume']>, "xdai_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionxdai_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['xdai_SwapTradeVolume']>, "xdai_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionxdai_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai__meta?: SubscriptionResolver<Maybe<ResolversTypes['xdai__Meta_']>, "xdai__meta", ParentType, ContextType, Partial<Subscriptionxdai__metaArgs>>;
  arbitrumone_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_SystemInfo']>, "arbitrumone_systemInfo", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_systemInfoArgs, 'id' | 'subgraphError'>>;
  arbitrumone_systemInfos?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_SystemInfo']>, "arbitrumone_systemInfos", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_PooledToken']>, "arbitrumone_pooledToken", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_pooledTokenArgs, 'id' | 'subgraphError'>>;
  arbitrumone_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_PooledToken']>, "arbitrumone_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_StableSwap']>, "arbitrumone_stableSwap", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_stableSwapArgs, 'id' | 'subgraphError'>>;
  arbitrumone_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_StableSwap']>, "arbitrumone_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_StableSwapAddLiquidityEvent']>, "arbitrumone_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_StableSwapAddLiquidityEvent']>, "arbitrumone_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_StableSwapRemoveLiquidityEvent']>, "arbitrumone_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_StableSwapRemoveLiquidityEvent']>, "arbitrumone_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_StableSwapExchange']>, "arbitrumone_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_StableSwapExchange']>, "arbitrumone_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_SwapDailyVolume']>, "arbitrumone_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_SwapDailyVolume']>, "arbitrumone_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_SwapHourlyVolume']>, "arbitrumone_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_SwapHourlyVolume']>, "arbitrumone_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_SwapWeeklyVolume']>, "arbitrumone_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_SwapWeeklyVolume']>, "arbitrumone_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_StableSwapEvent']>, "arbitrumone_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_StableSwapEvent']>, "arbitrumone_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_SwapTradeVolume']>, "arbitrumone_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_SwapTradeVolume']>, "arbitrumone_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone__meta?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone__Meta_']>, "arbitrumone__meta", ParentType, ContextType, Partial<Subscriptionarbitrumone__metaArgs>>;
  bnb_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['bnb_SystemInfo']>, "bnb_systemInfo", ParentType, ContextType, RequireFields<Subscriptionbnb_systemInfoArgs, 'id' | 'subgraphError'>>;
  bnb_systemInfos?: SubscriptionResolver<Array<ResolversTypes['bnb_SystemInfo']>, "bnb_systemInfos", ParentType, ContextType, RequireFields<Subscriptionbnb_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['bnb_PooledToken']>, "bnb_pooledToken", ParentType, ContextType, RequireFields<Subscriptionbnb_pooledTokenArgs, 'id' | 'subgraphError'>>;
  bnb_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['bnb_PooledToken']>, "bnb_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionbnb_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['bnb_StableSwap']>, "bnb_stableSwap", ParentType, ContextType, RequireFields<Subscriptionbnb_stableSwapArgs, 'id' | 'subgraphError'>>;
  bnb_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['bnb_StableSwap']>, "bnb_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionbnb_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['bnb_StableSwapAddLiquidityEvent']>, "bnb_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionbnb_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  bnb_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['bnb_StableSwapAddLiquidityEvent']>, "bnb_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionbnb_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['bnb_StableSwapRemoveLiquidityEvent']>, "bnb_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionbnb_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  bnb_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['bnb_StableSwapRemoveLiquidityEvent']>, "bnb_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionbnb_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['bnb_StableSwapExchange']>, "bnb_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionbnb_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  bnb_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['bnb_StableSwapExchange']>, "bnb_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionbnb_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['bnb_SwapDailyVolume']>, "bnb_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionbnb_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['bnb_SwapDailyVolume']>, "bnb_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionbnb_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['bnb_SwapHourlyVolume']>, "bnb_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionbnb_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['bnb_SwapHourlyVolume']>, "bnb_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionbnb_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['bnb_SwapWeeklyVolume']>, "bnb_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionbnb_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['bnb_SwapWeeklyVolume']>, "bnb_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionbnb_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['bnb_StableSwapEvent']>, "bnb_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionbnb_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  bnb_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['bnb_StableSwapEvent']>, "bnb_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionbnb_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['bnb_SwapTradeVolume']>, "bnb_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionbnb_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['bnb_SwapTradeVolume']>, "bnb_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionbnb_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb__meta?: SubscriptionResolver<Maybe<ResolversTypes['bnb__Meta_']>, "bnb__meta", ParentType, ContextType, Partial<Subscriptionbnb__metaArgs>>;
  goerli_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['goerli_SystemInfo']>, "goerli_systemInfo", ParentType, ContextType, RequireFields<Subscriptiongoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  goerli_systemInfos?: SubscriptionResolver<Array<ResolversTypes['goerli_SystemInfo']>, "goerli_systemInfos", ParentType, ContextType, RequireFields<Subscriptiongoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['goerli_PooledToken']>, "goerli_pooledToken", ParentType, ContextType, RequireFields<Subscriptiongoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  goerli_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['goerli_PooledToken']>, "goerli_pooledTokens", ParentType, ContextType, RequireFields<Subscriptiongoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['goerli_StableSwap']>, "goerli_stableSwap", ParentType, ContextType, RequireFields<Subscriptiongoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  goerli_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['goerli_StableSwap']>, "goerli_stableSwaps", ParentType, ContextType, RequireFields<Subscriptiongoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['goerli_StableSwapAddLiquidityEvent']>, "goerli_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptiongoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  goerli_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['goerli_StableSwapAddLiquidityEvent']>, "goerli_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptiongoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['goerli_StableSwapRemoveLiquidityEvent']>, "goerli_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptiongoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  goerli_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['goerli_StableSwapRemoveLiquidityEvent']>, "goerli_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptiongoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['goerli_StableSwapExchange']>, "goerli_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptiongoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  goerli_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['goerli_StableSwapExchange']>, "goerli_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptiongoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['goerli_SwapDailyVolume']>, "goerli_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptiongoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['goerli_SwapDailyVolume']>, "goerli_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptiongoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['goerli_SwapHourlyVolume']>, "goerli_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptiongoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['goerli_SwapHourlyVolume']>, "goerli_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptiongoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['goerli_SwapWeeklyVolume']>, "goerli_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptiongoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['goerli_SwapWeeklyVolume']>, "goerli_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptiongoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['goerli_StableSwapEvent']>, "goerli_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptiongoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  goerli_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['goerli_StableSwapEvent']>, "goerli_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptiongoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['goerli_SwapTradeVolume']>, "goerli_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptiongoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['goerli_SwapTradeVolume']>, "goerli_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptiongoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['goerli__Meta_']>, "goerli__meta", ParentType, ContextType, Partial<Subscriptiongoerli__metaArgs>>;
  stagingoptimismgoerli_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_SystemInfo']>, "stagingoptimismgoerli_systemInfo", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_systemInfos?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_SystemInfo']>, "stagingoptimismgoerli_systemInfos", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_PooledToken']>, "stagingoptimismgoerli_pooledToken", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_PooledToken']>, "stagingoptimismgoerli_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_StableSwap']>, "stagingoptimismgoerli_stableSwap", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_StableSwap']>, "stagingoptimismgoerli_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_StableSwapAddLiquidityEvent']>, "stagingoptimismgoerli_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_StableSwapAddLiquidityEvent']>, "stagingoptimismgoerli_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_StableSwapRemoveLiquidityEvent']>, "stagingoptimismgoerli_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_StableSwapRemoveLiquidityEvent']>, "stagingoptimismgoerli_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_StableSwapExchange']>, "stagingoptimismgoerli_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_StableSwapExchange']>, "stagingoptimismgoerli_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_SwapDailyVolume']>, "stagingoptimismgoerli_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_SwapDailyVolume']>, "stagingoptimismgoerli_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_SwapHourlyVolume']>, "stagingoptimismgoerli_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_SwapHourlyVolume']>, "stagingoptimismgoerli_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_SwapWeeklyVolume']>, "stagingoptimismgoerli_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_SwapWeeklyVolume']>, "stagingoptimismgoerli_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_StableSwapEvent']>, "stagingoptimismgoerli_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_StableSwapEvent']>, "stagingoptimismgoerli_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_SwapTradeVolume']>, "stagingoptimismgoerli_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_SwapTradeVolume']>, "stagingoptimismgoerli_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli__Meta_']>, "stagingoptimismgoerli__meta", ParentType, ContextType, Partial<Subscriptionstagingoptimismgoerli__metaArgs>>;
  optimism_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['optimism_SystemInfo']>, "optimism_systemInfo", ParentType, ContextType, RequireFields<Subscriptionoptimism_systemInfoArgs, 'id' | 'subgraphError'>>;
  optimism_systemInfos?: SubscriptionResolver<Array<ResolversTypes['optimism_SystemInfo']>, "optimism_systemInfos", ParentType, ContextType, RequireFields<Subscriptionoptimism_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['optimism_PooledToken']>, "optimism_pooledToken", ParentType, ContextType, RequireFields<Subscriptionoptimism_pooledTokenArgs, 'id' | 'subgraphError'>>;
  optimism_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['optimism_PooledToken']>, "optimism_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionoptimism_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['optimism_StableSwap']>, "optimism_stableSwap", ParentType, ContextType, RequireFields<Subscriptionoptimism_stableSwapArgs, 'id' | 'subgraphError'>>;
  optimism_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['optimism_StableSwap']>, "optimism_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionoptimism_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimism_StableSwapAddLiquidityEvent']>, "optimism_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionoptimism_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimism_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['optimism_StableSwapAddLiquidityEvent']>, "optimism_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionoptimism_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimism_StableSwapRemoveLiquidityEvent']>, "optimism_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionoptimism_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimism_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['optimism_StableSwapRemoveLiquidityEvent']>, "optimism_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionoptimism_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['optimism_StableSwapExchange']>, "optimism_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionoptimism_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  optimism_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['optimism_StableSwapExchange']>, "optimism_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionoptimism_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimism_SwapDailyVolume']>, "optimism_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimism_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimism_SwapDailyVolume']>, "optimism_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimism_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimism_SwapHourlyVolume']>, "optimism_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimism_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimism_SwapHourlyVolume']>, "optimism_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimism_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimism_SwapWeeklyVolume']>, "optimism_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimism_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimism_SwapWeeklyVolume']>, "optimism_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimism_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimism_StableSwapEvent']>, "optimism_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionoptimism_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  optimism_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['optimism_StableSwapEvent']>, "optimism_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionoptimism_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimism_SwapTradeVolume']>, "optimism_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionoptimism_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['optimism_SwapTradeVolume']>, "optimism_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimism_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism__meta?: SubscriptionResolver<Maybe<ResolversTypes['optimism__Meta_']>, "optimism__meta", ParentType, ContextType, Partial<Subscriptionoptimism__metaArgs>>;
  polygon_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['polygon_SystemInfo']>, "polygon_systemInfo", ParentType, ContextType, RequireFields<Subscriptionpolygon_systemInfoArgs, 'id' | 'subgraphError'>>;
  polygon_systemInfos?: SubscriptionResolver<Array<ResolversTypes['polygon_SystemInfo']>, "polygon_systemInfos", ParentType, ContextType, RequireFields<Subscriptionpolygon_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['polygon_PooledToken']>, "polygon_pooledToken", ParentType, ContextType, RequireFields<Subscriptionpolygon_pooledTokenArgs, 'id' | 'subgraphError'>>;
  polygon_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['polygon_PooledToken']>, "polygon_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionpolygon_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['polygon_StableSwap']>, "polygon_stableSwap", ParentType, ContextType, RequireFields<Subscriptionpolygon_stableSwapArgs, 'id' | 'subgraphError'>>;
  polygon_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['polygon_StableSwap']>, "polygon_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionpolygon_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['polygon_StableSwapAddLiquidityEvent']>, "polygon_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionpolygon_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  polygon_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['polygon_StableSwapAddLiquidityEvent']>, "polygon_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionpolygon_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['polygon_StableSwapRemoveLiquidityEvent']>, "polygon_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionpolygon_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  polygon_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['polygon_StableSwapRemoveLiquidityEvent']>, "polygon_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionpolygon_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['polygon_StableSwapExchange']>, "polygon_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionpolygon_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  polygon_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['polygon_StableSwapExchange']>, "polygon_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionpolygon_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['polygon_SwapDailyVolume']>, "polygon_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionpolygon_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['polygon_SwapDailyVolume']>, "polygon_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionpolygon_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['polygon_SwapHourlyVolume']>, "polygon_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionpolygon_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['polygon_SwapHourlyVolume']>, "polygon_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionpolygon_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['polygon_SwapWeeklyVolume']>, "polygon_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionpolygon_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['polygon_SwapWeeklyVolume']>, "polygon_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionpolygon_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['polygon_StableSwapEvent']>, "polygon_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionpolygon_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  polygon_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['polygon_StableSwapEvent']>, "polygon_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionpolygon_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['polygon_SwapTradeVolume']>, "polygon_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionpolygon_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['polygon_SwapTradeVolume']>, "polygon_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionpolygon_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon__meta?: SubscriptionResolver<Maybe<ResolversTypes['polygon__Meta_']>, "polygon__meta", ParentType, ContextType, Partial<Subscriptionpolygon__metaArgs>>;
  staginggoerli_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_SystemInfo']>, "staginggoerli_systemInfo", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  staginggoerli_systemInfos?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_SystemInfo']>, "staginggoerli_systemInfos", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_PooledToken']>, "staginggoerli_pooledToken", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  staginggoerli_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_PooledToken']>, "staginggoerli_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_StableSwap']>, "staginggoerli_stableSwap", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_StableSwap']>, "staginggoerli_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_StableSwapAddLiquidityEvent']>, "staginggoerli_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_StableSwapAddLiquidityEvent']>, "staginggoerli_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_StableSwapRemoveLiquidityEvent']>, "staginggoerli_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_StableSwapRemoveLiquidityEvent']>, "staginggoerli_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_StableSwapExchange']>, "staginggoerli_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_StableSwapExchange']>, "staginggoerli_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_SwapDailyVolume']>, "staginggoerli_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_SwapDailyVolume']>, "staginggoerli_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_SwapHourlyVolume']>, "staginggoerli_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_SwapHourlyVolume']>, "staginggoerli_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_SwapWeeklyVolume']>, "staginggoerli_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_SwapWeeklyVolume']>, "staginggoerli_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_StableSwapEvent']>, "staginggoerli_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_StableSwapEvent']>, "staginggoerli_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_SwapTradeVolume']>, "staginggoerli_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_SwapTradeVolume']>, "staginggoerli_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli__Meta_']>, "staginggoerli__meta", ParentType, ContextType, Partial<Subscriptionstaginggoerli__metaArgs>>;
  arbitrumgoerli_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_SystemInfo']>, "arbitrumgoerli_systemInfo", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_systemInfos?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_SystemInfo']>, "arbitrumgoerli_systemInfos", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_PooledToken']>, "arbitrumgoerli_pooledToken", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_PooledToken']>, "arbitrumgoerli_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_StableSwap']>, "arbitrumgoerli_stableSwap", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_StableSwap']>, "arbitrumgoerli_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_StableSwapAddLiquidityEvent']>, "arbitrumgoerli_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_StableSwapAddLiquidityEvent']>, "arbitrumgoerli_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_StableSwapRemoveLiquidityEvent']>, "arbitrumgoerli_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_StableSwapRemoveLiquidityEvent']>, "arbitrumgoerli_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_StableSwapExchange']>, "arbitrumgoerli_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_StableSwapExchange']>, "arbitrumgoerli_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_SwapDailyVolume']>, "arbitrumgoerli_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_SwapDailyVolume']>, "arbitrumgoerli_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_SwapHourlyVolume']>, "arbitrumgoerli_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_SwapHourlyVolume']>, "arbitrumgoerli_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_SwapWeeklyVolume']>, "arbitrumgoerli_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_SwapWeeklyVolume']>, "arbitrumgoerli_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_StableSwapEvent']>, "arbitrumgoerli_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_StableSwapEvent']>, "arbitrumgoerli_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_SwapTradeVolume']>, "arbitrumgoerli_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_SwapTradeVolume']>, "arbitrumgoerli_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli__Meta_']>, "arbitrumgoerli__meta", ParentType, ContextType, Partial<Subscriptionarbitrumgoerli__metaArgs>>;
  optimismgoerli_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_SystemInfo']>, "optimismgoerli_systemInfo", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_systemInfos?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_SystemInfo']>, "optimismgoerli_systemInfos", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_PooledToken']>, "optimismgoerli_pooledToken", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_PooledToken']>, "optimismgoerli_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_StableSwap']>, "optimismgoerli_stableSwap", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_StableSwap']>, "optimismgoerli_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_StableSwapAddLiquidityEvent']>, "optimismgoerli_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_StableSwapAddLiquidityEvent']>, "optimismgoerli_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_StableSwapRemoveLiquidityEvent']>, "optimismgoerli_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_StableSwapRemoveLiquidityEvent']>, "optimismgoerli_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_StableSwapExchange']>, "optimismgoerli_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_StableSwapExchange']>, "optimismgoerli_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_SwapDailyVolume']>, "optimismgoerli_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_SwapDailyVolume']>, "optimismgoerli_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_SwapHourlyVolume']>, "optimismgoerli_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_SwapHourlyVolume']>, "optimismgoerli_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_SwapWeeklyVolume']>, "optimismgoerli_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_SwapWeeklyVolume']>, "optimismgoerli_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_StableSwapEvent']>, "optimismgoerli_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_StableSwapEvent']>, "optimismgoerli_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_SwapTradeVolume']>, "optimismgoerli_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_SwapTradeVolume']>, "optimismgoerli_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli__Meta_']>, "optimismgoerli__meta", ParentType, ContextType, Partial<Subscriptionoptimismgoerli__metaArgs>>;
  stagingmumbai_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_SystemInfo']>, "stagingmumbai_systemInfo", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_systemInfos?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_SystemInfo']>, "stagingmumbai_systemInfos", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_PooledToken']>, "stagingmumbai_pooledToken", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_PooledToken']>, "stagingmumbai_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_StableSwap']>, "stagingmumbai_stableSwap", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_StableSwap']>, "stagingmumbai_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_StableSwapAddLiquidityEvent']>, "stagingmumbai_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_StableSwapAddLiquidityEvent']>, "stagingmumbai_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_StableSwapRemoveLiquidityEvent']>, "stagingmumbai_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_StableSwapRemoveLiquidityEvent']>, "stagingmumbai_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_StableSwapExchange']>, "stagingmumbai_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_StableSwapExchange']>, "stagingmumbai_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_SwapDailyVolume']>, "stagingmumbai_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_SwapDailyVolume']>, "stagingmumbai_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_SwapHourlyVolume']>, "stagingmumbai_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_SwapHourlyVolume']>, "stagingmumbai_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_SwapWeeklyVolume']>, "stagingmumbai_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_SwapWeeklyVolume']>, "stagingmumbai_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_StableSwapEvent']>, "stagingmumbai_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_StableSwapEvent']>, "stagingmumbai_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_SwapTradeVolume']>, "stagingmumbai_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_SwapTradeVolume']>, "stagingmumbai_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai__meta?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai__Meta_']>, "stagingmumbai__meta", ParentType, ContextType, Partial<Subscriptionstagingmumbai__metaArgs>>;
  stagingarbitrumgoerli_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_SystemInfo']>, "stagingarbitrumgoerli_systemInfo", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_systemInfos?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_SystemInfo']>, "stagingarbitrumgoerli_systemInfos", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_PooledToken']>, "stagingarbitrumgoerli_pooledToken", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_PooledToken']>, "stagingarbitrumgoerli_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_StableSwap']>, "stagingarbitrumgoerli_stableSwap", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_StableSwap']>, "stagingarbitrumgoerli_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_StableSwapAddLiquidityEvent']>, "stagingarbitrumgoerli_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_StableSwapAddLiquidityEvent']>, "stagingarbitrumgoerli_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent']>, "stagingarbitrumgoerli_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent']>, "stagingarbitrumgoerli_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_StableSwapExchange']>, "stagingarbitrumgoerli_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_StableSwapExchange']>, "stagingarbitrumgoerli_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_SwapDailyVolume']>, "stagingarbitrumgoerli_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_SwapDailyVolume']>, "stagingarbitrumgoerli_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_SwapHourlyVolume']>, "stagingarbitrumgoerli_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_SwapHourlyVolume']>, "stagingarbitrumgoerli_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_SwapWeeklyVolume']>, "stagingarbitrumgoerli_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_SwapWeeklyVolume']>, "stagingarbitrumgoerli_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_StableSwapEvent']>, "stagingarbitrumgoerli_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_StableSwapEvent']>, "stagingarbitrumgoerli_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_SwapTradeVolume']>, "stagingarbitrumgoerli_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_SwapTradeVolume']>, "stagingarbitrumgoerli_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli__Meta_']>, "stagingarbitrumgoerli__meta", ParentType, ContextType, Partial<Subscriptionstagingarbitrumgoerli__metaArgs>>;
}>;

export interface mumbai_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['mumbai_BigDecimal'], any> {
  name: 'mumbai_BigDecimal';
}

export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
  name: 'BigInt';
}

export interface mumbai_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['mumbai_Bytes'], any> {
  name: 'mumbai_Bytes';
}

export type mumbai_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_PooledToken'] = ResolversParentTypes['mumbai_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_StableSwap'] = ResolversParentTypes['mumbai_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['mumbai_PooledToken']>, ParentType, ContextType, RequireFields<mumbai_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['mumbai_StableSwapEvent']>>, ParentType, ContextType, RequireFields<mumbai_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['mumbai_StableSwapExchange']>>, ParentType, ContextType, RequireFields<mumbai_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['mumbai_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<mumbai_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['mumbai_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<mumbai_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['mumbai_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<mumbai_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_StableSwapAddLiquidityEvent'] = ResolversParentTypes['mumbai_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_StableSwapEvent'] = ResolversParentTypes['mumbai_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'mumbai_StableSwapAddLiquidityEvent' | 'mumbai_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
}>;

export type mumbai_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_StableSwapExchange'] = ResolversParentTypes['mumbai_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['mumbai_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_SwapDailyVolume'] = ResolversParentTypes['mumbai_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['mumbai_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_SwapHourlyVolume'] = ResolversParentTypes['mumbai_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['mumbai_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_SwapTradeVolume'] = ResolversParentTypes['mumbai_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'mumbai_SwapDailyVolume' | 'mumbai_SwapHourlyVolume' | 'mumbai_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['mumbai_BigDecimal'], ParentType, ContextType>;
}>;

export type mumbai_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_SwapWeeklyVolume'] = ResolversParentTypes['mumbai_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['mumbai_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_SystemInfo'] = ResolversParentTypes['mumbai_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai__Block_'] = ResolversParentTypes['mumbai__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai__Meta_'] = ResolversParentTypes['mumbai__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['mumbai__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface xdai_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['xdai_BigDecimal'], any> {
  name: 'xdai_BigDecimal';
}

export interface xdai_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['xdai_Bytes'], any> {
  name: 'xdai_Bytes';
}

export type xdai_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_PooledToken'] = ResolversParentTypes['xdai_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_StableSwap'] = ResolversParentTypes['xdai_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['xdai_PooledToken']>, ParentType, ContextType, RequireFields<xdai_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['xdai_StableSwapEvent']>>, ParentType, ContextType, RequireFields<xdai_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['xdai_StableSwapExchange']>>, ParentType, ContextType, RequireFields<xdai_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['xdai_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<xdai_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['xdai_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<xdai_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['xdai_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<xdai_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_StableSwapAddLiquidityEvent'] = ResolversParentTypes['xdai_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_StableSwapEvent'] = ResolversParentTypes['xdai_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'xdai_StableSwapAddLiquidityEvent' | 'xdai_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
}>;

export type xdai_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_StableSwapExchange'] = ResolversParentTypes['xdai_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['xdai_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_SwapDailyVolume'] = ResolversParentTypes['xdai_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['xdai_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_SwapHourlyVolume'] = ResolversParentTypes['xdai_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['xdai_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_SwapTradeVolume'] = ResolversParentTypes['xdai_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'xdai_SwapDailyVolume' | 'xdai_SwapHourlyVolume' | 'xdai_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['xdai_BigDecimal'], ParentType, ContextType>;
}>;

export type xdai_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_SwapWeeklyVolume'] = ResolversParentTypes['xdai_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['xdai_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_SystemInfo'] = ResolversParentTypes['xdai_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai__Block_'] = ResolversParentTypes['xdai__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai__Meta_'] = ResolversParentTypes['xdai__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['xdai__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface arbitrumone_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumone_BigDecimal'], any> {
  name: 'arbitrumone_BigDecimal';
}

export interface arbitrumone_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumone_Bytes'], any> {
  name: 'arbitrumone_Bytes';
}

export type arbitrumone_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_PooledToken'] = ResolversParentTypes['arbitrumone_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_StableSwap'] = ResolversParentTypes['arbitrumone_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['arbitrumone_PooledToken']>, ParentType, ContextType, RequireFields<arbitrumone_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_StableSwapEvent']>>, ParentType, ContextType, RequireFields<arbitrumone_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_StableSwapExchange']>>, ParentType, ContextType, RequireFields<arbitrumone_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<arbitrumone_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<arbitrumone_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<arbitrumone_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_StableSwapAddLiquidityEvent'] = ResolversParentTypes['arbitrumone_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_StableSwapEvent'] = ResolversParentTypes['arbitrumone_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'arbitrumone_StableSwapAddLiquidityEvent' | 'arbitrumone_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
}>;

export type arbitrumone_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_StableSwapExchange'] = ResolversParentTypes['arbitrumone_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['arbitrumone_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_SwapDailyVolume'] = ResolversParentTypes['arbitrumone_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumone_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_SwapHourlyVolume'] = ResolversParentTypes['arbitrumone_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumone_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_SwapTradeVolume'] = ResolversParentTypes['arbitrumone_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'arbitrumone_SwapDailyVolume' | 'arbitrumone_SwapHourlyVolume' | 'arbitrumone_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumone_BigDecimal'], ParentType, ContextType>;
}>;

export type arbitrumone_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_SwapWeeklyVolume'] = ResolversParentTypes['arbitrumone_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumone_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_SystemInfo'] = ResolversParentTypes['arbitrumone_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone__Block_'] = ResolversParentTypes['arbitrumone__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone__Meta_'] = ResolversParentTypes['arbitrumone__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['arbitrumone__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface bnb_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['bnb_BigDecimal'], any> {
  name: 'bnb_BigDecimal';
}

export interface bnb_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['bnb_Bytes'], any> {
  name: 'bnb_Bytes';
}

export type bnb_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_PooledToken'] = ResolversParentTypes['bnb_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_StableSwap'] = ResolversParentTypes['bnb_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['bnb_PooledToken']>, ParentType, ContextType, RequireFields<bnb_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['bnb_StableSwapEvent']>>, ParentType, ContextType, RequireFields<bnb_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['bnb_StableSwapExchange']>>, ParentType, ContextType, RequireFields<bnb_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['bnb_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<bnb_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['bnb_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<bnb_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['bnb_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<bnb_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_StableSwapAddLiquidityEvent'] = ResolversParentTypes['bnb_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_StableSwapEvent'] = ResolversParentTypes['bnb_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'bnb_StableSwapAddLiquidityEvent' | 'bnb_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
}>;

export type bnb_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_StableSwapExchange'] = ResolversParentTypes['bnb_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['bnb_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_SwapDailyVolume'] = ResolversParentTypes['bnb_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['bnb_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_SwapHourlyVolume'] = ResolversParentTypes['bnb_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['bnb_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_SwapTradeVolume'] = ResolversParentTypes['bnb_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'bnb_SwapDailyVolume' | 'bnb_SwapHourlyVolume' | 'bnb_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['bnb_BigDecimal'], ParentType, ContextType>;
}>;

export type bnb_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_SwapWeeklyVolume'] = ResolversParentTypes['bnb_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['bnb_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_SystemInfo'] = ResolversParentTypes['bnb_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb__Block_'] = ResolversParentTypes['bnb__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb__Meta_'] = ResolversParentTypes['bnb__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['bnb__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface goerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['goerli_BigDecimal'], any> {
  name: 'goerli_BigDecimal';
}

export interface goerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['goerli_Bytes'], any> {
  name: 'goerli_Bytes';
}

export type goerli_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_PooledToken'] = ResolversParentTypes['goerli_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_StableSwap'] = ResolversParentTypes['goerli_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['goerli_PooledToken']>, ParentType, ContextType, RequireFields<goerli_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['goerli_StableSwapEvent']>>, ParentType, ContextType, RequireFields<goerli_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['goerli_StableSwapExchange']>>, ParentType, ContextType, RequireFields<goerli_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['goerli_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<goerli_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['goerli_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<goerli_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['goerli_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<goerli_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_StableSwapAddLiquidityEvent'] = ResolversParentTypes['goerli_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_StableSwapEvent'] = ResolversParentTypes['goerli_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'goerli_StableSwapAddLiquidityEvent' | 'goerli_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
}>;

export type goerli_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_StableSwapExchange'] = ResolversParentTypes['goerli_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['goerli_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_SwapDailyVolume'] = ResolversParentTypes['goerli_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['goerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_SwapHourlyVolume'] = ResolversParentTypes['goerli_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['goerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_SwapTradeVolume'] = ResolversParentTypes['goerli_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'goerli_SwapDailyVolume' | 'goerli_SwapHourlyVolume' | 'goerli_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['goerli_BigDecimal'], ParentType, ContextType>;
}>;

export type goerli_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_SwapWeeklyVolume'] = ResolversParentTypes['goerli_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['goerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_SystemInfo'] = ResolversParentTypes['goerli_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli__Block_'] = ResolversParentTypes['goerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli__Meta_'] = ResolversParentTypes['goerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['goerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface stagingoptimismgoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingoptimismgoerli_BigDecimal'], any> {
  name: 'stagingoptimismgoerli_BigDecimal';
}

export interface stagingoptimismgoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingoptimismgoerli_Bytes'], any> {
  name: 'stagingoptimismgoerli_Bytes';
}

export type stagingoptimismgoerli_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_PooledToken'] = ResolversParentTypes['stagingoptimismgoerli_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_StableSwap'] = ResolversParentTypes['stagingoptimismgoerli_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_PooledToken']>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_StableSwapEvent']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_StableSwapExchange']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_StableSwapAddLiquidityEvent'] = ResolversParentTypes['stagingoptimismgoerli_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_StableSwapEvent'] = ResolversParentTypes['stagingoptimismgoerli_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingoptimismgoerli_StableSwapAddLiquidityEvent' | 'stagingoptimismgoerli_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_StableSwapExchange'] = ResolversParentTypes['stagingoptimismgoerli_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['stagingoptimismgoerli_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_SwapDailyVolume'] = ResolversParentTypes['stagingoptimismgoerli_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingoptimismgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_SwapHourlyVolume'] = ResolversParentTypes['stagingoptimismgoerli_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingoptimismgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_SwapTradeVolume'] = ResolversParentTypes['stagingoptimismgoerli_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingoptimismgoerli_SwapDailyVolume' | 'stagingoptimismgoerli_SwapHourlyVolume' | 'stagingoptimismgoerli_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingoptimismgoerli_BigDecimal'], ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_SwapWeeklyVolume'] = ResolversParentTypes['stagingoptimismgoerli_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingoptimismgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_SystemInfo'] = ResolversParentTypes['stagingoptimismgoerli_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli__Block_'] = ResolversParentTypes['stagingoptimismgoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli__Meta_'] = ResolversParentTypes['stagingoptimismgoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['stagingoptimismgoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface optimism_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimism_BigDecimal'], any> {
  name: 'optimism_BigDecimal';
}

export interface optimism_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimism_Bytes'], any> {
  name: 'optimism_Bytes';
}

export type optimism_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_PooledToken'] = ResolversParentTypes['optimism_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_StableSwap'] = ResolversParentTypes['optimism_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['optimism_PooledToken']>, ParentType, ContextType, RequireFields<optimism_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['optimism_StableSwapEvent']>>, ParentType, ContextType, RequireFields<optimism_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['optimism_StableSwapExchange']>>, ParentType, ContextType, RequireFields<optimism_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimism_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<optimism_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimism_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<optimism_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimism_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<optimism_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_StableSwapAddLiquidityEvent'] = ResolversParentTypes['optimism_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_StableSwapEvent'] = ResolversParentTypes['optimism_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'optimism_StableSwapAddLiquidityEvent' | 'optimism_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
}>;

export type optimism_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_StableSwapExchange'] = ResolversParentTypes['optimism_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['optimism_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_SwapDailyVolume'] = ResolversParentTypes['optimism_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimism_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_SwapHourlyVolume'] = ResolversParentTypes['optimism_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimism_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_SwapTradeVolume'] = ResolversParentTypes['optimism_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'optimism_SwapDailyVolume' | 'optimism_SwapHourlyVolume' | 'optimism_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimism_BigDecimal'], ParentType, ContextType>;
}>;

export type optimism_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_SwapWeeklyVolume'] = ResolversParentTypes['optimism_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimism_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_SystemInfo'] = ResolversParentTypes['optimism_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism__Block_'] = ResolversParentTypes['optimism__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism__Meta_'] = ResolversParentTypes['optimism__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['optimism__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface polygon_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['polygon_BigDecimal'], any> {
  name: 'polygon_BigDecimal';
}

export interface polygon_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['polygon_Bytes'], any> {
  name: 'polygon_Bytes';
}

export type polygon_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_PooledToken'] = ResolversParentTypes['polygon_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_StableSwap'] = ResolversParentTypes['polygon_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['polygon_PooledToken']>, ParentType, ContextType, RequireFields<polygon_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['polygon_StableSwapEvent']>>, ParentType, ContextType, RequireFields<polygon_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['polygon_StableSwapExchange']>>, ParentType, ContextType, RequireFields<polygon_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['polygon_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<polygon_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['polygon_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<polygon_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['polygon_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<polygon_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_StableSwapAddLiquidityEvent'] = ResolversParentTypes['polygon_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_StableSwapEvent'] = ResolversParentTypes['polygon_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'polygon_StableSwapAddLiquidityEvent' | 'polygon_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
}>;

export type polygon_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_StableSwapExchange'] = ResolversParentTypes['polygon_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['polygon_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_SwapDailyVolume'] = ResolversParentTypes['polygon_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['polygon_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_SwapHourlyVolume'] = ResolversParentTypes['polygon_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['polygon_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_SwapTradeVolume'] = ResolversParentTypes['polygon_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'polygon_SwapDailyVolume' | 'polygon_SwapHourlyVolume' | 'polygon_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['polygon_BigDecimal'], ParentType, ContextType>;
}>;

export type polygon_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_SwapWeeklyVolume'] = ResolversParentTypes['polygon_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['polygon_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_SystemInfo'] = ResolversParentTypes['polygon_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon__Block_'] = ResolversParentTypes['polygon__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon__Meta_'] = ResolversParentTypes['polygon__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['polygon__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface staginggoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['staginggoerli_BigDecimal'], any> {
  name: 'staginggoerli_BigDecimal';
}

export interface staginggoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['staginggoerli_Bytes'], any> {
  name: 'staginggoerli_Bytes';
}

export type staginggoerli_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_PooledToken'] = ResolversParentTypes['staginggoerli_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_StableSwap'] = ResolversParentTypes['staginggoerli_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['staginggoerli_PooledToken']>, ParentType, ContextType, RequireFields<staginggoerli_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_StableSwapEvent']>>, ParentType, ContextType, RequireFields<staginggoerli_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_StableSwapExchange']>>, ParentType, ContextType, RequireFields<staginggoerli_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<staginggoerli_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<staginggoerli_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<staginggoerli_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_StableSwapAddLiquidityEvent'] = ResolversParentTypes['staginggoerli_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_StableSwapEvent'] = ResolversParentTypes['staginggoerli_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'staginggoerli_StableSwapAddLiquidityEvent' | 'staginggoerli_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
}>;

export type staginggoerli_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_StableSwapExchange'] = ResolversParentTypes['staginggoerli_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['staginggoerli_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_SwapDailyVolume'] = ResolversParentTypes['staginggoerli_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_SwapHourlyVolume'] = ResolversParentTypes['staginggoerli_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_SwapTradeVolume'] = ResolversParentTypes['staginggoerli_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'staginggoerli_SwapDailyVolume' | 'staginggoerli_SwapHourlyVolume' | 'staginggoerli_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_BigDecimal'], ParentType, ContextType>;
}>;

export type staginggoerli_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_SwapWeeklyVolume'] = ResolversParentTypes['staginggoerli_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_SystemInfo'] = ResolversParentTypes['staginggoerli_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli__Block_'] = ResolversParentTypes['staginggoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli__Meta_'] = ResolversParentTypes['staginggoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['staginggoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface arbitrumgoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumgoerli_BigDecimal'], any> {
  name: 'arbitrumgoerli_BigDecimal';
}

export interface arbitrumgoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumgoerli_Bytes'], any> {
  name: 'arbitrumgoerli_Bytes';
}

export type arbitrumgoerli_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_PooledToken'] = ResolversParentTypes['arbitrumgoerli_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_StableSwap'] = ResolversParentTypes['arbitrumgoerli_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['arbitrumgoerli_PooledToken']>, ParentType, ContextType, RequireFields<arbitrumgoerli_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_StableSwapEvent']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_StableSwapExchange']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_StableSwapAddLiquidityEvent'] = ResolversParentTypes['arbitrumgoerli_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_StableSwapEvent'] = ResolversParentTypes['arbitrumgoerli_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'arbitrumgoerli_StableSwapAddLiquidityEvent' | 'arbitrumgoerli_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
}>;

export type arbitrumgoerli_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_StableSwapExchange'] = ResolversParentTypes['arbitrumgoerli_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['arbitrumgoerli_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_SwapDailyVolume'] = ResolversParentTypes['arbitrumgoerli_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_SwapHourlyVolume'] = ResolversParentTypes['arbitrumgoerli_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_SwapTradeVolume'] = ResolversParentTypes['arbitrumgoerli_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'arbitrumgoerli_SwapDailyVolume' | 'arbitrumgoerli_SwapHourlyVolume' | 'arbitrumgoerli_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumgoerli_BigDecimal'], ParentType, ContextType>;
}>;

export type arbitrumgoerli_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_SwapWeeklyVolume'] = ResolversParentTypes['arbitrumgoerli_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_SystemInfo'] = ResolversParentTypes['arbitrumgoerli_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli__Block_'] = ResolversParentTypes['arbitrumgoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli__Meta_'] = ResolversParentTypes['arbitrumgoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['arbitrumgoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface optimismgoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimismgoerli_BigDecimal'], any> {
  name: 'optimismgoerli_BigDecimal';
}

export interface optimismgoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimismgoerli_Bytes'], any> {
  name: 'optimismgoerli_Bytes';
}

export type optimismgoerli_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_PooledToken'] = ResolversParentTypes['optimismgoerli_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_StableSwap'] = ResolversParentTypes['optimismgoerli_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['optimismgoerli_PooledToken']>, ParentType, ContextType, RequireFields<optimismgoerli_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_StableSwapEvent']>>, ParentType, ContextType, RequireFields<optimismgoerli_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_StableSwapExchange']>>, ParentType, ContextType, RequireFields<optimismgoerli_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<optimismgoerli_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<optimismgoerli_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<optimismgoerli_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_StableSwapAddLiquidityEvent'] = ResolversParentTypes['optimismgoerli_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_StableSwapEvent'] = ResolversParentTypes['optimismgoerli_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'optimismgoerli_StableSwapAddLiquidityEvent' | 'optimismgoerli_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
}>;

export type optimismgoerli_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_StableSwapExchange'] = ResolversParentTypes['optimismgoerli_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['optimismgoerli_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_SwapDailyVolume'] = ResolversParentTypes['optimismgoerli_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimismgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_SwapHourlyVolume'] = ResolversParentTypes['optimismgoerli_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimismgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_SwapTradeVolume'] = ResolversParentTypes['optimismgoerli_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'optimismgoerli_SwapDailyVolume' | 'optimismgoerli_SwapHourlyVolume' | 'optimismgoerli_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimismgoerli_BigDecimal'], ParentType, ContextType>;
}>;

export type optimismgoerli_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_SwapWeeklyVolume'] = ResolversParentTypes['optimismgoerli_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimismgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_SystemInfo'] = ResolversParentTypes['optimismgoerli_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli__Block_'] = ResolversParentTypes['optimismgoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli__Meta_'] = ResolversParentTypes['optimismgoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['optimismgoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface stagingmumbai_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingmumbai_BigDecimal'], any> {
  name: 'stagingmumbai_BigDecimal';
}

export interface stagingmumbai_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingmumbai_Bytes'], any> {
  name: 'stagingmumbai_Bytes';
}

export type stagingmumbai_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_PooledToken'] = ResolversParentTypes['stagingmumbai_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_StableSwap'] = ResolversParentTypes['stagingmumbai_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['stagingmumbai_PooledToken']>, ParentType, ContextType, RequireFields<stagingmumbai_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_StableSwapEvent']>>, ParentType, ContextType, RequireFields<stagingmumbai_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_StableSwapExchange']>>, ParentType, ContextType, RequireFields<stagingmumbai_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<stagingmumbai_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<stagingmumbai_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<stagingmumbai_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_StableSwapAddLiquidityEvent'] = ResolversParentTypes['stagingmumbai_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_StableSwapEvent'] = ResolversParentTypes['stagingmumbai_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingmumbai_StableSwapAddLiquidityEvent' | 'stagingmumbai_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
}>;

export type stagingmumbai_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_StableSwapExchange'] = ResolversParentTypes['stagingmumbai_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['stagingmumbai_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_SwapDailyVolume'] = ResolversParentTypes['stagingmumbai_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingmumbai_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_SwapHourlyVolume'] = ResolversParentTypes['stagingmumbai_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingmumbai_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_SwapTradeVolume'] = ResolversParentTypes['stagingmumbai_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingmumbai_SwapDailyVolume' | 'stagingmumbai_SwapHourlyVolume' | 'stagingmumbai_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingmumbai_BigDecimal'], ParentType, ContextType>;
}>;

export type stagingmumbai_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_SwapWeeklyVolume'] = ResolversParentTypes['stagingmumbai_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingmumbai_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_SystemInfo'] = ResolversParentTypes['stagingmumbai_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai__Block_'] = ResolversParentTypes['stagingmumbai__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai__Meta_'] = ResolversParentTypes['stagingmumbai__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['stagingmumbai__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface stagingarbitrumgoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingarbitrumgoerli_BigDecimal'], any> {
  name: 'stagingarbitrumgoerli_BigDecimal';
}

export interface stagingarbitrumgoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingarbitrumgoerli_Bytes'], any> {
  name: 'stagingarbitrumgoerli_Bytes';
}

export type stagingarbitrumgoerli_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_PooledToken'] = ResolversParentTypes['stagingarbitrumgoerli_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_StableSwap'] = ResolversParentTypes['stagingarbitrumgoerli_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_PooledToken']>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_StableSwapEvent']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_StableSwapExchange']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_StableSwapAddLiquidityEvent'] = ResolversParentTypes['stagingarbitrumgoerli_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_StableSwapEvent'] = ResolversParentTypes['stagingarbitrumgoerli_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingarbitrumgoerli_StableSwapAddLiquidityEvent' | 'stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_StableSwapExchange'] = ResolversParentTypes['stagingarbitrumgoerli_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_SwapDailyVolume'] = ResolversParentTypes['stagingarbitrumgoerli_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingarbitrumgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_SwapHourlyVolume'] = ResolversParentTypes['stagingarbitrumgoerli_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingarbitrumgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_SwapTradeVolume'] = ResolversParentTypes['stagingarbitrumgoerli_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingarbitrumgoerli_SwapDailyVolume' | 'stagingarbitrumgoerli_SwapHourlyVolume' | 'stagingarbitrumgoerli_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingarbitrumgoerli_BigDecimal'], ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_SwapWeeklyVolume'] = ResolversParentTypes['stagingarbitrumgoerli_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingarbitrumgoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_SystemInfo'] = ResolversParentTypes['stagingarbitrumgoerli_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli__Block_'] = ResolversParentTypes['stagingarbitrumgoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli__Meta_'] = ResolversParentTypes['stagingarbitrumgoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['stagingarbitrumgoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Resolvers<ContextType = MeshContext> = ResolversObject<{
  Query?: QueryResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  mumbai_BigDecimal?: GraphQLScalarType;
  BigInt?: GraphQLScalarType;
  mumbai_Bytes?: GraphQLScalarType;
  mumbai_PooledToken?: mumbai_PooledTokenResolvers<ContextType>;
  mumbai_StableSwap?: mumbai_StableSwapResolvers<ContextType>;
  mumbai_StableSwapAddLiquidityEvent?: mumbai_StableSwapAddLiquidityEventResolvers<ContextType>;
  mumbai_StableSwapEvent?: mumbai_StableSwapEventResolvers<ContextType>;
  mumbai_StableSwapExchange?: mumbai_StableSwapExchangeResolvers<ContextType>;
  mumbai_StableSwapRemoveLiquidityEvent?: mumbai_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  mumbai_SwapDailyVolume?: mumbai_SwapDailyVolumeResolvers<ContextType>;
  mumbai_SwapHourlyVolume?: mumbai_SwapHourlyVolumeResolvers<ContextType>;
  mumbai_SwapTradeVolume?: mumbai_SwapTradeVolumeResolvers<ContextType>;
  mumbai_SwapWeeklyVolume?: mumbai_SwapWeeklyVolumeResolvers<ContextType>;
  mumbai_SystemInfo?: mumbai_SystemInfoResolvers<ContextType>;
  mumbai__Block_?: mumbai__Block_Resolvers<ContextType>;
  mumbai__Meta_?: mumbai__Meta_Resolvers<ContextType>;
  xdai_BigDecimal?: GraphQLScalarType;
  xdai_Bytes?: GraphQLScalarType;
  xdai_PooledToken?: xdai_PooledTokenResolvers<ContextType>;
  xdai_StableSwap?: xdai_StableSwapResolvers<ContextType>;
  xdai_StableSwapAddLiquidityEvent?: xdai_StableSwapAddLiquidityEventResolvers<ContextType>;
  xdai_StableSwapEvent?: xdai_StableSwapEventResolvers<ContextType>;
  xdai_StableSwapExchange?: xdai_StableSwapExchangeResolvers<ContextType>;
  xdai_StableSwapRemoveLiquidityEvent?: xdai_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  xdai_SwapDailyVolume?: xdai_SwapDailyVolumeResolvers<ContextType>;
  xdai_SwapHourlyVolume?: xdai_SwapHourlyVolumeResolvers<ContextType>;
  xdai_SwapTradeVolume?: xdai_SwapTradeVolumeResolvers<ContextType>;
  xdai_SwapWeeklyVolume?: xdai_SwapWeeklyVolumeResolvers<ContextType>;
  xdai_SystemInfo?: xdai_SystemInfoResolvers<ContextType>;
  xdai__Block_?: xdai__Block_Resolvers<ContextType>;
  xdai__Meta_?: xdai__Meta_Resolvers<ContextType>;
  arbitrumone_BigDecimal?: GraphQLScalarType;
  arbitrumone_Bytes?: GraphQLScalarType;
  arbitrumone_PooledToken?: arbitrumone_PooledTokenResolvers<ContextType>;
  arbitrumone_StableSwap?: arbitrumone_StableSwapResolvers<ContextType>;
  arbitrumone_StableSwapAddLiquidityEvent?: arbitrumone_StableSwapAddLiquidityEventResolvers<ContextType>;
  arbitrumone_StableSwapEvent?: arbitrumone_StableSwapEventResolvers<ContextType>;
  arbitrumone_StableSwapExchange?: arbitrumone_StableSwapExchangeResolvers<ContextType>;
  arbitrumone_StableSwapRemoveLiquidityEvent?: arbitrumone_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  arbitrumone_SwapDailyVolume?: arbitrumone_SwapDailyVolumeResolvers<ContextType>;
  arbitrumone_SwapHourlyVolume?: arbitrumone_SwapHourlyVolumeResolvers<ContextType>;
  arbitrumone_SwapTradeVolume?: arbitrumone_SwapTradeVolumeResolvers<ContextType>;
  arbitrumone_SwapWeeklyVolume?: arbitrumone_SwapWeeklyVolumeResolvers<ContextType>;
  arbitrumone_SystemInfo?: arbitrumone_SystemInfoResolvers<ContextType>;
  arbitrumone__Block_?: arbitrumone__Block_Resolvers<ContextType>;
  arbitrumone__Meta_?: arbitrumone__Meta_Resolvers<ContextType>;
  bnb_BigDecimal?: GraphQLScalarType;
  bnb_Bytes?: GraphQLScalarType;
  bnb_PooledToken?: bnb_PooledTokenResolvers<ContextType>;
  bnb_StableSwap?: bnb_StableSwapResolvers<ContextType>;
  bnb_StableSwapAddLiquidityEvent?: bnb_StableSwapAddLiquidityEventResolvers<ContextType>;
  bnb_StableSwapEvent?: bnb_StableSwapEventResolvers<ContextType>;
  bnb_StableSwapExchange?: bnb_StableSwapExchangeResolvers<ContextType>;
  bnb_StableSwapRemoveLiquidityEvent?: bnb_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  bnb_SwapDailyVolume?: bnb_SwapDailyVolumeResolvers<ContextType>;
  bnb_SwapHourlyVolume?: bnb_SwapHourlyVolumeResolvers<ContextType>;
  bnb_SwapTradeVolume?: bnb_SwapTradeVolumeResolvers<ContextType>;
  bnb_SwapWeeklyVolume?: bnb_SwapWeeklyVolumeResolvers<ContextType>;
  bnb_SystemInfo?: bnb_SystemInfoResolvers<ContextType>;
  bnb__Block_?: bnb__Block_Resolvers<ContextType>;
  bnb__Meta_?: bnb__Meta_Resolvers<ContextType>;
  goerli_BigDecimal?: GraphQLScalarType;
  goerli_Bytes?: GraphQLScalarType;
  goerli_PooledToken?: goerli_PooledTokenResolvers<ContextType>;
  goerli_StableSwap?: goerli_StableSwapResolvers<ContextType>;
  goerli_StableSwapAddLiquidityEvent?: goerli_StableSwapAddLiquidityEventResolvers<ContextType>;
  goerli_StableSwapEvent?: goerli_StableSwapEventResolvers<ContextType>;
  goerli_StableSwapExchange?: goerli_StableSwapExchangeResolvers<ContextType>;
  goerli_StableSwapRemoveLiquidityEvent?: goerli_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  goerli_SwapDailyVolume?: goerli_SwapDailyVolumeResolvers<ContextType>;
  goerli_SwapHourlyVolume?: goerli_SwapHourlyVolumeResolvers<ContextType>;
  goerli_SwapTradeVolume?: goerli_SwapTradeVolumeResolvers<ContextType>;
  goerli_SwapWeeklyVolume?: goerli_SwapWeeklyVolumeResolvers<ContextType>;
  goerli_SystemInfo?: goerli_SystemInfoResolvers<ContextType>;
  goerli__Block_?: goerli__Block_Resolvers<ContextType>;
  goerli__Meta_?: goerli__Meta_Resolvers<ContextType>;
  stagingoptimismgoerli_BigDecimal?: GraphQLScalarType;
  stagingoptimismgoerli_Bytes?: GraphQLScalarType;
  stagingoptimismgoerli_PooledToken?: stagingoptimismgoerli_PooledTokenResolvers<ContextType>;
  stagingoptimismgoerli_StableSwap?: stagingoptimismgoerli_StableSwapResolvers<ContextType>;
  stagingoptimismgoerli_StableSwapAddLiquidityEvent?: stagingoptimismgoerli_StableSwapAddLiquidityEventResolvers<ContextType>;
  stagingoptimismgoerli_StableSwapEvent?: stagingoptimismgoerli_StableSwapEventResolvers<ContextType>;
  stagingoptimismgoerli_StableSwapExchange?: stagingoptimismgoerli_StableSwapExchangeResolvers<ContextType>;
  stagingoptimismgoerli_StableSwapRemoveLiquidityEvent?: stagingoptimismgoerli_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  stagingoptimismgoerli_SwapDailyVolume?: stagingoptimismgoerli_SwapDailyVolumeResolvers<ContextType>;
  stagingoptimismgoerli_SwapHourlyVolume?: stagingoptimismgoerli_SwapHourlyVolumeResolvers<ContextType>;
  stagingoptimismgoerli_SwapTradeVolume?: stagingoptimismgoerli_SwapTradeVolumeResolvers<ContextType>;
  stagingoptimismgoerli_SwapWeeklyVolume?: stagingoptimismgoerli_SwapWeeklyVolumeResolvers<ContextType>;
  stagingoptimismgoerli_SystemInfo?: stagingoptimismgoerli_SystemInfoResolvers<ContextType>;
  stagingoptimismgoerli__Block_?: stagingoptimismgoerli__Block_Resolvers<ContextType>;
  stagingoptimismgoerli__Meta_?: stagingoptimismgoerli__Meta_Resolvers<ContextType>;
  optimism_BigDecimal?: GraphQLScalarType;
  optimism_Bytes?: GraphQLScalarType;
  optimism_PooledToken?: optimism_PooledTokenResolvers<ContextType>;
  optimism_StableSwap?: optimism_StableSwapResolvers<ContextType>;
  optimism_StableSwapAddLiquidityEvent?: optimism_StableSwapAddLiquidityEventResolvers<ContextType>;
  optimism_StableSwapEvent?: optimism_StableSwapEventResolvers<ContextType>;
  optimism_StableSwapExchange?: optimism_StableSwapExchangeResolvers<ContextType>;
  optimism_StableSwapRemoveLiquidityEvent?: optimism_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  optimism_SwapDailyVolume?: optimism_SwapDailyVolumeResolvers<ContextType>;
  optimism_SwapHourlyVolume?: optimism_SwapHourlyVolumeResolvers<ContextType>;
  optimism_SwapTradeVolume?: optimism_SwapTradeVolumeResolvers<ContextType>;
  optimism_SwapWeeklyVolume?: optimism_SwapWeeklyVolumeResolvers<ContextType>;
  optimism_SystemInfo?: optimism_SystemInfoResolvers<ContextType>;
  optimism__Block_?: optimism__Block_Resolvers<ContextType>;
  optimism__Meta_?: optimism__Meta_Resolvers<ContextType>;
  polygon_BigDecimal?: GraphQLScalarType;
  polygon_Bytes?: GraphQLScalarType;
  polygon_PooledToken?: polygon_PooledTokenResolvers<ContextType>;
  polygon_StableSwap?: polygon_StableSwapResolvers<ContextType>;
  polygon_StableSwapAddLiquidityEvent?: polygon_StableSwapAddLiquidityEventResolvers<ContextType>;
  polygon_StableSwapEvent?: polygon_StableSwapEventResolvers<ContextType>;
  polygon_StableSwapExchange?: polygon_StableSwapExchangeResolvers<ContextType>;
  polygon_StableSwapRemoveLiquidityEvent?: polygon_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  polygon_SwapDailyVolume?: polygon_SwapDailyVolumeResolvers<ContextType>;
  polygon_SwapHourlyVolume?: polygon_SwapHourlyVolumeResolvers<ContextType>;
  polygon_SwapTradeVolume?: polygon_SwapTradeVolumeResolvers<ContextType>;
  polygon_SwapWeeklyVolume?: polygon_SwapWeeklyVolumeResolvers<ContextType>;
  polygon_SystemInfo?: polygon_SystemInfoResolvers<ContextType>;
  polygon__Block_?: polygon__Block_Resolvers<ContextType>;
  polygon__Meta_?: polygon__Meta_Resolvers<ContextType>;
  staginggoerli_BigDecimal?: GraphQLScalarType;
  staginggoerli_Bytes?: GraphQLScalarType;
  staginggoerli_PooledToken?: staginggoerli_PooledTokenResolvers<ContextType>;
  staginggoerli_StableSwap?: staginggoerli_StableSwapResolvers<ContextType>;
  staginggoerli_StableSwapAddLiquidityEvent?: staginggoerli_StableSwapAddLiquidityEventResolvers<ContextType>;
  staginggoerli_StableSwapEvent?: staginggoerli_StableSwapEventResolvers<ContextType>;
  staginggoerli_StableSwapExchange?: staginggoerli_StableSwapExchangeResolvers<ContextType>;
  staginggoerli_StableSwapRemoveLiquidityEvent?: staginggoerli_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  staginggoerli_SwapDailyVolume?: staginggoerli_SwapDailyVolumeResolvers<ContextType>;
  staginggoerli_SwapHourlyVolume?: staginggoerli_SwapHourlyVolumeResolvers<ContextType>;
  staginggoerli_SwapTradeVolume?: staginggoerli_SwapTradeVolumeResolvers<ContextType>;
  staginggoerli_SwapWeeklyVolume?: staginggoerli_SwapWeeklyVolumeResolvers<ContextType>;
  staginggoerli_SystemInfo?: staginggoerli_SystemInfoResolvers<ContextType>;
  staginggoerli__Block_?: staginggoerli__Block_Resolvers<ContextType>;
  staginggoerli__Meta_?: staginggoerli__Meta_Resolvers<ContextType>;
  arbitrumgoerli_BigDecimal?: GraphQLScalarType;
  arbitrumgoerli_Bytes?: GraphQLScalarType;
  arbitrumgoerli_PooledToken?: arbitrumgoerli_PooledTokenResolvers<ContextType>;
  arbitrumgoerli_StableSwap?: arbitrumgoerli_StableSwapResolvers<ContextType>;
  arbitrumgoerli_StableSwapAddLiquidityEvent?: arbitrumgoerli_StableSwapAddLiquidityEventResolvers<ContextType>;
  arbitrumgoerli_StableSwapEvent?: arbitrumgoerli_StableSwapEventResolvers<ContextType>;
  arbitrumgoerli_StableSwapExchange?: arbitrumgoerli_StableSwapExchangeResolvers<ContextType>;
  arbitrumgoerli_StableSwapRemoveLiquidityEvent?: arbitrumgoerli_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  arbitrumgoerli_SwapDailyVolume?: arbitrumgoerli_SwapDailyVolumeResolvers<ContextType>;
  arbitrumgoerli_SwapHourlyVolume?: arbitrumgoerli_SwapHourlyVolumeResolvers<ContextType>;
  arbitrumgoerli_SwapTradeVolume?: arbitrumgoerli_SwapTradeVolumeResolvers<ContextType>;
  arbitrumgoerli_SwapWeeklyVolume?: arbitrumgoerli_SwapWeeklyVolumeResolvers<ContextType>;
  arbitrumgoerli_SystemInfo?: arbitrumgoerli_SystemInfoResolvers<ContextType>;
  arbitrumgoerli__Block_?: arbitrumgoerli__Block_Resolvers<ContextType>;
  arbitrumgoerli__Meta_?: arbitrumgoerli__Meta_Resolvers<ContextType>;
  optimismgoerli_BigDecimal?: GraphQLScalarType;
  optimismgoerli_Bytes?: GraphQLScalarType;
  optimismgoerli_PooledToken?: optimismgoerli_PooledTokenResolvers<ContextType>;
  optimismgoerli_StableSwap?: optimismgoerli_StableSwapResolvers<ContextType>;
  optimismgoerli_StableSwapAddLiquidityEvent?: optimismgoerli_StableSwapAddLiquidityEventResolvers<ContextType>;
  optimismgoerli_StableSwapEvent?: optimismgoerli_StableSwapEventResolvers<ContextType>;
  optimismgoerli_StableSwapExchange?: optimismgoerli_StableSwapExchangeResolvers<ContextType>;
  optimismgoerli_StableSwapRemoveLiquidityEvent?: optimismgoerli_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  optimismgoerli_SwapDailyVolume?: optimismgoerli_SwapDailyVolumeResolvers<ContextType>;
  optimismgoerli_SwapHourlyVolume?: optimismgoerli_SwapHourlyVolumeResolvers<ContextType>;
  optimismgoerli_SwapTradeVolume?: optimismgoerli_SwapTradeVolumeResolvers<ContextType>;
  optimismgoerli_SwapWeeklyVolume?: optimismgoerli_SwapWeeklyVolumeResolvers<ContextType>;
  optimismgoerli_SystemInfo?: optimismgoerli_SystemInfoResolvers<ContextType>;
  optimismgoerli__Block_?: optimismgoerli__Block_Resolvers<ContextType>;
  optimismgoerli__Meta_?: optimismgoerli__Meta_Resolvers<ContextType>;
  stagingmumbai_BigDecimal?: GraphQLScalarType;
  stagingmumbai_Bytes?: GraphQLScalarType;
  stagingmumbai_PooledToken?: stagingmumbai_PooledTokenResolvers<ContextType>;
  stagingmumbai_StableSwap?: stagingmumbai_StableSwapResolvers<ContextType>;
  stagingmumbai_StableSwapAddLiquidityEvent?: stagingmumbai_StableSwapAddLiquidityEventResolvers<ContextType>;
  stagingmumbai_StableSwapEvent?: stagingmumbai_StableSwapEventResolvers<ContextType>;
  stagingmumbai_StableSwapExchange?: stagingmumbai_StableSwapExchangeResolvers<ContextType>;
  stagingmumbai_StableSwapRemoveLiquidityEvent?: stagingmumbai_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  stagingmumbai_SwapDailyVolume?: stagingmumbai_SwapDailyVolumeResolvers<ContextType>;
  stagingmumbai_SwapHourlyVolume?: stagingmumbai_SwapHourlyVolumeResolvers<ContextType>;
  stagingmumbai_SwapTradeVolume?: stagingmumbai_SwapTradeVolumeResolvers<ContextType>;
  stagingmumbai_SwapWeeklyVolume?: stagingmumbai_SwapWeeklyVolumeResolvers<ContextType>;
  stagingmumbai_SystemInfo?: stagingmumbai_SystemInfoResolvers<ContextType>;
  stagingmumbai__Block_?: stagingmumbai__Block_Resolvers<ContextType>;
  stagingmumbai__Meta_?: stagingmumbai__Meta_Resolvers<ContextType>;
  stagingarbitrumgoerli_BigDecimal?: GraphQLScalarType;
  stagingarbitrumgoerli_Bytes?: GraphQLScalarType;
  stagingarbitrumgoerli_PooledToken?: stagingarbitrumgoerli_PooledTokenResolvers<ContextType>;
  stagingarbitrumgoerli_StableSwap?: stagingarbitrumgoerli_StableSwapResolvers<ContextType>;
  stagingarbitrumgoerli_StableSwapAddLiquidityEvent?: stagingarbitrumgoerli_StableSwapAddLiquidityEventResolvers<ContextType>;
  stagingarbitrumgoerli_StableSwapEvent?: stagingarbitrumgoerli_StableSwapEventResolvers<ContextType>;
  stagingarbitrumgoerli_StableSwapExchange?: stagingarbitrumgoerli_StableSwapExchangeResolvers<ContextType>;
  stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent?: stagingarbitrumgoerli_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  stagingarbitrumgoerli_SwapDailyVolume?: stagingarbitrumgoerli_SwapDailyVolumeResolvers<ContextType>;
  stagingarbitrumgoerli_SwapHourlyVolume?: stagingarbitrumgoerli_SwapHourlyVolumeResolvers<ContextType>;
  stagingarbitrumgoerli_SwapTradeVolume?: stagingarbitrumgoerli_SwapTradeVolumeResolvers<ContextType>;
  stagingarbitrumgoerli_SwapWeeklyVolume?: stagingarbitrumgoerli_SwapWeeklyVolumeResolvers<ContextType>;
  stagingarbitrumgoerli_SystemInfo?: stagingarbitrumgoerli_SystemInfoResolvers<ContextType>;
  stagingarbitrumgoerli__Block_?: stagingarbitrumgoerli__Block_Resolvers<ContextType>;
  stagingarbitrumgoerli__Meta_?: stagingarbitrumgoerli__Meta_Resolvers<ContextType>;
}>;


export type MeshContext = StableSwapMumbaiTypes.Context & StableSwapXdaiTypes.Context & StableSwapArbitrumOneTypes.Context & StableSwapBnbTypes.Context & StableSwapGoerliTypes.Context & StableSwapStagingOptimismGoerliTypes.Context & StableSwapOptimismTypes.Context & StableSwapPolygonTypes.Context & StableSwapStagingGoerliTypes.Context & StableSwapArbitrumGoerliTypes.Context & StableSwapOptimismGoerliTypes.Context & StableSwapStagingMumbaiTypes.Context & StableSwapStagingArbitrumGoerliTypes.Context & BaseMeshContext;


const baseDir = pathModule.join(typeof __dirname === 'string' ? __dirname : '/', '..');

const importFn: ImportFn = <T>(moduleId: string) => {
  const relativeModuleId = (pathModule.isAbsolute(moduleId) ? pathModule.relative(baseDir, moduleId) : moduleId).split('\\').join('/').replace(baseDir + '/', '');
  switch(relativeModuleId) {
    case ".graphclient/sources/StableSwap_Mumbai/introspectionSchema":
      return import("./sources/StableSwap_Mumbai/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Xdai/introspectionSchema":
      return import("./sources/StableSwap_Xdai/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_ArbitrumOne/introspectionSchema":
      return import("./sources/StableSwap_ArbitrumOne/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Bnb/introspectionSchema":
      return import("./sources/StableSwap_Bnb/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Goerli/introspectionSchema":
      return import("./sources/StableSwap_Goerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Staging_OptimismGoerli/introspectionSchema":
      return import("./sources/StableSwap_Staging_OptimismGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Optimism/introspectionSchema":
      return import("./sources/StableSwap_Optimism/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Polygon/introspectionSchema":
      return import("./sources/StableSwap_Polygon/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Staging_Goerli/introspectionSchema":
      return import("./sources/StableSwap_Staging_Goerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_ArbitrumGoerli/introspectionSchema":
      return import("./sources/StableSwap_ArbitrumGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_OptimismGoerli/introspectionSchema":
      return import("./sources/StableSwap_OptimismGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Staging_Mumbai/introspectionSchema":
      return import("./sources/StableSwap_Staging_Mumbai/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Staging_ArbitrumGoerli/introspectionSchema":
      return import("./sources/StableSwap_Staging_ArbitrumGoerli/introspectionSchema") as T;
    
    default:
      return Promise.reject(new Error(`Cannot find module '${relativeModuleId}'.`));
  }
};

const rootStore = new MeshStore('.graphclient', new FsStoreStorageAdapter({
  cwd: baseDir,
  importFn,
  fileType: "ts",
}), {
  readonly: true,
  validate: false
});

export const rawServeConfig: YamlConfig.Config['serve'] = undefined as any
export async function getMeshOptions(): Promise<GetMeshOptions> {
const pubsub = new PubSub();
const sourcesStore = rootStore.child('sources');
const logger = new DefaultLogger("GraphClient");
const cache = new (MeshCache as any)({
      ...({} as any),
      importFn,
      store: rootStore.child('cache'),
      pubsub,
      logger,
    } as any)

const sources: MeshResolvedSource[] = [];
const transforms: MeshTransform[] = [];
const additionalEnvelopPlugins: MeshPlugin<any>[] = [];
const stableSwapGoerliTransforms = [];
const stableSwapStagingGoerliTransforms = [];
const stableSwapOptimismGoerliTransforms = [];
const stableSwapStagingOptimismGoerliTransforms = [];
const stableSwapMumbaiTransforms = [];
const stableSwapStagingMumbaiTransforms = [];
const stableSwapArbitrumGoerliTransforms = [];
const stableSwapStagingArbitrumGoerliTransforms = [];
const stableSwapOptimismTransforms = [];
const stableSwapPolygonTransforms = [];
const stableSwapArbitrumOneTransforms = [];
const stableSwapBnbTransforms = [];
const stableSwapXdaiTransforms = [];
const additionalTypeDefs = [] as any[];
const stableSwapGoerliHandler = new GraphqlHandler({
              name: "StableSwap_Goerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Goerli"),
              logger: logger.child("StableSwap_Goerli"),
              importFn,
            });
const stableSwapStagingGoerliHandler = new GraphqlHandler({
              name: "StableSwap_Staging_Goerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-staging-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Staging_Goerli"),
              logger: logger.child("StableSwap_Staging_Goerli"),
              importFn,
            });
const stableSwapOptimismGoerliHandler = new GraphqlHandler({
              name: "StableSwap_OptimismGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-opt-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_OptimismGoerli"),
              logger: logger.child("StableSwap_OptimismGoerli"),
              importFn,
            });
const stableSwapStagingOptimismGoerliHandler = new GraphqlHandler({
              name: "StableSwap_Staging_OptimismGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-staging-opt-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Staging_OptimismGoerli"),
              logger: logger.child("StableSwap_Staging_OptimismGoerli"),
              importFn,
            });
const stableSwapMumbaiHandler = new GraphqlHandler({
              name: "StableSwap_Mumbai",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-mumbai","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Mumbai"),
              logger: logger.child("StableSwap_Mumbai"),
              importFn,
            });
const stableSwapStagingMumbaiHandler = new GraphqlHandler({
              name: "StableSwap_Staging_Mumbai",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-staging-mumbai","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Staging_Mumbai"),
              logger: logger.child("StableSwap_Staging_Mumbai"),
              importFn,
            });
const stableSwapArbitrumGoerliHandler = new GraphqlHandler({
              name: "StableSwap_ArbitrumGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-arb-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_ArbitrumGoerli"),
              logger: logger.child("StableSwap_ArbitrumGoerli"),
              importFn,
            });
const stableSwapStagingArbitrumGoerliHandler = new GraphqlHandler({
              name: "StableSwap_Staging_ArbitrumGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-staging-arb-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Staging_ArbitrumGoerli"),
              logger: logger.child("StableSwap_Staging_ArbitrumGoerli"),
              importFn,
            });
const stableSwapOptimismHandler = new GraphqlHandler({
              name: "StableSwap_Optimism",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-optimism","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Optimism"),
              logger: logger.child("StableSwap_Optimism"),
              importFn,
            });
const stableSwapPolygonHandler = new GraphqlHandler({
              name: "StableSwap_Polygon",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-polygon","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Polygon"),
              logger: logger.child("StableSwap_Polygon"),
              importFn,
            });
const stableSwapArbitrumOneHandler = new GraphqlHandler({
              name: "StableSwap_ArbitrumOne",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-arbitrum-one","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_ArbitrumOne"),
              logger: logger.child("StableSwap_ArbitrumOne"),
              importFn,
            });
const stableSwapBnbHandler = new GraphqlHandler({
              name: "StableSwap_Bnb",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-bnb","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Bnb"),
              logger: logger.child("StableSwap_Bnb"),
              importFn,
            });
const stableSwapXdaiHandler = new GraphqlHandler({
              name: "StableSwap_Xdai",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-gnosis","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Xdai"),
              logger: logger.child("StableSwap_Xdai"),
              importFn,
            });
stableSwapGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Goerli",
                  config: {"value":"goerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Staging_Goerli",
                  config: {"value":"staginggoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapOptimismGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_OptimismGoerli",
                  config: {"value":"optimismgoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingOptimismGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Staging_OptimismGoerli",
                  config: {"value":"stagingoptimismgoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapMumbaiTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Mumbai",
                  config: {"value":"mumbai_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingMumbaiTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Staging_Mumbai",
                  config: {"value":"stagingmumbai_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapArbitrumGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_ArbitrumGoerli",
                  config: {"value":"arbitrumgoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingArbitrumGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Staging_ArbitrumGoerli",
                  config: {"value":"stagingarbitrumgoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapOptimismTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Optimism",
                  config: {"value":"optimism_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapPolygonTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Polygon",
                  config: {"value":"polygon_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapArbitrumOneTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_ArbitrumOne",
                  config: {"value":"arbitrumone_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapBnbTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Bnb",
                  config: {"value":"bnb_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapXdaiTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Xdai",
                  config: {"value":"xdai_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Goerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Staging_Goerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapOptimismGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_OptimismGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingOptimismGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Staging_OptimismGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapMumbaiTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Mumbai",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingMumbaiTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Staging_Mumbai",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapArbitrumGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_ArbitrumGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingArbitrumGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Staging_ArbitrumGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapOptimismTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Optimism",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapPolygonTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Polygon",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapArbitrumOneTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_ArbitrumOne",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapBnbTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Bnb",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapXdaiTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Xdai",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
sources[0] = {
          name: 'StableSwap_Goerli',
          handler: stableSwapGoerliHandler,
          transforms: stableSwapGoerliTransforms
        }
sources[1] = {
          name: 'StableSwap_Staging_Goerli',
          handler: stableSwapStagingGoerliHandler,
          transforms: stableSwapStagingGoerliTransforms
        }
sources[2] = {
          name: 'StableSwap_OptimismGoerli',
          handler: stableSwapOptimismGoerliHandler,
          transforms: stableSwapOptimismGoerliTransforms
        }
sources[3] = {
          name: 'StableSwap_Staging_OptimismGoerli',
          handler: stableSwapStagingOptimismGoerliHandler,
          transforms: stableSwapStagingOptimismGoerliTransforms
        }
sources[4] = {
          name: 'StableSwap_Mumbai',
          handler: stableSwapMumbaiHandler,
          transforms: stableSwapMumbaiTransforms
        }
sources[5] = {
          name: 'StableSwap_Staging_Mumbai',
          handler: stableSwapStagingMumbaiHandler,
          transforms: stableSwapStagingMumbaiTransforms
        }
sources[6] = {
          name: 'StableSwap_ArbitrumGoerli',
          handler: stableSwapArbitrumGoerliHandler,
          transforms: stableSwapArbitrumGoerliTransforms
        }
sources[7] = {
          name: 'StableSwap_Staging_ArbitrumGoerli',
          handler: stableSwapStagingArbitrumGoerliHandler,
          transforms: stableSwapStagingArbitrumGoerliTransforms
        }
sources[8] = {
          name: 'StableSwap_Optimism',
          handler: stableSwapOptimismHandler,
          transforms: stableSwapOptimismTransforms
        }
sources[9] = {
          name: 'StableSwap_Polygon',
          handler: stableSwapPolygonHandler,
          transforms: stableSwapPolygonTransforms
        }
sources[10] = {
          name: 'StableSwap_ArbitrumOne',
          handler: stableSwapArbitrumOneHandler,
          transforms: stableSwapArbitrumOneTransforms
        }
sources[11] = {
          name: 'StableSwap_Bnb',
          handler: stableSwapBnbHandler,
          transforms: stableSwapBnbTransforms
        }
sources[12] = {
          name: 'StableSwap_Xdai',
          handler: stableSwapXdaiHandler,
          transforms: stableSwapXdaiTransforms
        }
const additionalResolvers = [] as any[]
const merger = new(StitchingMerger as any)({
        cache,
        pubsub,
        logger: logger.child('stitchingMerger'),
        store: rootStore.child('stitchingMerger')
      })

  return {
    sources,
    transforms,
    additionalTypeDefs,
    additionalResolvers,
    cache,
    pubsub,
    merger,
    logger,
    additionalEnvelopPlugins,
    get documents() {
      return [
      
    ];
    },
    fetchFn,
  };
}

export function createBuiltMeshHTTPHandler(): MeshHTTPHandler<MeshContext> {
  return createMeshHTTPHandler<MeshContext>({
    baseDir,
    getBuiltMesh: getBuiltGraphClient,
    rawServeConfig: undefined,
  })
}


let meshInstance$: Promise<MeshInstance> | undefined;

export function getBuiltGraphClient(): Promise<MeshInstance> {
  if (meshInstance$ == null) {
    meshInstance$ = getMeshOptions().then(meshOptions => getMesh(meshOptions)).then(mesh => {
      const id = mesh.pubsub.subscribe('destroy', () => {
        meshInstance$ = undefined;
        mesh.pubsub.unsubscribe(id);
      });
      return mesh;
    });
  }
  return meshInstance$;
}

export const execute: ExecuteMeshFn = (...args) => getBuiltGraphClient().then(({ execute }) => execute(...args));

export const subscribe: SubscribeMeshFn = (...args) => getBuiltGraphClient().then(({ subscribe }) => subscribe(...args));